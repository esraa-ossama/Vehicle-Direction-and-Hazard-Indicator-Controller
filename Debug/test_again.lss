
test_again.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000276c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000072  00800060  0000276c  00002800  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000067c  008000d2  008000d2  00002872  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002872  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000028a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000660  00000000  00000000  000028e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006e55  00000000  00000000  00002f40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001acb  00000000  00000000  00009d95  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003e66  00000000  00000000  0000b860  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001134  00000000  00000000  0000f6c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000022bb  00000000  00000000  000107fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000059a8  00000000  00000000  00012ab7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005b0  00000000  00000000  0001845f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 33 00 	jmp	0x66	; 0x66 <__ctors_end>
       4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
       8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
       c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      1c:	0c 94 9a 02 	jmp	0x534	; 0x534 <__vector_7>
      20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      54:	1c 0e       	add	r1, r28
      56:	1c 0e       	add	r1, r28
      58:	4b 0e       	add	r4, r27
      5a:	50 0e       	add	r5, r16
      5c:	66 0e       	add	r6, r22
      5e:	1c 0e       	add	r1, r28
      60:	1c 0e       	add	r1, r28
      62:	4b 0e       	add	r4, r27
      64:	50 0e       	add	r5, r16

00000066 <__ctors_end>:
      66:	11 24       	eor	r1, r1
      68:	1f be       	out	0x3f, r1	; 63
      6a:	cf e5       	ldi	r28, 0x5F	; 95
      6c:	d8 e0       	ldi	r29, 0x08	; 8
      6e:	de bf       	out	0x3e, r29	; 62
      70:	cd bf       	out	0x3d, r28	; 61

00000072 <__do_copy_data>:
      72:	10 e0       	ldi	r17, 0x00	; 0
      74:	a0 e6       	ldi	r26, 0x60	; 96
      76:	b0 e0       	ldi	r27, 0x00	; 0
      78:	ec e6       	ldi	r30, 0x6C	; 108
      7a:	f7 e2       	ldi	r31, 0x27	; 39
      7c:	02 c0       	rjmp	.+4      	; 0x82 <__do_copy_data+0x10>
      7e:	05 90       	lpm	r0, Z+
      80:	0d 92       	st	X+, r0
      82:	a2 3d       	cpi	r26, 0xD2	; 210
      84:	b1 07       	cpc	r27, r17
      86:	d9 f7       	brne	.-10     	; 0x7e <__do_copy_data+0xc>

00000088 <__do_clear_bss>:
      88:	27 e0       	ldi	r18, 0x07	; 7
      8a:	a2 ed       	ldi	r26, 0xD2	; 210
      8c:	b0 e0       	ldi	r27, 0x00	; 0
      8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
      90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
      92:	ae 34       	cpi	r26, 0x4E	; 78
      94:	b2 07       	cpc	r27, r18
      96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
      98:	0e 94 29 10 	call	0x2052	; 0x2052 <main>
      9c:	0c 94 b4 13 	jmp	0x2768	; 0x2768 <_exit>

000000a0 <__bad_interrupt>:
      a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <call_Polling>:
*******************************************************************************/
void call_Polling(void){

	while(1){
		
		Poll();
      a4:	0e 94 3f 13 	call	0x267e	; 0x267e <Poll>
		vTaskDelay(ticks);/*delay as this task should start every 50ms */
      a8:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <ticks>
      ac:	90 e0       	ldi	r25, 0x00	; 0
      ae:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <vTaskDelay>
      b2:	f8 cf       	rjmp	.-16     	; 0xa4 <call_Polling>

000000b4 <call_FSM>:
*******************************************************************************/
void call_FSM(void){
	
	while(1){
		
		SYSTEM_BEHAVIOR();
      b4:	0e 94 5f 13 	call	0x26be	; 0x26be <SYSTEM_BEHAVIOR>
      b8:	fd cf       	rjmp	.-6      	; 0xb4 <call_FSM>

000000ba <Blink_Right_LED>:
* \Parameters (out): None
* \Return value:   : None
*******************************************************************************/
void Blink_Right_LED(TimerHandle_t xTimer){

	if (Right_LED_Counter == 0){ /*check If this time zero enter function make led low*/
      ba:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <Right_LED_Counter>
      be:	81 11       	cpse	r24, r1
      c0:	09 c0       	rjmp	.+18     	; 0xd4 <Blink_Right_LED+0x1a>
		PWM2_Write(1);
      c2:	81 e0       	ldi	r24, 0x01	; 1
      c4:	0e 94 c0 11 	call	0x2380	; 0x2380 <PWM2_Write>
		Right_LED_Counter ++;
      c8:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <Right_LED_Counter>
      cc:	8f 5f       	subi	r24, 0xFF	; 255
      ce:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <Right_LED_Counter>
      d2:	08 95       	ret
	}
	else {/*check If this time one enter function make led low*/
		PWM2_Write(200);
      d4:	88 ec       	ldi	r24, 0xC8	; 200
      d6:	0e 94 c0 11 	call	0x2380	; 0x2380 <PWM2_Write>
		Right_LED_Counter = 0;
      da:	10 92 d7 00 	sts	0x00D7, r1	; 0x8000d7 <Right_LED_Counter>
      de:	08 95       	ret

000000e0 <Blink_Left_LED>:
* \Parameters (out): None
* \Return value:   : None
*******************************************************************************/
void Blink_Left_LED(TimerHandle_t xTimer ){

	if (Left_LED_Counter == 0){/*check If this time zero enter function make led low*/
      e0:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <Left_LED_Counter>
      e4:	81 11       	cpse	r24, r1
      e6:	09 c0       	rjmp	.+18     	; 0xfa <Blink_Left_LED+0x1a>
		PWM_Write(1);
      e8:	81 e0       	ldi	r24, 0x01	; 1
      ea:	0e 94 7d 11 	call	0x22fa	; 0x22fa <PWM_Write>
		Left_LED_Counter ++;
      ee:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <Left_LED_Counter>
      f2:	8f 5f       	subi	r24, 0xFF	; 255
      f4:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <Left_LED_Counter>
      f8:	08 95       	ret
	}
	else {/*check If this time one enter function make led low*/
		PWM_Write(200);
      fa:	88 ec       	ldi	r24, 0xC8	; 200
      fc:	0e 94 7d 11 	call	0x22fa	; 0x22fa <PWM_Write>
		Left_LED_Counter = 0;
     100:	10 92 d6 00 	sts	0x00D6, r1	; 0x8000d6 <Left_LED_Counter>
     104:	08 95       	ret

00000106 <app_init>:
* \Return value:   : None
*******************************************************************************/
void app_init(void)
{
	
	init_btns();
     106:	0e 94 c2 11 	call	0x2384	; 0x2384 <init_btns>
	Right_LED_init();
     10a:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <Right_LED_init>
	Left_LED_init();
     10e:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <Left_LED_init>
     112:	08 95       	ret

00000114 <app_startSchedular>:
* \Parameters (in) : None
* \Parameters (out): None
* \Return value:   : None
*******************************************************************************/
void app_startSchedular(void)
{
     114:	ef 92       	push	r14
     116:	ff 92       	push	r15
     118:	0f 93       	push	r16
     11a:	1f 93       	push	r17
	
		xTaskCreate(call_Polling,"Calling_poll",200,NULL,2,&myCallerPollHandler);
     11c:	0f 2e       	mov	r0, r31
     11e:	f4 ed       	ldi	r31, 0xD4	; 212
     120:	ef 2e       	mov	r14, r31
     122:	f0 e0       	ldi	r31, 0x00	; 0
     124:	ff 2e       	mov	r15, r31
     126:	f0 2d       	mov	r31, r0
     128:	02 e0       	ldi	r16, 0x02	; 2
     12a:	20 e0       	ldi	r18, 0x00	; 0
     12c:	30 e0       	ldi	r19, 0x00	; 0
     12e:	48 ec       	ldi	r20, 0xC8	; 200
     130:	50 e0       	ldi	r21, 0x00	; 0
     132:	61 e8       	ldi	r22, 0x81	; 129
     134:	70 e0       	ldi	r23, 0x00	; 0
     136:	82 e5       	ldi	r24, 0x52	; 82
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	0e 94 74 08 	call	0x10e8	; 0x10e8 <xTaskCreate>
		xTaskCreate(call_FSM,"Calling_switchCases",200,NULL,1,&FSM_Handler);
     13e:	0f 2e       	mov	r0, r31
     140:	f2 ed       	ldi	r31, 0xD2	; 210
     142:	ef 2e       	mov	r14, r31
     144:	f0 e0       	ldi	r31, 0x00	; 0
     146:	ff 2e       	mov	r15, r31
     148:	f0 2d       	mov	r31, r0
     14a:	01 e0       	ldi	r16, 0x01	; 1
     14c:	20 e0       	ldi	r18, 0x00	; 0
     14e:	30 e0       	ldi	r19, 0x00	; 0
     150:	48 ec       	ldi	r20, 0xC8	; 200
     152:	50 e0       	ldi	r21, 0x00	; 0
     154:	6e e8       	ldi	r22, 0x8E	; 142
     156:	70 e0       	ldi	r23, 0x00	; 0
     158:	8a e5       	ldi	r24, 0x5A	; 90
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	0e 94 74 08 	call	0x10e8	; 0x10e8 <xTaskCreate>
		Right_BlinkTimer=xTimerCreate("Right_blink_timer",LED_ticks,pdTRUE, ( void * ) 0,Blink_Right_LED);
     160:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     164:	70 e0       	ldi	r23, 0x00	; 0
     166:	0d e5       	ldi	r16, 0x5D	; 93
     168:	10 e0       	ldi	r17, 0x00	; 0
     16a:	20 e0       	ldi	r18, 0x00	; 0
     16c:	30 e0       	ldi	r19, 0x00	; 0
     16e:	41 e0       	ldi	r20, 0x01	; 1
     170:	82 ea       	ldi	r24, 0xA2	; 162
     172:	90 e0       	ldi	r25, 0x00	; 0
     174:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <xTimerCreate>
     178:	90 93 48 07 	sts	0x0748, r25	; 0x800748 <Right_BlinkTimer+0x1>
     17c:	80 93 47 07 	sts	0x0747, r24	; 0x800747 <Right_BlinkTimer>
		Left_BlinkTimer=xTimerCreate("Left_blink_timer",LED_ticks,pdTRUE, ( void * ) 0,Blink_Left_LED);
     180:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     184:	70 e0       	ldi	r23, 0x00	; 0
     186:	00 e7       	ldi	r16, 0x70	; 112
     188:	10 e0       	ldi	r17, 0x00	; 0
     18a:	20 e0       	ldi	r18, 0x00	; 0
     18c:	30 e0       	ldi	r19, 0x00	; 0
     18e:	41 e0       	ldi	r20, 0x01	; 1
     190:	84 eb       	ldi	r24, 0xB4	; 180
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <xTimerCreate>
     198:	90 93 46 07 	sts	0x0746, r25	; 0x800746 <Left_BlinkTimer+0x1>
     19c:	80 93 45 07 	sts	0x0745, r24	; 0x800745 <Left_BlinkTimer>
// 		xTimerStart(Right_BlinkTimer, 0);
// 		xTimerStart(Left_BlinkTimer, 0);

		
		vTaskStartScheduler();
     1a0:	0e 94 cd 08 	call	0x119a	; 0x119a <vTaskStartScheduler>
		
	
	
}
     1a4:	1f 91       	pop	r17
     1a6:	0f 91       	pop	r16
     1a8:	ff 90       	pop	r15
     1aa:	ef 90       	pop	r14
     1ac:	08 95       	ret

000001ae <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     1ae:	fc 01       	movw	r30, r24
     1b0:	03 96       	adiw	r24, 0x03	; 3
     1b2:	92 83       	std	Z+2, r25	; 0x02
     1b4:	81 83       	std	Z+1, r24	; 0x01
     1b6:	2f ef       	ldi	r18, 0xFF	; 255
     1b8:	3f ef       	ldi	r19, 0xFF	; 255
     1ba:	34 83       	std	Z+4, r19	; 0x04
     1bc:	23 83       	std	Z+3, r18	; 0x03
     1be:	96 83       	std	Z+6, r25	; 0x06
     1c0:	85 83       	std	Z+5, r24	; 0x05
     1c2:	90 87       	std	Z+8, r25	; 0x08
     1c4:	87 83       	std	Z+7, r24	; 0x07
     1c6:	10 82       	st	Z, r1
     1c8:	08 95       	ret

000001ca <vListInitialiseItem>:
     1ca:	fc 01       	movw	r30, r24
     1cc:	11 86       	std	Z+9, r1	; 0x09
     1ce:	10 86       	std	Z+8, r1	; 0x08
     1d0:	08 95       	ret

000001d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     1d2:	cf 93       	push	r28
     1d4:	df 93       	push	r29
     1d6:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     1d8:	48 81       	ld	r20, Y
     1da:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     1dc:	4f 3f       	cpi	r20, 0xFF	; 255
     1de:	2f ef       	ldi	r18, 0xFF	; 255
     1e0:	52 07       	cpc	r21, r18
     1e2:	21 f4       	brne	.+8      	; 0x1ec <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     1e4:	fc 01       	movw	r30, r24
     1e6:	a7 81       	ldd	r26, Z+7	; 0x07
     1e8:	b0 85       	ldd	r27, Z+8	; 0x08
     1ea:	0d c0       	rjmp	.+26     	; 0x206 <vListInsert+0x34>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     1ec:	dc 01       	movw	r26, r24
     1ee:	13 96       	adiw	r26, 0x03	; 3
     1f0:	01 c0       	rjmp	.+2      	; 0x1f4 <vListInsert+0x22>
     1f2:	df 01       	movw	r26, r30
     1f4:	12 96       	adiw	r26, 0x02	; 2
     1f6:	ed 91       	ld	r30, X+
     1f8:	fc 91       	ld	r31, X
     1fa:	13 97       	sbiw	r26, 0x03	; 3
     1fc:	20 81       	ld	r18, Z
     1fe:	31 81       	ldd	r19, Z+1	; 0x01
     200:	42 17       	cp	r20, r18
     202:	53 07       	cpc	r21, r19
     204:	b0 f7       	brcc	.-20     	; 0x1f2 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     206:	12 96       	adiw	r26, 0x02	; 2
     208:	ed 91       	ld	r30, X+
     20a:	fc 91       	ld	r31, X
     20c:	13 97       	sbiw	r26, 0x03	; 3
     20e:	fb 83       	std	Y+3, r31	; 0x03
     210:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     212:	d5 83       	std	Z+5, r29	; 0x05
     214:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     216:	bd 83       	std	Y+5, r27	; 0x05
     218:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     21a:	13 96       	adiw	r26, 0x03	; 3
     21c:	dc 93       	st	X, r29
     21e:	ce 93       	st	-X, r28
     220:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     222:	99 87       	std	Y+9, r25	; 0x09
     224:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     226:	fc 01       	movw	r30, r24
     228:	20 81       	ld	r18, Z
     22a:	2f 5f       	subi	r18, 0xFF	; 255
     22c:	20 83       	st	Z, r18
}
     22e:	df 91       	pop	r29
     230:	cf 91       	pop	r28
     232:	08 95       	ret

00000234 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     234:	cf 93       	push	r28
     236:	df 93       	push	r29
     238:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     23a:	a0 85       	ldd	r26, Z+8	; 0x08
     23c:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     23e:	c2 81       	ldd	r28, Z+2	; 0x02
     240:	d3 81       	ldd	r29, Z+3	; 0x03
     242:	84 81       	ldd	r24, Z+4	; 0x04
     244:	95 81       	ldd	r25, Z+5	; 0x05
     246:	9d 83       	std	Y+5, r25	; 0x05
     248:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     24a:	c4 81       	ldd	r28, Z+4	; 0x04
     24c:	d5 81       	ldd	r29, Z+5	; 0x05
     24e:	82 81       	ldd	r24, Z+2	; 0x02
     250:	93 81       	ldd	r25, Z+3	; 0x03
     252:	9b 83       	std	Y+3, r25	; 0x03
     254:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     256:	11 96       	adiw	r26, 0x01	; 1
     258:	8d 91       	ld	r24, X+
     25a:	9c 91       	ld	r25, X
     25c:	12 97       	sbiw	r26, 0x02	; 2
     25e:	e8 17       	cp	r30, r24
     260:	f9 07       	cpc	r31, r25
     262:	31 f4       	brne	.+12     	; 0x270 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     264:	84 81       	ldd	r24, Z+4	; 0x04
     266:	95 81       	ldd	r25, Z+5	; 0x05
     268:	12 96       	adiw	r26, 0x02	; 2
     26a:	9c 93       	st	X, r25
     26c:	8e 93       	st	-X, r24
     26e:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     270:	11 86       	std	Z+9, r1	; 0x09
     272:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     274:	8c 91       	ld	r24, X
     276:	81 50       	subi	r24, 0x01	; 1
     278:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     27a:	8c 91       	ld	r24, X
}
     27c:	df 91       	pop	r29
     27e:	cf 91       	pop	r28
     280:	08 95       	ret

00000282 <prvSetupTimerInterrupt>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     282:	1b bc       	out	0x2b, r1	; 43
     284:	8c e7       	ldi	r24, 0x7C	; 124
     286:	8a bd       	out	0x2a, r24	; 42
     288:	8b e0       	ldi	r24, 0x0B	; 11
     28a:	8e bd       	out	0x2e, r24	; 46
     28c:	89 b7       	in	r24, 0x39	; 57
     28e:	80 61       	ori	r24, 0x10	; 16
     290:	89 bf       	out	0x39, r24	; 57
     292:	08 95       	ret

00000294 <pxPortInitialiseStack>:
     294:	31 e1       	ldi	r19, 0x11	; 17
     296:	fc 01       	movw	r30, r24
     298:	30 83       	st	Z, r19
     29a:	31 97       	sbiw	r30, 0x01	; 1
     29c:	22 e2       	ldi	r18, 0x22	; 34
     29e:	20 83       	st	Z, r18
     2a0:	31 97       	sbiw	r30, 0x01	; 1
     2a2:	a3 e3       	ldi	r26, 0x33	; 51
     2a4:	a0 83       	st	Z, r26
     2a6:	31 97       	sbiw	r30, 0x01	; 1
     2a8:	60 83       	st	Z, r22
     2aa:	31 97       	sbiw	r30, 0x01	; 1
     2ac:	70 83       	st	Z, r23
     2ae:	31 97       	sbiw	r30, 0x01	; 1
     2b0:	10 82       	st	Z, r1
     2b2:	31 97       	sbiw	r30, 0x01	; 1
     2b4:	60 e8       	ldi	r22, 0x80	; 128
     2b6:	60 83       	st	Z, r22
     2b8:	31 97       	sbiw	r30, 0x01	; 1
     2ba:	10 82       	st	Z, r1
     2bc:	31 97       	sbiw	r30, 0x01	; 1
     2be:	62 e0       	ldi	r22, 0x02	; 2
     2c0:	60 83       	st	Z, r22
     2c2:	31 97       	sbiw	r30, 0x01	; 1
     2c4:	63 e0       	ldi	r22, 0x03	; 3
     2c6:	60 83       	st	Z, r22
     2c8:	31 97       	sbiw	r30, 0x01	; 1
     2ca:	64 e0       	ldi	r22, 0x04	; 4
     2cc:	60 83       	st	Z, r22
     2ce:	31 97       	sbiw	r30, 0x01	; 1
     2d0:	65 e0       	ldi	r22, 0x05	; 5
     2d2:	60 83       	st	Z, r22
     2d4:	31 97       	sbiw	r30, 0x01	; 1
     2d6:	66 e0       	ldi	r22, 0x06	; 6
     2d8:	60 83       	st	Z, r22
     2da:	31 97       	sbiw	r30, 0x01	; 1
     2dc:	67 e0       	ldi	r22, 0x07	; 7
     2de:	60 83       	st	Z, r22
     2e0:	31 97       	sbiw	r30, 0x01	; 1
     2e2:	68 e0       	ldi	r22, 0x08	; 8
     2e4:	60 83       	st	Z, r22
     2e6:	31 97       	sbiw	r30, 0x01	; 1
     2e8:	69 e0       	ldi	r22, 0x09	; 9
     2ea:	60 83       	st	Z, r22
     2ec:	31 97       	sbiw	r30, 0x01	; 1
     2ee:	60 e1       	ldi	r22, 0x10	; 16
     2f0:	60 83       	st	Z, r22
     2f2:	31 97       	sbiw	r30, 0x01	; 1
     2f4:	30 83       	st	Z, r19
     2f6:	31 97       	sbiw	r30, 0x01	; 1
     2f8:	32 e1       	ldi	r19, 0x12	; 18
     2fa:	30 83       	st	Z, r19
     2fc:	31 97       	sbiw	r30, 0x01	; 1
     2fe:	33 e1       	ldi	r19, 0x13	; 19
     300:	30 83       	st	Z, r19
     302:	31 97       	sbiw	r30, 0x01	; 1
     304:	34 e1       	ldi	r19, 0x14	; 20
     306:	30 83       	st	Z, r19
     308:	31 97       	sbiw	r30, 0x01	; 1
     30a:	35 e1       	ldi	r19, 0x15	; 21
     30c:	30 83       	st	Z, r19
     30e:	31 97       	sbiw	r30, 0x01	; 1
     310:	36 e1       	ldi	r19, 0x16	; 22
     312:	30 83       	st	Z, r19
     314:	31 97       	sbiw	r30, 0x01	; 1
     316:	37 e1       	ldi	r19, 0x17	; 23
     318:	30 83       	st	Z, r19
     31a:	31 97       	sbiw	r30, 0x01	; 1
     31c:	38 e1       	ldi	r19, 0x18	; 24
     31e:	30 83       	st	Z, r19
     320:	31 97       	sbiw	r30, 0x01	; 1
     322:	39 e1       	ldi	r19, 0x19	; 25
     324:	30 83       	st	Z, r19
     326:	31 97       	sbiw	r30, 0x01	; 1
     328:	30 e2       	ldi	r19, 0x20	; 32
     32a:	30 83       	st	Z, r19
     32c:	31 97       	sbiw	r30, 0x01	; 1
     32e:	31 e2       	ldi	r19, 0x21	; 33
     330:	30 83       	st	Z, r19
     332:	31 97       	sbiw	r30, 0x01	; 1
     334:	20 83       	st	Z, r18
     336:	31 97       	sbiw	r30, 0x01	; 1
     338:	23 e2       	ldi	r18, 0x23	; 35
     33a:	20 83       	st	Z, r18
     33c:	31 97       	sbiw	r30, 0x01	; 1
     33e:	40 83       	st	Z, r20
     340:	31 97       	sbiw	r30, 0x01	; 1
     342:	50 83       	st	Z, r21
     344:	31 97       	sbiw	r30, 0x01	; 1
     346:	26 e2       	ldi	r18, 0x26	; 38
     348:	20 83       	st	Z, r18
     34a:	31 97       	sbiw	r30, 0x01	; 1
     34c:	27 e2       	ldi	r18, 0x27	; 39
     34e:	20 83       	st	Z, r18
     350:	31 97       	sbiw	r30, 0x01	; 1
     352:	28 e2       	ldi	r18, 0x28	; 40
     354:	20 83       	st	Z, r18
     356:	31 97       	sbiw	r30, 0x01	; 1
     358:	29 e2       	ldi	r18, 0x29	; 41
     35a:	20 83       	st	Z, r18
     35c:	31 97       	sbiw	r30, 0x01	; 1
     35e:	20 e3       	ldi	r18, 0x30	; 48
     360:	20 83       	st	Z, r18
     362:	31 97       	sbiw	r30, 0x01	; 1
     364:	21 e3       	ldi	r18, 0x31	; 49
     366:	20 83       	st	Z, r18
     368:	86 97       	sbiw	r24, 0x26	; 38
     36a:	08 95       	ret

0000036c <xPortStartScheduler>:
     36c:	0e 94 41 01 	call	0x282	; 0x282 <prvSetupTimerInterrupt>
     370:	a0 91 1e 07 	lds	r26, 0x071E	; 0x80071e <pxCurrentTCB>
     374:	b0 91 1f 07 	lds	r27, 0x071F	; 0x80071f <pxCurrentTCB+0x1>
     378:	cd 91       	ld	r28, X+
     37a:	cd bf       	out	0x3d, r28	; 61
     37c:	dd 91       	ld	r29, X+
     37e:	de bf       	out	0x3e, r29	; 62
     380:	ff 91       	pop	r31
     382:	ef 91       	pop	r30
     384:	df 91       	pop	r29
     386:	cf 91       	pop	r28
     388:	bf 91       	pop	r27
     38a:	af 91       	pop	r26
     38c:	9f 91       	pop	r25
     38e:	8f 91       	pop	r24
     390:	7f 91       	pop	r23
     392:	6f 91       	pop	r22
     394:	5f 91       	pop	r21
     396:	4f 91       	pop	r20
     398:	3f 91       	pop	r19
     39a:	2f 91       	pop	r18
     39c:	1f 91       	pop	r17
     39e:	0f 91       	pop	r16
     3a0:	ff 90       	pop	r15
     3a2:	ef 90       	pop	r14
     3a4:	df 90       	pop	r13
     3a6:	cf 90       	pop	r12
     3a8:	bf 90       	pop	r11
     3aa:	af 90       	pop	r10
     3ac:	9f 90       	pop	r9
     3ae:	8f 90       	pop	r8
     3b0:	7f 90       	pop	r7
     3b2:	6f 90       	pop	r6
     3b4:	5f 90       	pop	r5
     3b6:	4f 90       	pop	r4
     3b8:	3f 90       	pop	r3
     3ba:	2f 90       	pop	r2
     3bc:	1f 90       	pop	r1
     3be:	0f 90       	pop	r0
     3c0:	0f be       	out	0x3f, r0	; 63
     3c2:	0f 90       	pop	r0
     3c4:	08 95       	ret
     3c6:	81 e0       	ldi	r24, 0x01	; 1
     3c8:	08 95       	ret

000003ca <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     3ca:	0f 92       	push	r0
     3cc:	0f b6       	in	r0, 0x3f	; 63
     3ce:	f8 94       	cli
     3d0:	0f 92       	push	r0
     3d2:	1f 92       	push	r1
     3d4:	11 24       	eor	r1, r1
     3d6:	2f 92       	push	r2
     3d8:	3f 92       	push	r3
     3da:	4f 92       	push	r4
     3dc:	5f 92       	push	r5
     3de:	6f 92       	push	r6
     3e0:	7f 92       	push	r7
     3e2:	8f 92       	push	r8
     3e4:	9f 92       	push	r9
     3e6:	af 92       	push	r10
     3e8:	bf 92       	push	r11
     3ea:	cf 92       	push	r12
     3ec:	df 92       	push	r13
     3ee:	ef 92       	push	r14
     3f0:	ff 92       	push	r15
     3f2:	0f 93       	push	r16
     3f4:	1f 93       	push	r17
     3f6:	2f 93       	push	r18
     3f8:	3f 93       	push	r19
     3fa:	4f 93       	push	r20
     3fc:	5f 93       	push	r21
     3fe:	6f 93       	push	r22
     400:	7f 93       	push	r23
     402:	8f 93       	push	r24
     404:	9f 93       	push	r25
     406:	af 93       	push	r26
     408:	bf 93       	push	r27
     40a:	cf 93       	push	r28
     40c:	df 93       	push	r29
     40e:	ef 93       	push	r30
     410:	ff 93       	push	r31
     412:	a0 91 1e 07 	lds	r26, 0x071E	; 0x80071e <pxCurrentTCB>
     416:	b0 91 1f 07 	lds	r27, 0x071F	; 0x80071f <pxCurrentTCB+0x1>
     41a:	0d b6       	in	r0, 0x3d	; 61
     41c:	0d 92       	st	X+, r0
     41e:	0e b6       	in	r0, 0x3e	; 62
     420:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     422:	0e 94 15 0b 	call	0x162a	; 0x162a <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     426:	a0 91 1e 07 	lds	r26, 0x071E	; 0x80071e <pxCurrentTCB>
     42a:	b0 91 1f 07 	lds	r27, 0x071F	; 0x80071f <pxCurrentTCB+0x1>
     42e:	cd 91       	ld	r28, X+
     430:	cd bf       	out	0x3d, r28	; 61
     432:	dd 91       	ld	r29, X+
     434:	de bf       	out	0x3e, r29	; 62
     436:	ff 91       	pop	r31
     438:	ef 91       	pop	r30
     43a:	df 91       	pop	r29
     43c:	cf 91       	pop	r28
     43e:	bf 91       	pop	r27
     440:	af 91       	pop	r26
     442:	9f 91       	pop	r25
     444:	8f 91       	pop	r24
     446:	7f 91       	pop	r23
     448:	6f 91       	pop	r22
     44a:	5f 91       	pop	r21
     44c:	4f 91       	pop	r20
     44e:	3f 91       	pop	r19
     450:	2f 91       	pop	r18
     452:	1f 91       	pop	r17
     454:	0f 91       	pop	r16
     456:	ff 90       	pop	r15
     458:	ef 90       	pop	r14
     45a:	df 90       	pop	r13
     45c:	cf 90       	pop	r12
     45e:	bf 90       	pop	r11
     460:	af 90       	pop	r10
     462:	9f 90       	pop	r9
     464:	8f 90       	pop	r8
     466:	7f 90       	pop	r7
     468:	6f 90       	pop	r6
     46a:	5f 90       	pop	r5
     46c:	4f 90       	pop	r4
     46e:	3f 90       	pop	r3
     470:	2f 90       	pop	r2
     472:	1f 90       	pop	r1
     474:	0f 90       	pop	r0
     476:	0f be       	out	0x3f, r0	; 63
     478:	0f 90       	pop	r0

	asm volatile ( "ret" );
     47a:	08 95       	ret

0000047c <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     47c:	0f 92       	push	r0
     47e:	0f b6       	in	r0, 0x3f	; 63
     480:	f8 94       	cli
     482:	0f 92       	push	r0
     484:	1f 92       	push	r1
     486:	11 24       	eor	r1, r1
     488:	2f 92       	push	r2
     48a:	3f 92       	push	r3
     48c:	4f 92       	push	r4
     48e:	5f 92       	push	r5
     490:	6f 92       	push	r6
     492:	7f 92       	push	r7
     494:	8f 92       	push	r8
     496:	9f 92       	push	r9
     498:	af 92       	push	r10
     49a:	bf 92       	push	r11
     49c:	cf 92       	push	r12
     49e:	df 92       	push	r13
     4a0:	ef 92       	push	r14
     4a2:	ff 92       	push	r15
     4a4:	0f 93       	push	r16
     4a6:	1f 93       	push	r17
     4a8:	2f 93       	push	r18
     4aa:	3f 93       	push	r19
     4ac:	4f 93       	push	r20
     4ae:	5f 93       	push	r21
     4b0:	6f 93       	push	r22
     4b2:	7f 93       	push	r23
     4b4:	8f 93       	push	r24
     4b6:	9f 93       	push	r25
     4b8:	af 93       	push	r26
     4ba:	bf 93       	push	r27
     4bc:	cf 93       	push	r28
     4be:	df 93       	push	r29
     4c0:	ef 93       	push	r30
     4c2:	ff 93       	push	r31
     4c4:	a0 91 1e 07 	lds	r26, 0x071E	; 0x80071e <pxCurrentTCB>
     4c8:	b0 91 1f 07 	lds	r27, 0x071F	; 0x80071f <pxCurrentTCB+0x1>
     4cc:	0d b6       	in	r0, 0x3d	; 61
     4ce:	0d 92       	st	X+, r0
     4d0:	0e b6       	in	r0, 0x3e	; 62
     4d2:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     4d4:	0e 94 10 09 	call	0x1220	; 0x1220 <xTaskIncrementTick>
     4d8:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     4da:	0e 94 15 0b 	call	0x162a	; 0x162a <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     4de:	a0 91 1e 07 	lds	r26, 0x071E	; 0x80071e <pxCurrentTCB>
     4e2:	b0 91 1f 07 	lds	r27, 0x071F	; 0x80071f <pxCurrentTCB+0x1>
     4e6:	cd 91       	ld	r28, X+
     4e8:	cd bf       	out	0x3d, r28	; 61
     4ea:	dd 91       	ld	r29, X+
     4ec:	de bf       	out	0x3e, r29	; 62
     4ee:	ff 91       	pop	r31
     4f0:	ef 91       	pop	r30
     4f2:	df 91       	pop	r29
     4f4:	cf 91       	pop	r28
     4f6:	bf 91       	pop	r27
     4f8:	af 91       	pop	r26
     4fa:	9f 91       	pop	r25
     4fc:	8f 91       	pop	r24
     4fe:	7f 91       	pop	r23
     500:	6f 91       	pop	r22
     502:	5f 91       	pop	r21
     504:	4f 91       	pop	r20
     506:	3f 91       	pop	r19
     508:	2f 91       	pop	r18
     50a:	1f 91       	pop	r17
     50c:	0f 91       	pop	r16
     50e:	ff 90       	pop	r15
     510:	ef 90       	pop	r14
     512:	df 90       	pop	r13
     514:	cf 90       	pop	r12
     516:	bf 90       	pop	r11
     518:	af 90       	pop	r10
     51a:	9f 90       	pop	r9
     51c:	8f 90       	pop	r8
     51e:	7f 90       	pop	r7
     520:	6f 90       	pop	r6
     522:	5f 90       	pop	r5
     524:	4f 90       	pop	r4
     526:	3f 90       	pop	r3
     528:	2f 90       	pop	r2
     52a:	1f 90       	pop	r1
     52c:	0f 90       	pop	r0
     52e:	0f be       	out	0x3f, r0	; 63
     530:	0f 90       	pop	r0

	asm volatile ( "ret" );
     532:	08 95       	ret

00000534 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     534:	0e 94 3e 02 	call	0x47c	; 0x47c <vPortYieldFromTick>
		asm volatile ( "reti" );
     538:	18 95       	reti

0000053a <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     53a:	e2 ee       	ldi	r30, 0xE2	; 226
     53c:	f0 e0       	ldi	r31, 0x00	; 0
     53e:	a6 ee       	ldi	r26, 0xE6	; 230
     540:	b0 e0       	ldi	r27, 0x00	; 0
     542:	b1 83       	std	Z+1, r27	; 0x01
     544:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     546:	13 82       	std	Z+3, r1	; 0x03
     548:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     54a:	ee eb       	ldi	r30, 0xBE	; 190
     54c:	f6 e0       	ldi	r31, 0x06	; 6
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( BlockLink_t * ) uxAddress;
     54e:	f0 93 e1 00 	sts	0x00E1, r31	; 0x8000e1 <pxEnd+0x1>
     552:	e0 93 e0 00 	sts	0x00E0, r30	; 0x8000e0 <pxEnd>
    pxEnd->xBlockSize = 0;
     556:	13 82       	std	Z+3, r1	; 0x03
     558:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     55a:	11 82       	std	Z+1, r1	; 0x01
     55c:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
     55e:	88 ed       	ldi	r24, 0xD8	; 216
     560:	95 e0       	ldi	r25, 0x05	; 5
     562:	13 96       	adiw	r26, 0x03	; 3
     564:	9c 93       	st	X, r25
     566:	8e 93       	st	-X, r24
     568:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     56a:	ed 93       	st	X+, r30
     56c:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     56e:	90 93 dd 00 	sts	0x00DD, r25	; 0x8000dd <xMinimumEverFreeBytesRemaining+0x1>
     572:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     576:	90 93 df 00 	sts	0x00DF, r25	; 0x8000df <xFreeBytesRemaining+0x1>
     57a:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <xFreeBytesRemaining>
     57e:	08 95       	ret

00000580 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     580:	cf 93       	push	r28
     582:	df 93       	push	r29
     584:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     586:	a2 ee       	ldi	r26, 0xE2	; 226
     588:	b0 e0       	ldi	r27, 0x00	; 0
     58a:	01 c0       	rjmp	.+2      	; 0x58e <prvInsertBlockIntoFreeList+0xe>
     58c:	df 01       	movw	r26, r30
     58e:	ed 91       	ld	r30, X+
     590:	fc 91       	ld	r31, X
     592:	11 97       	sbiw	r26, 0x01	; 1
     594:	ec 17       	cp	r30, r28
     596:	fd 07       	cpc	r31, r29
     598:	c8 f3       	brcs	.-14     	; 0x58c <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     59a:	12 96       	adiw	r26, 0x02	; 2
     59c:	8d 91       	ld	r24, X+
     59e:	9c 91       	ld	r25, X
     5a0:	13 97       	sbiw	r26, 0x03	; 3
     5a2:	9d 01       	movw	r18, r26
     5a4:	28 0f       	add	r18, r24
     5a6:	39 1f       	adc	r19, r25
     5a8:	c2 17       	cp	r28, r18
     5aa:	d3 07       	cpc	r29, r19
     5ac:	49 f4       	brne	.+18     	; 0x5c0 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     5ae:	2a 81       	ldd	r18, Y+2	; 0x02
     5b0:	3b 81       	ldd	r19, Y+3	; 0x03
     5b2:	82 0f       	add	r24, r18
     5b4:	93 1f       	adc	r25, r19
     5b6:	13 96       	adiw	r26, 0x03	; 3
     5b8:	9c 93       	st	X, r25
     5ba:	8e 93       	st	-X, r24
     5bc:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     5be:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     5c0:	8a 81       	ldd	r24, Y+2	; 0x02
     5c2:	9b 81       	ldd	r25, Y+3	; 0x03
     5c4:	9e 01       	movw	r18, r28
     5c6:	28 0f       	add	r18, r24
     5c8:	39 1f       	adc	r19, r25
     5ca:	e2 17       	cp	r30, r18
     5cc:	f3 07       	cpc	r31, r19
     5ce:	c1 f4       	brne	.+48     	; 0x600 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     5d0:	20 91 e0 00 	lds	r18, 0x00E0	; 0x8000e0 <pxEnd>
     5d4:	30 91 e1 00 	lds	r19, 0x00E1	; 0x8000e1 <pxEnd+0x1>
     5d8:	e2 17       	cp	r30, r18
     5da:	f3 07       	cpc	r31, r19
     5dc:	71 f0       	breq	.+28     	; 0x5fa <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     5de:	22 81       	ldd	r18, Z+2	; 0x02
     5e0:	33 81       	ldd	r19, Z+3	; 0x03
     5e2:	82 0f       	add	r24, r18
     5e4:	93 1f       	adc	r25, r19
     5e6:	9b 83       	std	Y+3, r25	; 0x03
     5e8:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     5ea:	ed 91       	ld	r30, X+
     5ec:	fc 91       	ld	r31, X
     5ee:	11 97       	sbiw	r26, 0x01	; 1
     5f0:	80 81       	ld	r24, Z
     5f2:	91 81       	ldd	r25, Z+1	; 0x01
     5f4:	99 83       	std	Y+1, r25	; 0x01
     5f6:	88 83       	st	Y, r24
     5f8:	05 c0       	rjmp	.+10     	; 0x604 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     5fa:	39 83       	std	Y+1, r19	; 0x01
     5fc:	28 83       	st	Y, r18
     5fe:	02 c0       	rjmp	.+4      	; 0x604 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     600:	f9 83       	std	Y+1, r31	; 0x01
     602:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     604:	ca 17       	cp	r28, r26
     606:	db 07       	cpc	r29, r27
     608:	11 f0       	breq	.+4      	; 0x60e <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     60a:	cd 93       	st	X+, r28
     60c:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     60e:	df 91       	pop	r29
     610:	cf 91       	pop	r28
     612:	08 95       	ret

00000614 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     614:	ef 92       	push	r14
     616:	ff 92       	push	r15
     618:	0f 93       	push	r16
     61a:	1f 93       	push	r17
     61c:	cf 93       	push	r28
     61e:	df 93       	push	r29
     620:	8c 01       	movw	r16, r24
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
     622:	0e 94 fd 08 	call	0x11fa	; 0x11fa <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     626:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <pxEnd>
     62a:	90 91 e1 00 	lds	r25, 0x00E1	; 0x8000e1 <pxEnd+0x1>
     62e:	89 2b       	or	r24, r25
     630:	11 f4       	brne	.+4      	; 0x636 <pvPortMalloc+0x22>
        {
            prvHeapInit();
     632:	0e 94 9d 02 	call	0x53a	; 0x53a <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
     636:	01 15       	cp	r16, r1
     638:	11 05       	cpc	r17, r1
     63a:	49 f0       	breq	.+18     	; 0x64e <pvPortMalloc+0x3a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
     63c:	0b 3f       	cpi	r16, 0xFB	; 251
     63e:	8f ef       	ldi	r24, 0xFF	; 255
     640:	18 07       	cpc	r17, r24
     642:	18 f4       	brcc	.+6      	; 0x64a <pvPortMalloc+0x36>
            {
                xWantedSize += xAdditionalRequiredSize;
     644:	0b 5f       	subi	r16, 0xFB	; 251
     646:	1f 4f       	sbci	r17, 0xFF	; 255
     648:	02 c0       	rjmp	.+4      	; 0x64e <pvPortMalloc+0x3a>
            }
            else
            {
                xWantedSize = 0;
     64a:	00 e0       	ldi	r16, 0x00	; 0
     64c:	10 e0       	ldi	r17, 0x00	; 0

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
     64e:	11 23       	and	r17, r17
     650:	0c f4       	brge	.+2      	; 0x654 <pvPortMalloc+0x40>
     652:	66 c0       	rjmp	.+204    	; 0x720 <pvPortMalloc+0x10c>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     654:	01 15       	cp	r16, r1
     656:	11 05       	cpc	r17, r1
     658:	09 f4       	brne	.+2      	; 0x65c <pvPortMalloc+0x48>
     65a:	65 c0       	rjmp	.+202    	; 0x726 <pvPortMalloc+0x112>
     65c:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <xFreeBytesRemaining>
     660:	90 91 df 00 	lds	r25, 0x00DF	; 0x8000df <xFreeBytesRemaining+0x1>
     664:	80 17       	cp	r24, r16
     666:	91 07       	cpc	r25, r17
     668:	08 f4       	brcc	.+2      	; 0x66c <pvPortMalloc+0x58>
     66a:	60 c0       	rjmp	.+192    	; 0x72c <pvPortMalloc+0x118>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     66c:	c0 91 e2 00 	lds	r28, 0x00E2	; 0x8000e2 <xStart>
     670:	d0 91 e3 00 	lds	r29, 0x00E3	; 0x8000e3 <xStart+0x1>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     674:	e2 ee       	ldi	r30, 0xE2	; 226
     676:	f0 e0       	ldi	r31, 0x00	; 0
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     678:	02 c0       	rjmp	.+4      	; 0x67e <pvPortMalloc+0x6a>
                {
                    pxPreviousBlock = pxBlock;
     67a:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     67c:	ec 01       	movw	r28, r24
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     67e:	8a 81       	ldd	r24, Y+2	; 0x02
     680:	9b 81       	ldd	r25, Y+3	; 0x03
     682:	80 17       	cp	r24, r16
     684:	91 07       	cpc	r25, r17
     686:	20 f4       	brcc	.+8      	; 0x690 <pvPortMalloc+0x7c>
     688:	88 81       	ld	r24, Y
     68a:	99 81       	ldd	r25, Y+1	; 0x01
     68c:	00 97       	sbiw	r24, 0x00	; 0
     68e:	a9 f7       	brne	.-22     	; 0x67a <pvPortMalloc+0x66>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     690:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <pxEnd>
     694:	90 91 e1 00 	lds	r25, 0x00E1	; 0x8000e1 <pxEnd+0x1>
     698:	c8 17       	cp	r28, r24
     69a:	d9 07       	cpc	r29, r25
     69c:	09 f4       	brne	.+2      	; 0x6a0 <pvPortMalloc+0x8c>
     69e:	49 c0       	rjmp	.+146    	; 0x732 <pvPortMalloc+0x11e>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     6a0:	e0 80       	ld	r14, Z
     6a2:	f1 80       	ldd	r15, Z+1	; 0x01
     6a4:	84 e0       	ldi	r24, 0x04	; 4
     6a6:	e8 0e       	add	r14, r24
     6a8:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     6aa:	88 81       	ld	r24, Y
     6ac:	99 81       	ldd	r25, Y+1	; 0x01
     6ae:	91 83       	std	Z+1, r25	; 0x01
     6b0:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     6b2:	2a 81       	ldd	r18, Y+2	; 0x02
     6b4:	3b 81       	ldd	r19, Y+3	; 0x03
     6b6:	20 1b       	sub	r18, r16
     6b8:	31 0b       	sbc	r19, r17
     6ba:	29 30       	cpi	r18, 0x09	; 9
     6bc:	31 05       	cpc	r19, r1
     6be:	50 f0       	brcs	.+20     	; 0x6d4 <pvPortMalloc+0xc0>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     6c0:	ce 01       	movw	r24, r28
     6c2:	80 0f       	add	r24, r16
     6c4:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     6c6:	fc 01       	movw	r30, r24
     6c8:	33 83       	std	Z+3, r19	; 0x03
     6ca:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     6cc:	1b 83       	std	Y+3, r17	; 0x03
     6ce:	0a 83       	std	Y+2, r16	; 0x02

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     6d0:	0e 94 c0 02 	call	0x580	; 0x580 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     6d4:	2a 81       	ldd	r18, Y+2	; 0x02
     6d6:	3b 81       	ldd	r19, Y+3	; 0x03
     6d8:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <xFreeBytesRemaining>
     6dc:	90 91 df 00 	lds	r25, 0x00DF	; 0x8000df <xFreeBytesRemaining+0x1>
     6e0:	82 1b       	sub	r24, r18
     6e2:	93 0b       	sbc	r25, r19
     6e4:	90 93 df 00 	sts	0x00DF, r25	; 0x8000df <xFreeBytesRemaining+0x1>
     6e8:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     6ec:	40 91 dc 00 	lds	r20, 0x00DC	; 0x8000dc <xMinimumEverFreeBytesRemaining>
     6f0:	50 91 dd 00 	lds	r21, 0x00DD	; 0x8000dd <xMinimumEverFreeBytesRemaining+0x1>
     6f4:	84 17       	cp	r24, r20
     6f6:	95 07       	cpc	r25, r21
     6f8:	20 f4       	brcc	.+8      	; 0x702 <pvPortMalloc+0xee>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     6fa:	90 93 dd 00 	sts	0x00DD, r25	; 0x8000dd <xMinimumEverFreeBytesRemaining+0x1>
     6fe:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
     702:	30 68       	ori	r19, 0x80	; 128
     704:	3b 83       	std	Y+3, r19	; 0x03
     706:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     708:	19 82       	std	Y+1, r1	; 0x01
     70a:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     70c:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <xNumberOfSuccessfulAllocations>
     710:	90 91 db 00 	lds	r25, 0x00DB	; 0x8000db <xNumberOfSuccessfulAllocations+0x1>
     714:	01 96       	adiw	r24, 0x01	; 1
     716:	90 93 db 00 	sts	0x00DB, r25	; 0x8000db <xNumberOfSuccessfulAllocations+0x1>
     71a:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <xNumberOfSuccessfulAllocations>
     71e:	0b c0       	rjmp	.+22     	; 0x736 <pvPortMalloc+0x122>
void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
     720:	e1 2c       	mov	r14, r1
     722:	f1 2c       	mov	r15, r1
     724:	08 c0       	rjmp	.+16     	; 0x736 <pvPortMalloc+0x122>
     726:	e1 2c       	mov	r14, r1
     728:	f1 2c       	mov	r15, r1
     72a:	05 c0       	rjmp	.+10     	; 0x736 <pvPortMalloc+0x122>
     72c:	e1 2c       	mov	r14, r1
     72e:	f1 2c       	mov	r15, r1
     730:	02 c0       	rjmp	.+4      	; 0x736 <pvPortMalloc+0x122>
     732:	e1 2c       	mov	r14, r1
     734:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     736:	0e 94 2a 0a 	call	0x1454	; 0x1454 <xTaskResumeAll>
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     73a:	c7 01       	movw	r24, r14
     73c:	df 91       	pop	r29
     73e:	cf 91       	pop	r28
     740:	1f 91       	pop	r17
     742:	0f 91       	pop	r16
     744:	ff 90       	pop	r15
     746:	ef 90       	pop	r14
     748:	08 95       	ret

0000074a <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     74a:	0f 93       	push	r16
     74c:	1f 93       	push	r17
     74e:	cf 93       	push	r28
     750:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     752:	00 97       	sbiw	r24, 0x00	; 0
     754:	49 f1       	breq	.+82     	; 0x7a8 <vPortFree+0x5e>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     756:	ec 01       	movw	r28, r24
     758:	24 97       	sbiw	r28, 0x04	; 4
        pxLink = ( void * ) puc;

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
     75a:	2a 81       	ldd	r18, Y+2	; 0x02
     75c:	3b 81       	ldd	r19, Y+3	; 0x03
     75e:	33 23       	and	r19, r19
     760:	1c f5       	brge	.+70     	; 0x7a8 <vPortFree+0x5e>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     762:	48 81       	ld	r20, Y
     764:	59 81       	ldd	r21, Y+1	; 0x01
     766:	45 2b       	or	r20, r21
     768:	f9 f4       	brne	.+62     	; 0x7a8 <vPortFree+0x5e>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
     76a:	3f 77       	andi	r19, 0x7F	; 127
     76c:	3b 83       	std	Y+3, r19	; 0x03
     76e:	2a 83       	std	Y+2, r18	; 0x02
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
     770:	0e 94 fd 08 	call	0x11fa	; 0x11fa <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     774:	8a 81       	ldd	r24, Y+2	; 0x02
     776:	9b 81       	ldd	r25, Y+3	; 0x03
     778:	20 91 de 00 	lds	r18, 0x00DE	; 0x8000de <xFreeBytesRemaining>
     77c:	30 91 df 00 	lds	r19, 0x00DF	; 0x8000df <xFreeBytesRemaining+0x1>
     780:	82 0f       	add	r24, r18
     782:	93 1f       	adc	r25, r19
     784:	90 93 df 00 	sts	0x00DF, r25	; 0x8000df <xFreeBytesRemaining+0x1>
     788:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     78c:	ce 01       	movw	r24, r28
     78e:	0e 94 c0 02 	call	0x580	; 0x580 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     792:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <xNumberOfSuccessfulFrees>
     796:	90 91 d9 00 	lds	r25, 0x00D9	; 0x8000d9 <xNumberOfSuccessfulFrees+0x1>
     79a:	01 96       	adiw	r24, 0x01	; 1
     79c:	90 93 d9 00 	sts	0x00D9, r25	; 0x8000d9 <xNumberOfSuccessfulFrees+0x1>
     7a0:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     7a4:	0e 94 2a 0a 	call	0x1454	; 0x1454 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     7a8:	df 91       	pop	r29
     7aa:	cf 91       	pop	r28
     7ac:	1f 91       	pop	r17
     7ae:	0f 91       	pop	r16
     7b0:	08 95       	ret

000007b2 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     7b2:	0f b6       	in	r0, 0x3f	; 63
     7b4:	f8 94       	cli
     7b6:	0f 92       	push	r0
     7b8:	fc 01       	movw	r30, r24
     7ba:	82 8d       	ldd	r24, Z+26	; 0x1a
     7bc:	81 11       	cpse	r24, r1
     7be:	02 c0       	rjmp	.+4      	; 0x7c4 <prvIsQueueEmpty+0x12>
     7c0:	81 e0       	ldi	r24, 0x01	; 1
     7c2:	01 c0       	rjmp	.+2      	; 0x7c6 <prvIsQueueEmpty+0x14>
     7c4:	80 e0       	ldi	r24, 0x00	; 0
     7c6:	0f 90       	pop	r0
     7c8:	0f be       	out	0x3f, r0	; 63
     7ca:	08 95       	ret

000007cc <prvIsQueueFull>:
     7cc:	0f b6       	in	r0, 0x3f	; 63
     7ce:	f8 94       	cli
     7d0:	0f 92       	push	r0
     7d2:	fc 01       	movw	r30, r24
     7d4:	22 8d       	ldd	r18, Z+26	; 0x1a
     7d6:	83 8d       	ldd	r24, Z+27	; 0x1b
     7d8:	28 13       	cpse	r18, r24
     7da:	02 c0       	rjmp	.+4      	; 0x7e0 <prvIsQueueFull+0x14>
     7dc:	81 e0       	ldi	r24, 0x01	; 1
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <prvIsQueueFull+0x16>
     7e0:	80 e0       	ldi	r24, 0x00	; 0
     7e2:	0f 90       	pop	r0
     7e4:	0f be       	out	0x3f, r0	; 63
     7e6:	08 95       	ret

000007e8 <prvCopyDataToQueue>:
     7e8:	0f 93       	push	r16
     7ea:	1f 93       	push	r17
     7ec:	cf 93       	push	r28
     7ee:	df 93       	push	r29
     7f0:	ec 01       	movw	r28, r24
     7f2:	04 2f       	mov	r16, r20
     7f4:	1a 8d       	ldd	r17, Y+26	; 0x1a
     7f6:	4c 8d       	ldd	r20, Y+28	; 0x1c
     7f8:	44 23       	and	r20, r20
     7fa:	b9 f1       	breq	.+110    	; 0x86a <__stack+0xb>
     7fc:	01 11       	cpse	r16, r1
     7fe:	16 c0       	rjmp	.+44     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
     800:	50 e0       	ldi	r21, 0x00	; 0
     802:	8a 81       	ldd	r24, Y+2	; 0x02
     804:	9b 81       	ldd	r25, Y+3	; 0x03
     806:	0e 94 ab 13 	call	0x2756	; 0x2756 <memcpy>
     80a:	2c 8d       	ldd	r18, Y+28	; 0x1c
     80c:	8a 81       	ldd	r24, Y+2	; 0x02
     80e:	9b 81       	ldd	r25, Y+3	; 0x03
     810:	82 0f       	add	r24, r18
     812:	91 1d       	adc	r25, r1
     814:	9b 83       	std	Y+3, r25	; 0x03
     816:	8a 83       	std	Y+2, r24	; 0x02
     818:	2c 81       	ldd	r18, Y+4	; 0x04
     81a:	3d 81       	ldd	r19, Y+5	; 0x05
     81c:	82 17       	cp	r24, r18
     81e:	93 07       	cpc	r25, r19
     820:	20 f1       	brcs	.+72     	; 0x86a <__stack+0xb>
     822:	88 81       	ld	r24, Y
     824:	99 81       	ldd	r25, Y+1	; 0x01
     826:	9b 83       	std	Y+3, r25	; 0x03
     828:	8a 83       	std	Y+2, r24	; 0x02
     82a:	1f c0       	rjmp	.+62     	; 0x86a <__stack+0xb>
     82c:	50 e0       	ldi	r21, 0x00	; 0
     82e:	8e 81       	ldd	r24, Y+6	; 0x06
     830:	9f 81       	ldd	r25, Y+7	; 0x07
     832:	0e 94 ab 13 	call	0x2756	; 0x2756 <memcpy>
     836:	8c 8d       	ldd	r24, Y+28	; 0x1c
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	91 95       	neg	r25
     83c:	81 95       	neg	r24
     83e:	91 09       	sbc	r25, r1
     840:	2e 81       	ldd	r18, Y+6	; 0x06
     842:	3f 81       	ldd	r19, Y+7	; 0x07
     844:	28 0f       	add	r18, r24
     846:	39 1f       	adc	r19, r25
     848:	3f 83       	std	Y+7, r19	; 0x07
     84a:	2e 83       	std	Y+6, r18	; 0x06
     84c:	48 81       	ld	r20, Y
     84e:	59 81       	ldd	r21, Y+1	; 0x01
     850:	24 17       	cp	r18, r20
     852:	35 07       	cpc	r19, r21
     854:	30 f4       	brcc	.+12     	; 0x862 <__stack+0x3>
     856:	2c 81       	ldd	r18, Y+4	; 0x04
     858:	3d 81       	ldd	r19, Y+5	; 0x05
     85a:	82 0f       	add	r24, r18
     85c:	93 1f       	adc	r25, r19
     85e:	9f 83       	std	Y+7, r25	; 0x07
     860:	8e 83       	std	Y+6, r24	; 0x06
     862:	02 30       	cpi	r16, 0x02	; 2
     864:	11 f4       	brne	.+4      	; 0x86a <__stack+0xb>
     866:	11 11       	cpse	r17, r1
     868:	11 50       	subi	r17, 0x01	; 1
     86a:	1f 5f       	subi	r17, 0xFF	; 255
     86c:	1a 8f       	std	Y+26, r17	; 0x1a
     86e:	80 e0       	ldi	r24, 0x00	; 0
     870:	df 91       	pop	r29
     872:	cf 91       	pop	r28
     874:	1f 91       	pop	r17
     876:	0f 91       	pop	r16
     878:	08 95       	ret

0000087a <prvCopyDataFromQueue>:
     87a:	fc 01       	movw	r30, r24
     87c:	44 8d       	ldd	r20, Z+28	; 0x1c
     87e:	44 23       	and	r20, r20
     880:	a9 f0       	breq	.+42     	; 0x8ac <prvCopyDataFromQueue+0x32>
     882:	50 e0       	ldi	r21, 0x00	; 0
     884:	26 81       	ldd	r18, Z+6	; 0x06
     886:	37 81       	ldd	r19, Z+7	; 0x07
     888:	24 0f       	add	r18, r20
     88a:	35 1f       	adc	r19, r21
     88c:	37 83       	std	Z+7, r19	; 0x07
     88e:	26 83       	std	Z+6, r18	; 0x06
     890:	84 81       	ldd	r24, Z+4	; 0x04
     892:	95 81       	ldd	r25, Z+5	; 0x05
     894:	28 17       	cp	r18, r24
     896:	39 07       	cpc	r19, r25
     898:	20 f0       	brcs	.+8      	; 0x8a2 <prvCopyDataFromQueue+0x28>
     89a:	80 81       	ld	r24, Z
     89c:	91 81       	ldd	r25, Z+1	; 0x01
     89e:	97 83       	std	Z+7, r25	; 0x07
     8a0:	86 83       	std	Z+6, r24	; 0x06
     8a2:	cb 01       	movw	r24, r22
     8a4:	66 81       	ldd	r22, Z+6	; 0x06
     8a6:	77 81       	ldd	r23, Z+7	; 0x07
     8a8:	0e 94 ab 13 	call	0x2756	; 0x2756 <memcpy>
     8ac:	08 95       	ret

000008ae <prvUnlockQueue>:
     8ae:	1f 93       	push	r17
     8b0:	cf 93       	push	r28
     8b2:	df 93       	push	r29
     8b4:	ec 01       	movw	r28, r24
     8b6:	0f b6       	in	r0, 0x3f	; 63
     8b8:	f8 94       	cli
     8ba:	0f 92       	push	r0
     8bc:	1e 8d       	ldd	r17, Y+30	; 0x1e
     8be:	0b c0       	rjmp	.+22     	; 0x8d6 <prvUnlockQueue+0x28>
     8c0:	89 89       	ldd	r24, Y+17	; 0x11
     8c2:	88 23       	and	r24, r24
     8c4:	51 f0       	breq	.+20     	; 0x8da <prvUnlockQueue+0x2c>
     8c6:	ce 01       	movw	r24, r28
     8c8:	41 96       	adiw	r24, 0x11	; 17
     8ca:	0e 94 c4 0b 	call	0x1788	; 0x1788 <xTaskRemoveFromEventList>
     8ce:	81 11       	cpse	r24, r1
     8d0:	0e 94 be 0c 	call	0x197c	; 0x197c <vTaskMissedYield>
     8d4:	11 50       	subi	r17, 0x01	; 1
     8d6:	11 16       	cp	r1, r17
     8d8:	9c f3       	brlt	.-26     	; 0x8c0 <prvUnlockQueue+0x12>
     8da:	8f ef       	ldi	r24, 0xFF	; 255
     8dc:	8e 8f       	std	Y+30, r24	; 0x1e
     8de:	0f 90       	pop	r0
     8e0:	0f be       	out	0x3f, r0	; 63
     8e2:	0f b6       	in	r0, 0x3f	; 63
     8e4:	f8 94       	cli
     8e6:	0f 92       	push	r0
     8e8:	1d 8d       	ldd	r17, Y+29	; 0x1d
     8ea:	0b c0       	rjmp	.+22     	; 0x902 <prvUnlockQueue+0x54>
     8ec:	88 85       	ldd	r24, Y+8	; 0x08
     8ee:	88 23       	and	r24, r24
     8f0:	51 f0       	breq	.+20     	; 0x906 <prvUnlockQueue+0x58>
     8f2:	ce 01       	movw	r24, r28
     8f4:	08 96       	adiw	r24, 0x08	; 8
     8f6:	0e 94 c4 0b 	call	0x1788	; 0x1788 <xTaskRemoveFromEventList>
     8fa:	81 11       	cpse	r24, r1
     8fc:	0e 94 be 0c 	call	0x197c	; 0x197c <vTaskMissedYield>
     900:	11 50       	subi	r17, 0x01	; 1
     902:	11 16       	cp	r1, r17
     904:	9c f3       	brlt	.-26     	; 0x8ec <prvUnlockQueue+0x3e>
     906:	8f ef       	ldi	r24, 0xFF	; 255
     908:	8d 8f       	std	Y+29, r24	; 0x1d
     90a:	0f 90       	pop	r0
     90c:	0f be       	out	0x3f, r0	; 63
     90e:	df 91       	pop	r29
     910:	cf 91       	pop	r28
     912:	1f 91       	pop	r17
     914:	08 95       	ret

00000916 <xQueueGenericReset>:
     916:	0f 93       	push	r16
     918:	1f 93       	push	r17
     91a:	cf 93       	push	r28
     91c:	df 93       	push	r29
     91e:	fc 01       	movw	r30, r24
     920:	36 2f       	mov	r19, r22
     922:	89 2b       	or	r24, r25
     924:	09 f4       	brne	.+2      	; 0x928 <xQueueGenericReset+0x12>
     926:	4d c0       	rjmp	.+154    	; 0x9c2 <xQueueGenericReset+0xac>
     928:	23 8d       	ldd	r18, Z+27	; 0x1b
     92a:	22 23       	and	r18, r18
     92c:	09 f4       	brne	.+2      	; 0x930 <xQueueGenericReset+0x1a>
     92e:	4b c0       	rjmp	.+150    	; 0x9c6 <xQueueGenericReset+0xb0>
     930:	02 2f       	mov	r16, r18
     932:	10 e0       	ldi	r17, 0x00	; 0
     934:	8f ef       	ldi	r24, 0xFF	; 255
     936:	9f ef       	ldi	r25, 0xFF	; 255
     938:	b8 01       	movw	r22, r16
     93a:	0e 94 7d 13 	call	0x26fa	; 0x26fa <__udivmodhi4>
     93e:	44 8d       	ldd	r20, Z+28	; 0x1c
     940:	84 2f       	mov	r24, r20
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	68 17       	cp	r22, r24
     946:	79 07       	cpc	r23, r25
     948:	08 f4       	brcc	.+2      	; 0x94c <xQueueGenericReset+0x36>
     94a:	3f c0       	rjmp	.+126    	; 0x9ca <xQueueGenericReset+0xb4>
     94c:	ef 01       	movw	r28, r30
     94e:	0f b6       	in	r0, 0x3f	; 63
     950:	f8 94       	cli
     952:	0f 92       	push	r0
     954:	60 81       	ld	r22, Z
     956:	71 81       	ldd	r23, Z+1	; 0x01
     958:	fb 01       	movw	r30, r22
     95a:	24 9f       	mul	r18, r20
     95c:	e0 0d       	add	r30, r0
     95e:	f1 1d       	adc	r31, r1
     960:	11 24       	eor	r1, r1
     962:	fd 83       	std	Y+5, r31	; 0x05
     964:	ec 83       	std	Y+4, r30	; 0x04
     966:	1a 8e       	std	Y+26, r1	; 0x1a
     968:	7b 83       	std	Y+3, r23	; 0x03
     96a:	6a 83       	std	Y+2, r22	; 0x02
     96c:	01 50       	subi	r16, 0x01	; 1
     96e:	11 09       	sbc	r17, r1
     970:	80 9f       	mul	r24, r16
     972:	a0 01       	movw	r20, r0
     974:	81 9f       	mul	r24, r17
     976:	50 0d       	add	r21, r0
     978:	90 9f       	mul	r25, r16
     97a:	50 0d       	add	r21, r0
     97c:	11 24       	eor	r1, r1
     97e:	cb 01       	movw	r24, r22
     980:	84 0f       	add	r24, r20
     982:	95 1f       	adc	r25, r21
     984:	9f 83       	std	Y+7, r25	; 0x07
     986:	8e 83       	std	Y+6, r24	; 0x06
     988:	8f ef       	ldi	r24, 0xFF	; 255
     98a:	8d 8f       	std	Y+29, r24	; 0x1d
     98c:	8e 8f       	std	Y+30, r24	; 0x1e
     98e:	31 11       	cpse	r19, r1
     990:	0c c0       	rjmp	.+24     	; 0x9aa <xQueueGenericReset+0x94>
     992:	88 85       	ldd	r24, Y+8	; 0x08
     994:	88 23       	and	r24, r24
     996:	89 f0       	breq	.+34     	; 0x9ba <xQueueGenericReset+0xa4>
     998:	ce 01       	movw	r24, r28
     99a:	08 96       	adiw	r24, 0x08	; 8
     99c:	0e 94 c4 0b 	call	0x1788	; 0x1788 <xTaskRemoveFromEventList>
     9a0:	88 23       	and	r24, r24
     9a2:	59 f0       	breq	.+22     	; 0x9ba <xQueueGenericReset+0xa4>
     9a4:	0e 94 e5 01 	call	0x3ca	; 0x3ca <vPortYield>
     9a8:	08 c0       	rjmp	.+16     	; 0x9ba <xQueueGenericReset+0xa4>
     9aa:	ce 01       	movw	r24, r28
     9ac:	08 96       	adiw	r24, 0x08	; 8
     9ae:	0e 94 d7 00 	call	0x1ae	; 0x1ae <vListInitialise>
     9b2:	ce 01       	movw	r24, r28
     9b4:	41 96       	adiw	r24, 0x11	; 17
     9b6:	0e 94 d7 00 	call	0x1ae	; 0x1ae <vListInitialise>
     9ba:	0f 90       	pop	r0
     9bc:	0f be       	out	0x3f, r0	; 63
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	05 c0       	rjmp	.+10     	; 0x9cc <xQueueGenericReset+0xb6>
     9c2:	80 e0       	ldi	r24, 0x00	; 0
     9c4:	03 c0       	rjmp	.+6      	; 0x9cc <xQueueGenericReset+0xb6>
     9c6:	80 e0       	ldi	r24, 0x00	; 0
     9c8:	01 c0       	rjmp	.+2      	; 0x9cc <xQueueGenericReset+0xb6>
     9ca:	80 e0       	ldi	r24, 0x00	; 0
     9cc:	df 91       	pop	r29
     9ce:	cf 91       	pop	r28
     9d0:	1f 91       	pop	r17
     9d2:	0f 91       	pop	r16
     9d4:	08 95       	ret

000009d6 <prvInitialiseNewQueue>:
     9d6:	0f 93       	push	r16
     9d8:	1f 93       	push	r17
     9da:	f8 01       	movw	r30, r16
     9dc:	61 11       	cpse	r22, r1
     9de:	03 c0       	rjmp	.+6      	; 0x9e6 <prvInitialiseNewQueue+0x10>
     9e0:	11 83       	std	Z+1, r17	; 0x01
     9e2:	00 83       	st	Z, r16
     9e4:	02 c0       	rjmp	.+4      	; 0x9ea <prvInitialiseNewQueue+0x14>
     9e6:	51 83       	std	Z+1, r21	; 0x01
     9e8:	40 83       	st	Z, r20
     9ea:	83 8f       	std	Z+27, r24	; 0x1b
     9ec:	64 8f       	std	Z+28, r22	; 0x1c
     9ee:	61 e0       	ldi	r22, 0x01	; 1
     9f0:	cf 01       	movw	r24, r30
     9f2:	0e 94 8b 04 	call	0x916	; 0x916 <xQueueGenericReset>
     9f6:	1f 91       	pop	r17
     9f8:	0f 91       	pop	r16
     9fa:	08 95       	ret

000009fc <xQueueGenericCreate>:
     9fc:	df 92       	push	r13
     9fe:	ef 92       	push	r14
     a00:	ff 92       	push	r15
     a02:	0f 93       	push	r16
     a04:	1f 93       	push	r17
     a06:	cf 93       	push	r28
     a08:	df 93       	push	r29
     a0a:	38 2f       	mov	r19, r24
     a0c:	e6 2f       	mov	r30, r22
     a0e:	88 23       	and	r24, r24
     a10:	29 f1       	breq	.+74     	; 0xa5c <xQueueGenericCreate+0x60>
     a12:	68 2f       	mov	r22, r24
     a14:	70 e0       	ldi	r23, 0x00	; 0
     a16:	8f ef       	ldi	r24, 0xFF	; 255
     a18:	9f ef       	ldi	r25, 0xFF	; 255
     a1a:	0e 94 7d 13 	call	0x26fa	; 0x26fa <__udivmodhi4>
     a1e:	8e 2f       	mov	r24, r30
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	68 17       	cp	r22, r24
     a24:	79 07       	cpc	r23, r25
     a26:	e8 f0       	brcs	.+58     	; 0xa62 <xQueueGenericCreate+0x66>
     a28:	3e 9f       	mul	r19, r30
     a2a:	c0 01       	movw	r24, r0
     a2c:	11 24       	eor	r1, r1
     a2e:	81 3e       	cpi	r24, 0xE1	; 225
     a30:	2f ef       	ldi	r18, 0xFF	; 255
     a32:	92 07       	cpc	r25, r18
     a34:	c8 f4       	brcc	.+50     	; 0xa68 <xQueueGenericCreate+0x6c>
     a36:	d4 2e       	mov	r13, r20
     a38:	de 2f       	mov	r29, r30
     a3a:	c3 2f       	mov	r28, r19
     a3c:	4f 96       	adiw	r24, 0x1f	; 31
     a3e:	0e 94 0a 03 	call	0x614	; 0x614 <pvPortMalloc>
     a42:	7c 01       	movw	r14, r24
     a44:	00 97       	sbiw	r24, 0x00	; 0
     a46:	91 f0       	breq	.+36     	; 0xa6c <xQueueGenericCreate+0x70>
     a48:	8c 01       	movw	r16, r24
     a4a:	2d 2d       	mov	r18, r13
     a4c:	ac 01       	movw	r20, r24
     a4e:	41 5e       	subi	r20, 0xE1	; 225
     a50:	5f 4f       	sbci	r21, 0xFF	; 255
     a52:	6d 2f       	mov	r22, r29
     a54:	8c 2f       	mov	r24, r28
     a56:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <prvInitialiseNewQueue>
     a5a:	08 c0       	rjmp	.+16     	; 0xa6c <xQueueGenericCreate+0x70>
     a5c:	e1 2c       	mov	r14, r1
     a5e:	f1 2c       	mov	r15, r1
     a60:	05 c0       	rjmp	.+10     	; 0xa6c <xQueueGenericCreate+0x70>
     a62:	e1 2c       	mov	r14, r1
     a64:	f1 2c       	mov	r15, r1
     a66:	02 c0       	rjmp	.+4      	; 0xa6c <xQueueGenericCreate+0x70>
     a68:	e1 2c       	mov	r14, r1
     a6a:	f1 2c       	mov	r15, r1
     a6c:	c7 01       	movw	r24, r14
     a6e:	df 91       	pop	r29
     a70:	cf 91       	pop	r28
     a72:	1f 91       	pop	r17
     a74:	0f 91       	pop	r16
     a76:	ff 90       	pop	r15
     a78:	ef 90       	pop	r14
     a7a:	df 90       	pop	r13
     a7c:	08 95       	ret

00000a7e <xQueueGenericSend>:
     a7e:	cf 92       	push	r12
     a80:	df 92       	push	r13
     a82:	ef 92       	push	r14
     a84:	ff 92       	push	r15
     a86:	0f 93       	push	r16
     a88:	1f 93       	push	r17
     a8a:	cf 93       	push	r28
     a8c:	df 93       	push	r29
     a8e:	00 d0       	rcall	.+0      	; 0xa90 <xQueueGenericSend+0x12>
     a90:	00 d0       	rcall	.+0      	; 0xa92 <xQueueGenericSend+0x14>
     a92:	1f 92       	push	r1
     a94:	cd b7       	in	r28, 0x3d	; 61
     a96:	de b7       	in	r29, 0x3e	; 62
     a98:	8c 01       	movw	r16, r24
     a9a:	7b 01       	movw	r14, r22
     a9c:	5d 83       	std	Y+5, r21	; 0x05
     a9e:	4c 83       	std	Y+4, r20	; 0x04
     aa0:	c2 2e       	mov	r12, r18
     aa2:	d1 2c       	mov	r13, r1
     aa4:	0f b6       	in	r0, 0x3f	; 63
     aa6:	f8 94       	cli
     aa8:	0f 92       	push	r0
     aaa:	f8 01       	movw	r30, r16
     aac:	92 8d       	ldd	r25, Z+26	; 0x1a
     aae:	83 8d       	ldd	r24, Z+27	; 0x1b
     ab0:	98 17       	cp	r25, r24
     ab2:	18 f0       	brcs	.+6      	; 0xaba <xQueueGenericSend+0x3c>
     ab4:	f2 e0       	ldi	r31, 0x02	; 2
     ab6:	cf 12       	cpse	r12, r31
     ab8:	19 c0       	rjmp	.+50     	; 0xaec <xQueueGenericSend+0x6e>
     aba:	4c 2d       	mov	r20, r12
     abc:	b7 01       	movw	r22, r14
     abe:	c8 01       	movw	r24, r16
     ac0:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <prvCopyDataToQueue>
     ac4:	f8 01       	movw	r30, r16
     ac6:	91 89       	ldd	r25, Z+17	; 0x11
     ac8:	99 23       	and	r25, r25
     aca:	49 f0       	breq	.+18     	; 0xade <xQueueGenericSend+0x60>
     acc:	c8 01       	movw	r24, r16
     ace:	41 96       	adiw	r24, 0x11	; 17
     ad0:	0e 94 c4 0b 	call	0x1788	; 0x1788 <xTaskRemoveFromEventList>
     ad4:	88 23       	and	r24, r24
     ad6:	31 f0       	breq	.+12     	; 0xae4 <xQueueGenericSend+0x66>
     ad8:	0e 94 e5 01 	call	0x3ca	; 0x3ca <vPortYield>
     adc:	03 c0       	rjmp	.+6      	; 0xae4 <xQueueGenericSend+0x66>
     ade:	81 11       	cpse	r24, r1
     ae0:	0e 94 e5 01 	call	0x3ca	; 0x3ca <vPortYield>
     ae4:	0f 90       	pop	r0
     ae6:	0f be       	out	0x3f, r0	; 63
     ae8:	81 e0       	ldi	r24, 0x01	; 1
     aea:	4d c0       	rjmp	.+154    	; 0xb86 <xQueueGenericSend+0x108>
     aec:	8c 81       	ldd	r24, Y+4	; 0x04
     aee:	9d 81       	ldd	r25, Y+5	; 0x05
     af0:	89 2b       	or	r24, r25
     af2:	21 f4       	brne	.+8      	; 0xafc <xQueueGenericSend+0x7e>
     af4:	0f 90       	pop	r0
     af6:	0f be       	out	0x3f, r0	; 63
     af8:	80 e0       	ldi	r24, 0x00	; 0
     afa:	45 c0       	rjmp	.+138    	; 0xb86 <xQueueGenericSend+0x108>
     afc:	d1 10       	cpse	r13, r1
     afe:	06 c0       	rjmp	.+12     	; 0xb0c <xQueueGenericSend+0x8e>
     b00:	ce 01       	movw	r24, r28
     b02:	01 96       	adiw	r24, 0x01	; 1
     b04:	0e 94 81 0c 	call	0x1902	; 0x1902 <vTaskInternalSetTimeOutState>
     b08:	dd 24       	eor	r13, r13
     b0a:	d3 94       	inc	r13
     b0c:	0f 90       	pop	r0
     b0e:	0f be       	out	0x3f, r0	; 63
     b10:	0e 94 fd 08 	call	0x11fa	; 0x11fa <vTaskSuspendAll>
     b14:	0f b6       	in	r0, 0x3f	; 63
     b16:	f8 94       	cli
     b18:	0f 92       	push	r0
     b1a:	f8 01       	movw	r30, r16
     b1c:	85 8d       	ldd	r24, Z+29	; 0x1d
     b1e:	8f 3f       	cpi	r24, 0xFF	; 255
     b20:	09 f4       	brne	.+2      	; 0xb24 <xQueueGenericSend+0xa6>
     b22:	15 8e       	std	Z+29, r1	; 0x1d
     b24:	f8 01       	movw	r30, r16
     b26:	86 8d       	ldd	r24, Z+30	; 0x1e
     b28:	8f 3f       	cpi	r24, 0xFF	; 255
     b2a:	09 f4       	brne	.+2      	; 0xb2e <xQueueGenericSend+0xb0>
     b2c:	16 8e       	std	Z+30, r1	; 0x1e
     b2e:	0f 90       	pop	r0
     b30:	0f be       	out	0x3f, r0	; 63
     b32:	be 01       	movw	r22, r28
     b34:	6c 5f       	subi	r22, 0xFC	; 252
     b36:	7f 4f       	sbci	r23, 0xFF	; 255
     b38:	ce 01       	movw	r24, r28
     b3a:	01 96       	adiw	r24, 0x01	; 1
     b3c:	0e 94 8c 0c 	call	0x1918	; 0x1918 <xTaskCheckForTimeOut>
     b40:	81 11       	cpse	r24, r1
     b42:	1b c0       	rjmp	.+54     	; 0xb7a <xQueueGenericSend+0xfc>
     b44:	c8 01       	movw	r24, r16
     b46:	0e 94 e6 03 	call	0x7cc	; 0x7cc <prvIsQueueFull>
     b4a:	88 23       	and	r24, r24
     b4c:	81 f0       	breq	.+32     	; 0xb6e <xQueueGenericSend+0xf0>
     b4e:	6c 81       	ldd	r22, Y+4	; 0x04
     b50:	7d 81       	ldd	r23, Y+5	; 0x05
     b52:	c8 01       	movw	r24, r16
     b54:	08 96       	adiw	r24, 0x08	; 8
     b56:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <vTaskPlaceOnEventList>
     b5a:	c8 01       	movw	r24, r16
     b5c:	0e 94 57 04 	call	0x8ae	; 0x8ae <prvUnlockQueue>
     b60:	0e 94 2a 0a 	call	0x1454	; 0x1454 <xTaskResumeAll>
     b64:	81 11       	cpse	r24, r1
     b66:	9e cf       	rjmp	.-196    	; 0xaa4 <xQueueGenericSend+0x26>
     b68:	0e 94 e5 01 	call	0x3ca	; 0x3ca <vPortYield>
     b6c:	9b cf       	rjmp	.-202    	; 0xaa4 <xQueueGenericSend+0x26>
     b6e:	c8 01       	movw	r24, r16
     b70:	0e 94 57 04 	call	0x8ae	; 0x8ae <prvUnlockQueue>
     b74:	0e 94 2a 0a 	call	0x1454	; 0x1454 <xTaskResumeAll>
     b78:	95 cf       	rjmp	.-214    	; 0xaa4 <xQueueGenericSend+0x26>
     b7a:	c8 01       	movw	r24, r16
     b7c:	0e 94 57 04 	call	0x8ae	; 0x8ae <prvUnlockQueue>
     b80:	0e 94 2a 0a 	call	0x1454	; 0x1454 <xTaskResumeAll>
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	0f 90       	pop	r0
     b88:	0f 90       	pop	r0
     b8a:	0f 90       	pop	r0
     b8c:	0f 90       	pop	r0
     b8e:	0f 90       	pop	r0
     b90:	df 91       	pop	r29
     b92:	cf 91       	pop	r28
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	df 90       	pop	r13
     b9e:	cf 90       	pop	r12
     ba0:	08 95       	ret

00000ba2 <xQueueGenericSendFromISR>:
     ba2:	ef 92       	push	r14
     ba4:	ff 92       	push	r15
     ba6:	0f 93       	push	r16
     ba8:	1f 93       	push	r17
     baa:	cf 93       	push	r28
     bac:	df 93       	push	r29
     bae:	8a 01       	movw	r16, r20
     bb0:	fc 01       	movw	r30, r24
     bb2:	52 8d       	ldd	r21, Z+26	; 0x1a
     bb4:	33 8d       	ldd	r19, Z+27	; 0x1b
     bb6:	53 17       	cp	r21, r19
     bb8:	10 f0       	brcs	.+4      	; 0xbbe <xQueueGenericSendFromISR+0x1c>
     bba:	22 30       	cpi	r18, 0x02	; 2
     bbc:	21 f5       	brne	.+72     	; 0xc06 <xQueueGenericSendFromISR+0x64>
     bbe:	42 2f       	mov	r20, r18
     bc0:	78 01       	movw	r14, r16
     bc2:	ec 01       	movw	r28, r24
     bc4:	1e 8d       	ldd	r17, Y+30	; 0x1e
     bc6:	8a 8d       	ldd	r24, Y+26	; 0x1a
     bc8:	ce 01       	movw	r24, r28
     bca:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <prvCopyDataToQueue>
     bce:	1f 3f       	cpi	r17, 0xFF	; 255
     bd0:	81 f4       	brne	.+32     	; 0xbf2 <xQueueGenericSendFromISR+0x50>
     bd2:	89 89       	ldd	r24, Y+17	; 0x11
     bd4:	88 23       	and	r24, r24
     bd6:	c9 f0       	breq	.+50     	; 0xc0a <xQueueGenericSendFromISR+0x68>
     bd8:	ce 01       	movw	r24, r28
     bda:	41 96       	adiw	r24, 0x11	; 17
     bdc:	0e 94 c4 0b 	call	0x1788	; 0x1788 <xTaskRemoveFromEventList>
     be0:	88 23       	and	r24, r24
     be2:	a9 f0       	breq	.+42     	; 0xc0e <xQueueGenericSendFromISR+0x6c>
     be4:	e1 14       	cp	r14, r1
     be6:	f1 04       	cpc	r15, r1
     be8:	a1 f0       	breq	.+40     	; 0xc12 <xQueueGenericSendFromISR+0x70>
     bea:	81 e0       	ldi	r24, 0x01	; 1
     bec:	f7 01       	movw	r30, r14
     bee:	80 83       	st	Z, r24
     bf0:	13 c0       	rjmp	.+38     	; 0xc18 <xQueueGenericSendFromISR+0x76>
     bf2:	0e 94 0d 09 	call	0x121a	; 0x121a <uxTaskGetNumberOfTasks>
     bf6:	18 17       	cp	r17, r24
     bf8:	70 f4       	brcc	.+28     	; 0xc16 <xQueueGenericSendFromISR+0x74>
     bfa:	ff 24       	eor	r15, r15
     bfc:	f3 94       	inc	r15
     bfe:	f1 0e       	add	r15, r17
     c00:	fe 8e       	std	Y+30, r15	; 0x1e
     c02:	81 e0       	ldi	r24, 0x01	; 1
     c04:	09 c0       	rjmp	.+18     	; 0xc18 <xQueueGenericSendFromISR+0x76>
     c06:	80 e0       	ldi	r24, 0x00	; 0
     c08:	07 c0       	rjmp	.+14     	; 0xc18 <xQueueGenericSendFromISR+0x76>
     c0a:	81 e0       	ldi	r24, 0x01	; 1
     c0c:	05 c0       	rjmp	.+10     	; 0xc18 <xQueueGenericSendFromISR+0x76>
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	03 c0       	rjmp	.+6      	; 0xc18 <xQueueGenericSendFromISR+0x76>
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	01 c0       	rjmp	.+2      	; 0xc18 <xQueueGenericSendFromISR+0x76>
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	df 91       	pop	r29
     c1a:	cf 91       	pop	r28
     c1c:	1f 91       	pop	r17
     c1e:	0f 91       	pop	r16
     c20:	ff 90       	pop	r15
     c22:	ef 90       	pop	r14
     c24:	08 95       	ret

00000c26 <xQueueReceive>:
     c26:	cf 92       	push	r12
     c28:	df 92       	push	r13
     c2a:	ef 92       	push	r14
     c2c:	ff 92       	push	r15
     c2e:	0f 93       	push	r16
     c30:	1f 93       	push	r17
     c32:	cf 93       	push	r28
     c34:	df 93       	push	r29
     c36:	00 d0       	rcall	.+0      	; 0xc38 <xQueueReceive+0x12>
     c38:	00 d0       	rcall	.+0      	; 0xc3a <xQueueReceive+0x14>
     c3a:	1f 92       	push	r1
     c3c:	cd b7       	in	r28, 0x3d	; 61
     c3e:	de b7       	in	r29, 0x3e	; 62
     c40:	8c 01       	movw	r16, r24
     c42:	6b 01       	movw	r12, r22
     c44:	5d 83       	std	Y+5, r21	; 0x05
     c46:	4c 83       	std	Y+4, r20	; 0x04
     c48:	e1 2c       	mov	r14, r1
     c4a:	0f b6       	in	r0, 0x3f	; 63
     c4c:	f8 94       	cli
     c4e:	0f 92       	push	r0
     c50:	f8 01       	movw	r30, r16
     c52:	f2 8c       	ldd	r15, Z+26	; 0x1a
     c54:	ff 20       	and	r15, r15
     c56:	a9 f0       	breq	.+42     	; 0xc82 <xQueueReceive+0x5c>
     c58:	b6 01       	movw	r22, r12
     c5a:	c8 01       	movw	r24, r16
     c5c:	0e 94 3d 04 	call	0x87a	; 0x87a <prvCopyDataFromQueue>
     c60:	fa 94       	dec	r15
     c62:	f8 01       	movw	r30, r16
     c64:	f2 8e       	std	Z+26, r15	; 0x1a
     c66:	80 85       	ldd	r24, Z+8	; 0x08
     c68:	88 23       	and	r24, r24
     c6a:	39 f0       	breq	.+14     	; 0xc7a <xQueueReceive+0x54>
     c6c:	c8 01       	movw	r24, r16
     c6e:	08 96       	adiw	r24, 0x08	; 8
     c70:	0e 94 c4 0b 	call	0x1788	; 0x1788 <xTaskRemoveFromEventList>
     c74:	81 11       	cpse	r24, r1
     c76:	0e 94 e5 01 	call	0x3ca	; 0x3ca <vPortYield>
     c7a:	0f 90       	pop	r0
     c7c:	0f be       	out	0x3f, r0	; 63
     c7e:	81 e0       	ldi	r24, 0x01	; 1
     c80:	53 c0       	rjmp	.+166    	; 0xd28 <xQueueReceive+0x102>
     c82:	8c 81       	ldd	r24, Y+4	; 0x04
     c84:	9d 81       	ldd	r25, Y+5	; 0x05
     c86:	89 2b       	or	r24, r25
     c88:	21 f4       	brne	.+8      	; 0xc92 <xQueueReceive+0x6c>
     c8a:	0f 90       	pop	r0
     c8c:	0f be       	out	0x3f, r0	; 63
     c8e:	80 e0       	ldi	r24, 0x00	; 0
     c90:	4b c0       	rjmp	.+150    	; 0xd28 <xQueueReceive+0x102>
     c92:	e1 10       	cpse	r14, r1
     c94:	06 c0       	rjmp	.+12     	; 0xca2 <xQueueReceive+0x7c>
     c96:	ce 01       	movw	r24, r28
     c98:	01 96       	adiw	r24, 0x01	; 1
     c9a:	0e 94 81 0c 	call	0x1902	; 0x1902 <vTaskInternalSetTimeOutState>
     c9e:	ee 24       	eor	r14, r14
     ca0:	e3 94       	inc	r14
     ca2:	0f 90       	pop	r0
     ca4:	0f be       	out	0x3f, r0	; 63
     ca6:	0e 94 fd 08 	call	0x11fa	; 0x11fa <vTaskSuspendAll>
     caa:	0f b6       	in	r0, 0x3f	; 63
     cac:	f8 94       	cli
     cae:	0f 92       	push	r0
     cb0:	f8 01       	movw	r30, r16
     cb2:	85 8d       	ldd	r24, Z+29	; 0x1d
     cb4:	8f 3f       	cpi	r24, 0xFF	; 255
     cb6:	09 f4       	brne	.+2      	; 0xcba <xQueueReceive+0x94>
     cb8:	15 8e       	std	Z+29, r1	; 0x1d
     cba:	f8 01       	movw	r30, r16
     cbc:	86 8d       	ldd	r24, Z+30	; 0x1e
     cbe:	8f 3f       	cpi	r24, 0xFF	; 255
     cc0:	09 f4       	brne	.+2      	; 0xcc4 <xQueueReceive+0x9e>
     cc2:	16 8e       	std	Z+30, r1	; 0x1e
     cc4:	0f 90       	pop	r0
     cc6:	0f be       	out	0x3f, r0	; 63
     cc8:	be 01       	movw	r22, r28
     cca:	6c 5f       	subi	r22, 0xFC	; 252
     ccc:	7f 4f       	sbci	r23, 0xFF	; 255
     cce:	ce 01       	movw	r24, r28
     cd0:	01 96       	adiw	r24, 0x01	; 1
     cd2:	0e 94 8c 0c 	call	0x1918	; 0x1918 <xTaskCheckForTimeOut>
     cd6:	81 11       	cpse	r24, r1
     cd8:	1b c0       	rjmp	.+54     	; 0xd10 <xQueueReceive+0xea>
     cda:	c8 01       	movw	r24, r16
     cdc:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <prvIsQueueEmpty>
     ce0:	88 23       	and	r24, r24
     ce2:	81 f0       	breq	.+32     	; 0xd04 <xQueueReceive+0xde>
     ce4:	6c 81       	ldd	r22, Y+4	; 0x04
     ce6:	7d 81       	ldd	r23, Y+5	; 0x05
     ce8:	c8 01       	movw	r24, r16
     cea:	41 96       	adiw	r24, 0x11	; 17
     cec:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <vTaskPlaceOnEventList>
     cf0:	c8 01       	movw	r24, r16
     cf2:	0e 94 57 04 	call	0x8ae	; 0x8ae <prvUnlockQueue>
     cf6:	0e 94 2a 0a 	call	0x1454	; 0x1454 <xTaskResumeAll>
     cfa:	81 11       	cpse	r24, r1
     cfc:	a6 cf       	rjmp	.-180    	; 0xc4a <xQueueReceive+0x24>
     cfe:	0e 94 e5 01 	call	0x3ca	; 0x3ca <vPortYield>
     d02:	a3 cf       	rjmp	.-186    	; 0xc4a <xQueueReceive+0x24>
     d04:	c8 01       	movw	r24, r16
     d06:	0e 94 57 04 	call	0x8ae	; 0x8ae <prvUnlockQueue>
     d0a:	0e 94 2a 0a 	call	0x1454	; 0x1454 <xTaskResumeAll>
     d0e:	9d cf       	rjmp	.-198    	; 0xc4a <xQueueReceive+0x24>
     d10:	c8 01       	movw	r24, r16
     d12:	0e 94 57 04 	call	0x8ae	; 0x8ae <prvUnlockQueue>
     d16:	0e 94 2a 0a 	call	0x1454	; 0x1454 <xTaskResumeAll>
     d1a:	c8 01       	movw	r24, r16
     d1c:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <prvIsQueueEmpty>
     d20:	88 23       	and	r24, r24
     d22:	09 f4       	brne	.+2      	; 0xd26 <xQueueReceive+0x100>
     d24:	92 cf       	rjmp	.-220    	; 0xc4a <xQueueReceive+0x24>
     d26:	80 e0       	ldi	r24, 0x00	; 0
     d28:	0f 90       	pop	r0
     d2a:	0f 90       	pop	r0
     d2c:	0f 90       	pop	r0
     d2e:	0f 90       	pop	r0
     d30:	0f 90       	pop	r0
     d32:	df 91       	pop	r29
     d34:	cf 91       	pop	r28
     d36:	1f 91       	pop	r17
     d38:	0f 91       	pop	r16
     d3a:	ff 90       	pop	r15
     d3c:	ef 90       	pop	r14
     d3e:	df 90       	pop	r13
     d40:	cf 90       	pop	r12
     d42:	08 95       	ret

00000d44 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
     d44:	cf 93       	push	r28
     d46:	df 93       	push	r29
     d48:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
     d4a:	0f b6       	in	r0, 0x3f	; 63
     d4c:	f8 94       	cli
     d4e:	0f 92       	push	r0
     d50:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d52:	8f 3f       	cpi	r24, 0xFF	; 255
     d54:	09 f4       	brne	.+2      	; 0xd58 <vQueueWaitForMessageRestricted+0x14>
     d56:	1d 8e       	std	Y+29, r1	; 0x1d
     d58:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d5a:	8f 3f       	cpi	r24, 0xFF	; 255
     d5c:	09 f4       	brne	.+2      	; 0xd60 <vQueueWaitForMessageRestricted+0x1c>
     d5e:	1e 8e       	std	Y+30, r1	; 0x1e
     d60:	0f 90       	pop	r0
     d62:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
     d64:	8a 8d       	ldd	r24, Y+26	; 0x1a
     d66:	81 11       	cpse	r24, r1
     d68:	04 c0       	rjmp	.+8      	; 0xd72 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
     d6a:	ce 01       	movw	r24, r28
     d6c:	41 96       	adiw	r24, 0x11	; 17
     d6e:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
     d72:	ce 01       	movw	r24, r28
     d74:	0e 94 57 04 	call	0x8ae	; 0x8ae <prvUnlockQueue>
    }
     d78:	df 91       	pop	r29
     d7a:	cf 91       	pop	r28
     d7c:	08 95       	ret

00000d7e <prvResetNextTaskUnblockTime>:
         * an interrupt and the current TCB will always be the same for any
         * individual execution thread. */
        xReturn = pxCurrentTCB;

        return xReturn;
    }
     d7e:	e0 91 e6 06 	lds	r30, 0x06E6	; 0x8006e6 <pxDelayedTaskList>
     d82:	f0 91 e7 06 	lds	r31, 0x06E7	; 0x8006e7 <pxDelayedTaskList+0x1>
     d86:	80 81       	ld	r24, Z
     d88:	81 11       	cpse	r24, r1
     d8a:	07 c0       	rjmp	.+14     	; 0xd9a <prvResetNextTaskUnblockTime+0x1c>
     d8c:	8f ef       	ldi	r24, 0xFF	; 255
     d8e:	9f ef       	ldi	r25, 0xFF	; 255
     d90:	90 93 c6 06 	sts	0x06C6, r25	; 0x8006c6 <xNextTaskUnblockTime+0x1>
     d94:	80 93 c5 06 	sts	0x06C5, r24	; 0x8006c5 <xNextTaskUnblockTime>
     d98:	08 95       	ret
     d9a:	e0 91 e6 06 	lds	r30, 0x06E6	; 0x8006e6 <pxDelayedTaskList>
     d9e:	f0 91 e7 06 	lds	r31, 0x06E7	; 0x8006e7 <pxDelayedTaskList+0x1>
     da2:	05 80       	ldd	r0, Z+5	; 0x05
     da4:	f6 81       	ldd	r31, Z+6	; 0x06
     da6:	e0 2d       	mov	r30, r0
     da8:	80 81       	ld	r24, Z
     daa:	91 81       	ldd	r25, Z+1	; 0x01
     dac:	90 93 c6 06 	sts	0x06C6, r25	; 0x8006c6 <xNextTaskUnblockTime+0x1>
     db0:	80 93 c5 06 	sts	0x06C5, r24	; 0x8006c5 <xNextTaskUnblockTime>
     db4:	08 95       	ret

00000db6 <prvDeleteTCB>:
     db6:	cf 93       	push	r28
     db8:	df 93       	push	r29
     dba:	ec 01       	movw	r28, r24
     dbc:	8f 89       	ldd	r24, Y+23	; 0x17
     dbe:	98 8d       	ldd	r25, Y+24	; 0x18
     dc0:	0e 94 a5 03 	call	0x74a	; 0x74a <vPortFree>
     dc4:	ce 01       	movw	r24, r28
     dc6:	0e 94 a5 03 	call	0x74a	; 0x74a <vPortFree>
     dca:	df 91       	pop	r29
     dcc:	cf 91       	pop	r28
     dce:	08 95       	ret

00000dd0 <prvInitialiseNewTask>:
     dd0:	6f 92       	push	r6
     dd2:	7f 92       	push	r7
     dd4:	8f 92       	push	r8
     dd6:	9f 92       	push	r9
     dd8:	af 92       	push	r10
     dda:	bf 92       	push	r11
     ddc:	cf 92       	push	r12
     dde:	df 92       	push	r13
     de0:	ef 92       	push	r14
     de2:	0f 93       	push	r16
     de4:	1f 93       	push	r17
     de6:	cf 93       	push	r28
     de8:	df 93       	push	r29
     dea:	cd b7       	in	r28, 0x3d	; 61
     dec:	de b7       	in	r29, 0x3e	; 62
     dee:	4c 01       	movw	r8, r24
     df0:	f5 01       	movw	r30, r10
     df2:	87 89       	ldd	r24, Z+23	; 0x17
     df4:	90 8d       	ldd	r25, Z+24	; 0x18
     df6:	21 50       	subi	r18, 0x01	; 1
     df8:	31 09       	sbc	r19, r1
     dfa:	3c 01       	movw	r6, r24
     dfc:	62 0e       	add	r6, r18
     dfe:	73 1e       	adc	r7, r19
     e00:	61 15       	cp	r22, r1
     e02:	71 05       	cpc	r23, r1
     e04:	89 f4       	brne	.+34     	; 0xe28 <prvInitialiseNewTask+0x58>
     e06:	15 c0       	rjmp	.+42     	; 0xe32 <prvInitialiseNewTask+0x62>
     e08:	82 2f       	mov	r24, r18
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	fb 01       	movw	r30, r22
     e0e:	e8 0f       	add	r30, r24
     e10:	f9 1f       	adc	r31, r25
     e12:	30 81       	ld	r19, Z
     e14:	d5 01       	movw	r26, r10
     e16:	a8 0f       	add	r26, r24
     e18:	b9 1f       	adc	r27, r25
     e1a:	59 96       	adiw	r26, 0x19	; 25
     e1c:	3c 93       	st	X, r19
     e1e:	80 81       	ld	r24, Z
     e20:	88 23       	and	r24, r24
     e22:	29 f0       	breq	.+10     	; 0xe2e <prvInitialiseNewTask+0x5e>
     e24:	2f 5f       	subi	r18, 0xFF	; 255
     e26:	01 c0       	rjmp	.+2      	; 0xe2a <prvInitialiseNewTask+0x5a>
     e28:	20 e0       	ldi	r18, 0x00	; 0
     e2a:	28 30       	cpi	r18, 0x08	; 8
     e2c:	68 f3       	brcs	.-38     	; 0xe08 <prvInitialiseNewTask+0x38>
     e2e:	f5 01       	movw	r30, r10
     e30:	10 a2       	std	Z+32, r1	; 0x20
     e32:	f3 e0       	ldi	r31, 0x03	; 3
     e34:	fe 15       	cp	r31, r14
     e36:	20 f4       	brcc	.+8      	; 0xe40 <prvInitialiseNewTask+0x70>
     e38:	0f 2e       	mov	r0, r31
     e3a:	f3 e0       	ldi	r31, 0x03	; 3
     e3c:	ef 2e       	mov	r14, r31
     e3e:	f0 2d       	mov	r31, r0
     e40:	f5 01       	movw	r30, r10
     e42:	e6 8a       	std	Z+22, r14	; 0x16
     e44:	c5 01       	movw	r24, r10
     e46:	02 96       	adiw	r24, 0x02	; 2
     e48:	0e 94 e5 00 	call	0x1ca	; 0x1ca <vListInitialiseItem>
     e4c:	c5 01       	movw	r24, r10
     e4e:	0c 96       	adiw	r24, 0x0c	; 12
     e50:	0e 94 e5 00 	call	0x1ca	; 0x1ca <vListInitialiseItem>
     e54:	f5 01       	movw	r30, r10
     e56:	b1 86       	std	Z+9, r11	; 0x09
     e58:	a0 86       	std	Z+8, r10	; 0x08
     e5a:	84 e0       	ldi	r24, 0x04	; 4
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	8e 19       	sub	r24, r14
     e60:	91 09       	sbc	r25, r1
     e62:	95 87       	std	Z+13, r25	; 0x0d
     e64:	84 87       	std	Z+12, r24	; 0x0c
     e66:	b3 8a       	std	Z+19, r11	; 0x13
     e68:	a2 8a       	std	Z+18, r10	; 0x12
     e6a:	a8 01       	movw	r20, r16
     e6c:	b4 01       	movw	r22, r8
     e6e:	c3 01       	movw	r24, r6
     e70:	0e 94 4a 01 	call	0x294	; 0x294 <pxPortInitialiseStack>
     e74:	f5 01       	movw	r30, r10
     e76:	91 83       	std	Z+1, r25	; 0x01
     e78:	80 83       	st	Z, r24
     e7a:	c1 14       	cp	r12, r1
     e7c:	d1 04       	cpc	r13, r1
     e7e:	19 f0       	breq	.+6      	; 0xe86 <prvInitialiseNewTask+0xb6>
     e80:	f6 01       	movw	r30, r12
     e82:	b1 82       	std	Z+1, r11	; 0x01
     e84:	a0 82       	st	Z, r10
     e86:	df 91       	pop	r29
     e88:	cf 91       	pop	r28
     e8a:	1f 91       	pop	r17
     e8c:	0f 91       	pop	r16
     e8e:	ef 90       	pop	r14
     e90:	df 90       	pop	r13
     e92:	cf 90       	pop	r12
     e94:	bf 90       	pop	r11
     e96:	af 90       	pop	r10
     e98:	9f 90       	pop	r9
     e9a:	8f 90       	pop	r8
     e9c:	7f 90       	pop	r7
     e9e:	6f 90       	pop	r6
     ea0:	08 95       	ret

00000ea2 <prvInitialiseTaskLists>:
     ea2:	cf 93       	push	r28
     ea4:	c0 e0       	ldi	r28, 0x00	; 0
     ea6:	10 c0       	rjmp	.+32     	; 0xec8 <prvInitialiseTaskLists+0x26>
     ea8:	8c 2f       	mov	r24, r28
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	9c 01       	movw	r18, r24
     eae:	22 0f       	add	r18, r18
     eb0:	33 1f       	adc	r19, r19
     eb2:	22 0f       	add	r18, r18
     eb4:	33 1f       	adc	r19, r19
     eb6:	22 0f       	add	r18, r18
     eb8:	33 1f       	adc	r19, r19
     eba:	82 0f       	add	r24, r18
     ebc:	93 1f       	adc	r25, r19
     ebe:	86 50       	subi	r24, 0x06	; 6
     ec0:	99 4f       	sbci	r25, 0xF9	; 249
     ec2:	0e 94 d7 00 	call	0x1ae	; 0x1ae <vListInitialise>
     ec6:	cf 5f       	subi	r28, 0xFF	; 255
     ec8:	c4 30       	cpi	r28, 0x04	; 4
     eca:	70 f3       	brcs	.-36     	; 0xea8 <prvInitialiseTaskLists+0x6>
     ecc:	81 ef       	ldi	r24, 0xF1	; 241
     ece:	96 e0       	ldi	r25, 0x06	; 6
     ed0:	0e 94 d7 00 	call	0x1ae	; 0x1ae <vListInitialise>
     ed4:	88 ee       	ldi	r24, 0xE8	; 232
     ed6:	96 e0       	ldi	r25, 0x06	; 6
     ed8:	0e 94 d7 00 	call	0x1ae	; 0x1ae <vListInitialise>
     edc:	8b ed       	ldi	r24, 0xDB	; 219
     ede:	96 e0       	ldi	r25, 0x06	; 6
     ee0:	0e 94 d7 00 	call	0x1ae	; 0x1ae <vListInitialise>
     ee4:	82 ed       	ldi	r24, 0xD2	; 210
     ee6:	96 e0       	ldi	r25, 0x06	; 6
     ee8:	0e 94 d7 00 	call	0x1ae	; 0x1ae <vListInitialise>
     eec:	81 ef       	ldi	r24, 0xF1	; 241
     eee:	96 e0       	ldi	r25, 0x06	; 6
     ef0:	90 93 e7 06 	sts	0x06E7, r25	; 0x8006e7 <pxDelayedTaskList+0x1>
     ef4:	80 93 e6 06 	sts	0x06E6, r24	; 0x8006e6 <pxDelayedTaskList>
     ef8:	88 ee       	ldi	r24, 0xE8	; 232
     efa:	96 e0       	ldi	r25, 0x06	; 6
     efc:	90 93 e5 06 	sts	0x06E5, r25	; 0x8006e5 <pxOverflowDelayedTaskList+0x1>
     f00:	80 93 e4 06 	sts	0x06E4, r24	; 0x8006e4 <pxOverflowDelayedTaskList>
     f04:	cf 91       	pop	r28
     f06:	08 95       	ret

00000f08 <prvAddNewTaskToReadyList>:
     f08:	cf 93       	push	r28
     f0a:	df 93       	push	r29
     f0c:	ec 01       	movw	r28, r24
     f0e:	0f b6       	in	r0, 0x3f	; 63
     f10:	f8 94       	cli
     f12:	0f 92       	push	r0
     f14:	80 91 d0 06 	lds	r24, 0x06D0	; 0x8006d0 <uxCurrentNumberOfTasks>
     f18:	8f 5f       	subi	r24, 0xFF	; 255
     f1a:	80 93 d0 06 	sts	0x06D0, r24	; 0x8006d0 <uxCurrentNumberOfTasks>
     f1e:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <pxCurrentTCB>
     f22:	90 91 1f 07 	lds	r25, 0x071F	; 0x80071f <pxCurrentTCB+0x1>
     f26:	89 2b       	or	r24, r25
     f28:	59 f4       	brne	.+22     	; 0xf40 <prvAddNewTaskToReadyList+0x38>
     f2a:	d0 93 1f 07 	sts	0x071F, r29	; 0x80071f <pxCurrentTCB+0x1>
     f2e:	c0 93 1e 07 	sts	0x071E, r28	; 0x80071e <pxCurrentTCB>
     f32:	80 91 d0 06 	lds	r24, 0x06D0	; 0x8006d0 <uxCurrentNumberOfTasks>
     f36:	81 30       	cpi	r24, 0x01	; 1
     f38:	99 f4       	brne	.+38     	; 0xf60 <prvAddNewTaskToReadyList+0x58>
     f3a:	0e 94 51 07 	call	0xea2	; 0xea2 <prvInitialiseTaskLists>
     f3e:	10 c0       	rjmp	.+32     	; 0xf60 <prvAddNewTaskToReadyList+0x58>
     f40:	80 91 cc 06 	lds	r24, 0x06CC	; 0x8006cc <xSchedulerRunning>
     f44:	81 11       	cpse	r24, r1
     f46:	0c c0       	rjmp	.+24     	; 0xf60 <prvAddNewTaskToReadyList+0x58>
     f48:	e0 91 1e 07 	lds	r30, 0x071E	; 0x80071e <pxCurrentTCB>
     f4c:	f0 91 1f 07 	lds	r31, 0x071F	; 0x80071f <pxCurrentTCB+0x1>
     f50:	96 89       	ldd	r25, Z+22	; 0x16
     f52:	8e 89       	ldd	r24, Y+22	; 0x16
     f54:	89 17       	cp	r24, r25
     f56:	20 f0       	brcs	.+8      	; 0xf60 <prvAddNewTaskToReadyList+0x58>
     f58:	d0 93 1f 07 	sts	0x071F, r29	; 0x80071f <pxCurrentTCB+0x1>
     f5c:	c0 93 1e 07 	sts	0x071E, r28	; 0x80071e <pxCurrentTCB>
     f60:	80 91 c7 06 	lds	r24, 0x06C7	; 0x8006c7 <uxTaskNumber>
     f64:	8f 5f       	subi	r24, 0xFF	; 255
     f66:	80 93 c7 06 	sts	0x06C7, r24	; 0x8006c7 <uxTaskNumber>
     f6a:	8e 89       	ldd	r24, Y+22	; 0x16
     f6c:	90 91 cd 06 	lds	r25, 0x06CD	; 0x8006cd <uxTopReadyPriority>
     f70:	98 17       	cp	r25, r24
     f72:	10 f4       	brcc	.+4      	; 0xf78 <prvAddNewTaskToReadyList+0x70>
     f74:	80 93 cd 06 	sts	0x06CD, r24	; 0x8006cd <uxTopReadyPriority>
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	fc 01       	movw	r30, r24
     f7c:	ee 0f       	add	r30, r30
     f7e:	ff 1f       	adc	r31, r31
     f80:	ee 0f       	add	r30, r30
     f82:	ff 1f       	adc	r31, r31
     f84:	ee 0f       	add	r30, r30
     f86:	ff 1f       	adc	r31, r31
     f88:	8e 0f       	add	r24, r30
     f8a:	9f 1f       	adc	r25, r31
     f8c:	fc 01       	movw	r30, r24
     f8e:	e6 50       	subi	r30, 0x06	; 6
     f90:	f9 4f       	sbci	r31, 0xF9	; 249
     f92:	01 80       	ldd	r0, Z+1	; 0x01
     f94:	f2 81       	ldd	r31, Z+2	; 0x02
     f96:	e0 2d       	mov	r30, r0
     f98:	fd 83       	std	Y+5, r31	; 0x05
     f9a:	ec 83       	std	Y+4, r30	; 0x04
     f9c:	84 81       	ldd	r24, Z+4	; 0x04
     f9e:	95 81       	ldd	r25, Z+5	; 0x05
     fa0:	9f 83       	std	Y+7, r25	; 0x07
     fa2:	8e 83       	std	Y+6, r24	; 0x06
     fa4:	a4 81       	ldd	r26, Z+4	; 0x04
     fa6:	b5 81       	ldd	r27, Z+5	; 0x05
     fa8:	ce 01       	movw	r24, r28
     faa:	02 96       	adiw	r24, 0x02	; 2
     fac:	13 96       	adiw	r26, 0x03	; 3
     fae:	9c 93       	st	X, r25
     fb0:	8e 93       	st	-X, r24
     fb2:	12 97       	sbiw	r26, 0x02	; 2
     fb4:	95 83       	std	Z+5, r25	; 0x05
     fb6:	84 83       	std	Z+4, r24	; 0x04
     fb8:	ee 89       	ldd	r30, Y+22	; 0x16
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	cf 01       	movw	r24, r30
     fbe:	88 0f       	add	r24, r24
     fc0:	99 1f       	adc	r25, r25
     fc2:	88 0f       	add	r24, r24
     fc4:	99 1f       	adc	r25, r25
     fc6:	88 0f       	add	r24, r24
     fc8:	99 1f       	adc	r25, r25
     fca:	e8 0f       	add	r30, r24
     fcc:	f9 1f       	adc	r31, r25
     fce:	e6 50       	subi	r30, 0x06	; 6
     fd0:	f9 4f       	sbci	r31, 0xF9	; 249
     fd2:	fb 87       	std	Y+11, r31	; 0x0b
     fd4:	ea 87       	std	Y+10, r30	; 0x0a
     fd6:	80 81       	ld	r24, Z
     fd8:	8f 5f       	subi	r24, 0xFF	; 255
     fda:	80 83       	st	Z, r24
     fdc:	0f 90       	pop	r0
     fde:	0f be       	out	0x3f, r0	; 63
     fe0:	80 91 cc 06 	lds	r24, 0x06CC	; 0x8006cc <xSchedulerRunning>
     fe4:	88 23       	and	r24, r24
     fe6:	51 f0       	breq	.+20     	; 0xffc <prvAddNewTaskToReadyList+0xf4>
     fe8:	e0 91 1e 07 	lds	r30, 0x071E	; 0x80071e <pxCurrentTCB>
     fec:	f0 91 1f 07 	lds	r31, 0x071F	; 0x80071f <pxCurrentTCB+0x1>
     ff0:	96 89       	ldd	r25, Z+22	; 0x16
     ff2:	8e 89       	ldd	r24, Y+22	; 0x16
     ff4:	98 17       	cp	r25, r24
     ff6:	10 f4       	brcc	.+4      	; 0xffc <prvAddNewTaskToReadyList+0xf4>
     ff8:	0e 94 e5 01 	call	0x3ca	; 0x3ca <vPortYield>
     ffc:	df 91       	pop	r29
     ffe:	cf 91       	pop	r28
    1000:	08 95       	ret

00001002 <prvCheckTasksWaitingTermination>:
    1002:	cf 93       	push	r28
    1004:	df 93       	push	r29
    1006:	1c c0       	rjmp	.+56     	; 0x1040 <prvCheckTasksWaitingTermination+0x3e>
    1008:	0f b6       	in	r0, 0x3f	; 63
    100a:	f8 94       	cli
    100c:	0f 92       	push	r0
    100e:	e0 91 d7 06 	lds	r30, 0x06D7	; 0x8006d7 <xTasksWaitingTermination+0x5>
    1012:	f0 91 d8 06 	lds	r31, 0x06D8	; 0x8006d8 <xTasksWaitingTermination+0x6>
    1016:	c6 81       	ldd	r28, Z+6	; 0x06
    1018:	d7 81       	ldd	r29, Z+7	; 0x07
    101a:	ce 01       	movw	r24, r28
    101c:	02 96       	adiw	r24, 0x02	; 2
    101e:	0e 94 1a 01 	call	0x234	; 0x234 <uxListRemove>
    1022:	80 91 d0 06 	lds	r24, 0x06D0	; 0x8006d0 <uxCurrentNumberOfTasks>
    1026:	81 50       	subi	r24, 0x01	; 1
    1028:	80 93 d0 06 	sts	0x06D0, r24	; 0x8006d0 <uxCurrentNumberOfTasks>
    102c:	80 91 d1 06 	lds	r24, 0x06D1	; 0x8006d1 <uxDeletedTasksWaitingCleanUp>
    1030:	81 50       	subi	r24, 0x01	; 1
    1032:	80 93 d1 06 	sts	0x06D1, r24	; 0x8006d1 <uxDeletedTasksWaitingCleanUp>
    1036:	0f 90       	pop	r0
    1038:	0f be       	out	0x3f, r0	; 63
    103a:	ce 01       	movw	r24, r28
    103c:	0e 94 db 06 	call	0xdb6	; 0xdb6 <prvDeleteTCB>
    1040:	80 91 d1 06 	lds	r24, 0x06D1	; 0x8006d1 <uxDeletedTasksWaitingCleanUp>
    1044:	81 11       	cpse	r24, r1
    1046:	e0 cf       	rjmp	.-64     	; 0x1008 <prvCheckTasksWaitingTermination+0x6>
    1048:	df 91       	pop	r29
    104a:	cf 91       	pop	r28
    104c:	08 95       	ret

0000104e <prvIdleTask>:
    104e:	0e 94 01 08 	call	0x1002	; 0x1002 <prvCheckTasksWaitingTermination>
    1052:	80 91 fa 06 	lds	r24, 0x06FA	; 0x8006fa <pxReadyTasksLists>
    1056:	82 30       	cpi	r24, 0x02	; 2
    1058:	d0 f3       	brcs	.-12     	; 0x104e <prvIdleTask>
    105a:	0e 94 e5 01 	call	0x3ca	; 0x3ca <vPortYield>
    105e:	f7 cf       	rjmp	.-18     	; 0x104e <prvIdleTask>

00001060 <prvAddCurrentTaskToDelayedList>:
    1060:	0f 93       	push	r16
    1062:	1f 93       	push	r17
    1064:	cf 93       	push	r28
    1066:	df 93       	push	r29
    1068:	ec 01       	movw	r28, r24
    106a:	00 91 ce 06 	lds	r16, 0x06CE	; 0x8006ce <xTickCount>
    106e:	10 91 cf 06 	lds	r17, 0x06CF	; 0x8006cf <xTickCount+0x1>
    1072:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <pxCurrentTCB>
    1076:	90 91 1f 07 	lds	r25, 0x071F	; 0x80071f <pxCurrentTCB+0x1>
    107a:	02 96       	adiw	r24, 0x02	; 2
    107c:	0e 94 1a 01 	call	0x234	; 0x234 <uxListRemove>
    1080:	c0 0f       	add	r28, r16
    1082:	d1 1f       	adc	r29, r17
    1084:	e0 91 1e 07 	lds	r30, 0x071E	; 0x80071e <pxCurrentTCB>
    1088:	f0 91 1f 07 	lds	r31, 0x071F	; 0x80071f <pxCurrentTCB+0x1>
    108c:	d3 83       	std	Z+3, r29	; 0x03
    108e:	c2 83       	std	Z+2, r28	; 0x02
    1090:	c0 17       	cp	r28, r16
    1092:	d1 07       	cpc	r29, r17
    1094:	68 f4       	brcc	.+26     	; 0x10b0 <prvAddCurrentTaskToDelayedList+0x50>
    1096:	60 91 1e 07 	lds	r22, 0x071E	; 0x80071e <pxCurrentTCB>
    109a:	70 91 1f 07 	lds	r23, 0x071F	; 0x80071f <pxCurrentTCB+0x1>
    109e:	80 91 e4 06 	lds	r24, 0x06E4	; 0x8006e4 <pxOverflowDelayedTaskList>
    10a2:	90 91 e5 06 	lds	r25, 0x06E5	; 0x8006e5 <pxOverflowDelayedTaskList+0x1>
    10a6:	6e 5f       	subi	r22, 0xFE	; 254
    10a8:	7f 4f       	sbci	r23, 0xFF	; 255
    10aa:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <vListInsert>
    10ae:	17 c0       	rjmp	.+46     	; 0x10de <prvAddCurrentTaskToDelayedList+0x7e>
    10b0:	60 91 1e 07 	lds	r22, 0x071E	; 0x80071e <pxCurrentTCB>
    10b4:	70 91 1f 07 	lds	r23, 0x071F	; 0x80071f <pxCurrentTCB+0x1>
    10b8:	80 91 e6 06 	lds	r24, 0x06E6	; 0x8006e6 <pxDelayedTaskList>
    10bc:	90 91 e7 06 	lds	r25, 0x06E7	; 0x8006e7 <pxDelayedTaskList+0x1>
    10c0:	6e 5f       	subi	r22, 0xFE	; 254
    10c2:	7f 4f       	sbci	r23, 0xFF	; 255
    10c4:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <vListInsert>
    10c8:	80 91 c5 06 	lds	r24, 0x06C5	; 0x8006c5 <xNextTaskUnblockTime>
    10cc:	90 91 c6 06 	lds	r25, 0x06C6	; 0x8006c6 <xNextTaskUnblockTime+0x1>
    10d0:	c8 17       	cp	r28, r24
    10d2:	d9 07       	cpc	r29, r25
    10d4:	20 f4       	brcc	.+8      	; 0x10de <prvAddCurrentTaskToDelayedList+0x7e>
    10d6:	d0 93 c6 06 	sts	0x06C6, r29	; 0x8006c6 <xNextTaskUnblockTime+0x1>
    10da:	c0 93 c5 06 	sts	0x06C5, r28	; 0x8006c5 <xNextTaskUnblockTime>
    10de:	df 91       	pop	r29
    10e0:	cf 91       	pop	r28
    10e2:	1f 91       	pop	r17
    10e4:	0f 91       	pop	r16
    10e6:	08 95       	ret

000010e8 <xTaskCreate>:
    10e8:	2f 92       	push	r2
    10ea:	3f 92       	push	r3
    10ec:	4f 92       	push	r4
    10ee:	5f 92       	push	r5
    10f0:	6f 92       	push	r6
    10f2:	7f 92       	push	r7
    10f4:	8f 92       	push	r8
    10f6:	9f 92       	push	r9
    10f8:	af 92       	push	r10
    10fa:	bf 92       	push	r11
    10fc:	cf 92       	push	r12
    10fe:	df 92       	push	r13
    1100:	ef 92       	push	r14
    1102:	ff 92       	push	r15
    1104:	0f 93       	push	r16
    1106:	1f 93       	push	r17
    1108:	cf 93       	push	r28
    110a:	df 93       	push	r29
    110c:	3c 01       	movw	r6, r24
    110e:	1b 01       	movw	r2, r22
    1110:	5a 01       	movw	r10, r20
    1112:	29 01       	movw	r4, r18
    1114:	ca 01       	movw	r24, r20
    1116:	0e 94 0a 03 	call	0x614	; 0x614 <pvPortMalloc>
    111a:	6c 01       	movw	r12, r24
    111c:	89 2b       	or	r24, r25
    111e:	99 f0       	breq	.+38     	; 0x1146 <xTaskCreate+0x5e>
    1120:	86 e2       	ldi	r24, 0x26	; 38
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	0e 94 0a 03 	call	0x614	; 0x614 <pvPortMalloc>
    1128:	ec 01       	movw	r28, r24
    112a:	89 2b       	or	r24, r25
    112c:	41 f0       	breq	.+16     	; 0x113e <xTaskCreate+0x56>
    112e:	86 e2       	ldi	r24, 0x26	; 38
    1130:	fe 01       	movw	r30, r28
    1132:	11 92       	st	Z+, r1
    1134:	8a 95       	dec	r24
    1136:	e9 f7       	brne	.-6      	; 0x1132 <xTaskCreate+0x4a>
    1138:	d8 8e       	std	Y+24, r13	; 0x18
    113a:	cf 8a       	std	Y+23, r12	; 0x17
    113c:	06 c0       	rjmp	.+12     	; 0x114a <xTaskCreate+0x62>
    113e:	c6 01       	movw	r24, r12
    1140:	0e 94 a5 03 	call	0x74a	; 0x74a <vPortFree>
    1144:	02 c0       	rjmp	.+4      	; 0x114a <xTaskCreate+0x62>
    1146:	c0 e0       	ldi	r28, 0x00	; 0
    1148:	d0 e0       	ldi	r29, 0x00	; 0
    114a:	20 97       	sbiw	r28, 0x00	; 0
    114c:	91 f0       	breq	.+36     	; 0x1172 <xTaskCreate+0x8a>
    114e:	95 01       	movw	r18, r10
    1150:	40 e0       	ldi	r20, 0x00	; 0
    1152:	50 e0       	ldi	r21, 0x00	; 0
    1154:	81 2c       	mov	r8, r1
    1156:	91 2c       	mov	r9, r1
    1158:	5e 01       	movw	r10, r28
    115a:	67 01       	movw	r12, r14
    115c:	e0 2e       	mov	r14, r16
    115e:	82 01       	movw	r16, r4
    1160:	b1 01       	movw	r22, r2
    1162:	c3 01       	movw	r24, r6
    1164:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <prvInitialiseNewTask>
    1168:	ce 01       	movw	r24, r28
    116a:	0e 94 84 07 	call	0xf08	; 0xf08 <prvAddNewTaskToReadyList>
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	01 c0       	rjmp	.+2      	; 0x1174 <xTaskCreate+0x8c>
    1172:	8f ef       	ldi	r24, 0xFF	; 255
    1174:	df 91       	pop	r29
    1176:	cf 91       	pop	r28
    1178:	1f 91       	pop	r17
    117a:	0f 91       	pop	r16
    117c:	ff 90       	pop	r15
    117e:	ef 90       	pop	r14
    1180:	df 90       	pop	r13
    1182:	cf 90       	pop	r12
    1184:	bf 90       	pop	r11
    1186:	af 90       	pop	r10
    1188:	9f 90       	pop	r9
    118a:	8f 90       	pop	r8
    118c:	7f 90       	pop	r7
    118e:	6f 90       	pop	r6
    1190:	5f 90       	pop	r5
    1192:	4f 90       	pop	r4
    1194:	3f 90       	pop	r3
    1196:	2f 90       	pop	r2
    1198:	08 95       	ret

0000119a <vTaskStartScheduler>:
    119a:	ef 92       	push	r14
    119c:	ff 92       	push	r15
    119e:	0f 93       	push	r16
    11a0:	0f 2e       	mov	r0, r31
    11a2:	f3 ec       	ldi	r31, 0xC3	; 195
    11a4:	ef 2e       	mov	r14, r31
    11a6:	f6 e0       	ldi	r31, 0x06	; 6
    11a8:	ff 2e       	mov	r15, r31
    11aa:	f0 2d       	mov	r31, r0
    11ac:	00 e0       	ldi	r16, 0x00	; 0
    11ae:	20 e0       	ldi	r18, 0x00	; 0
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	45 e5       	ldi	r20, 0x55	; 85
    11b4:	50 e0       	ldi	r21, 0x00	; 0
    11b6:	65 ec       	ldi	r22, 0xC5	; 197
    11b8:	70 e0       	ldi	r23, 0x00	; 0
    11ba:	87 e2       	ldi	r24, 0x27	; 39
    11bc:	98 e0       	ldi	r25, 0x08	; 8
    11be:	0e 94 74 08 	call	0x10e8	; 0x10e8 <xTaskCreate>
    11c2:	81 30       	cpi	r24, 0x01	; 1
    11c4:	11 f4       	brne	.+4      	; 0x11ca <vTaskStartScheduler+0x30>
    11c6:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <xTimerCreateTimerTask>
    11ca:	81 30       	cpi	r24, 0x01	; 1
    11cc:	81 f4       	brne	.+32     	; 0x11ee <vTaskStartScheduler+0x54>
    11ce:	f8 94       	cli
    11d0:	8f ef       	ldi	r24, 0xFF	; 255
    11d2:	9f ef       	ldi	r25, 0xFF	; 255
    11d4:	90 93 c6 06 	sts	0x06C6, r25	; 0x8006c6 <xNextTaskUnblockTime+0x1>
    11d8:	80 93 c5 06 	sts	0x06C5, r24	; 0x8006c5 <xNextTaskUnblockTime>
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	80 93 cc 06 	sts	0x06CC, r24	; 0x8006cc <xSchedulerRunning>
    11e2:	10 92 cf 06 	sts	0x06CF, r1	; 0x8006cf <xTickCount+0x1>
    11e6:	10 92 ce 06 	sts	0x06CE, r1	; 0x8006ce <xTickCount>
    11ea:	0e 94 b6 01 	call	0x36c	; 0x36c <xPortStartScheduler>
    11ee:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <uxTopUsedPriority>
    11f2:	0f 91       	pop	r16
    11f4:	ff 90       	pop	r15
    11f6:	ef 90       	pop	r14
    11f8:	08 95       	ret

000011fa <vTaskSuspendAll>:
    11fa:	80 91 c2 06 	lds	r24, 0x06C2	; 0x8006c2 <uxSchedulerSuspended>
    11fe:	8f 5f       	subi	r24, 0xFF	; 255
    1200:	80 93 c2 06 	sts	0x06C2, r24	; 0x8006c2 <uxSchedulerSuspended>
    1204:	08 95       	ret

00001206 <xTaskGetTickCount>:
    1206:	0f b6       	in	r0, 0x3f	; 63
    1208:	f8 94       	cli
    120a:	0f 92       	push	r0
    120c:	80 91 ce 06 	lds	r24, 0x06CE	; 0x8006ce <xTickCount>
    1210:	90 91 cf 06 	lds	r25, 0x06CF	; 0x8006cf <xTickCount+0x1>
    1214:	0f 90       	pop	r0
    1216:	0f be       	out	0x3f, r0	; 63
    1218:	08 95       	ret

0000121a <uxTaskGetNumberOfTasks>:
    121a:	80 91 d0 06 	lds	r24, 0x06D0	; 0x8006d0 <uxCurrentNumberOfTasks>
    121e:	08 95       	ret

00001220 <xTaskIncrementTick>:
    1220:	0f 93       	push	r16
    1222:	1f 93       	push	r17
    1224:	cf 93       	push	r28
    1226:	df 93       	push	r29
    1228:	80 91 c2 06 	lds	r24, 0x06C2	; 0x8006c2 <uxSchedulerSuspended>
    122c:	81 11       	cpse	r24, r1
    122e:	01 c1       	rjmp	.+514    	; 0x1432 <xTaskIncrementTick+0x212>
    1230:	c0 91 ce 06 	lds	r28, 0x06CE	; 0x8006ce <xTickCount>
    1234:	d0 91 cf 06 	lds	r29, 0x06CF	; 0x8006cf <xTickCount+0x1>
    1238:	8e 01       	movw	r16, r28
    123a:	0f 5f       	subi	r16, 0xFF	; 255
    123c:	1f 4f       	sbci	r17, 0xFF	; 255
    123e:	10 93 cf 06 	sts	0x06CF, r17	; 0x8006cf <xTickCount+0x1>
    1242:	00 93 ce 06 	sts	0x06CE, r16	; 0x8006ce <xTickCount>
    1246:	01 15       	cp	r16, r1
    1248:	11 05       	cpc	r17, r1
    124a:	b9 f4       	brne	.+46     	; 0x127a <xTaskIncrementTick+0x5a>
    124c:	80 91 e6 06 	lds	r24, 0x06E6	; 0x8006e6 <pxDelayedTaskList>
    1250:	90 91 e7 06 	lds	r25, 0x06E7	; 0x8006e7 <pxDelayedTaskList+0x1>
    1254:	20 91 e4 06 	lds	r18, 0x06E4	; 0x8006e4 <pxOverflowDelayedTaskList>
    1258:	30 91 e5 06 	lds	r19, 0x06E5	; 0x8006e5 <pxOverflowDelayedTaskList+0x1>
    125c:	30 93 e7 06 	sts	0x06E7, r19	; 0x8006e7 <pxDelayedTaskList+0x1>
    1260:	20 93 e6 06 	sts	0x06E6, r18	; 0x8006e6 <pxDelayedTaskList>
    1264:	90 93 e5 06 	sts	0x06E5, r25	; 0x8006e5 <pxOverflowDelayedTaskList+0x1>
    1268:	80 93 e4 06 	sts	0x06E4, r24	; 0x8006e4 <pxOverflowDelayedTaskList>
    126c:	80 91 c8 06 	lds	r24, 0x06C8	; 0x8006c8 <xNumOfOverflows>
    1270:	8f 5f       	subi	r24, 0xFF	; 255
    1272:	80 93 c8 06 	sts	0x06C8, r24	; 0x8006c8 <xNumOfOverflows>
    1276:	0e 94 bf 06 	call	0xd7e	; 0xd7e <prvResetNextTaskUnblockTime>
    127a:	80 91 c5 06 	lds	r24, 0x06C5	; 0x8006c5 <xNextTaskUnblockTime>
    127e:	90 91 c6 06 	lds	r25, 0x06C6	; 0x8006c6 <xNextTaskUnblockTime+0x1>
    1282:	08 17       	cp	r16, r24
    1284:	19 07       	cpc	r17, r25
    1286:	20 f4       	brcc	.+8      	; 0x1290 <xTaskIncrementTick+0x70>
    1288:	80 e0       	ldi	r24, 0x00	; 0
    128a:	b8 c0       	rjmp	.+368    	; 0x13fc <xTaskIncrementTick+0x1dc>
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	01 c0       	rjmp	.+2      	; 0x1292 <xTaskIncrementTick+0x72>
    1290:	80 e0       	ldi	r24, 0x00	; 0
    1292:	e0 91 e6 06 	lds	r30, 0x06E6	; 0x8006e6 <pxDelayedTaskList>
    1296:	f0 91 e7 06 	lds	r31, 0x06E7	; 0x8006e7 <pxDelayedTaskList+0x1>
    129a:	90 81       	ld	r25, Z
    129c:	91 11       	cpse	r25, r1
    129e:	07 c0       	rjmp	.+14     	; 0x12ae <xTaskIncrementTick+0x8e>
    12a0:	2f ef       	ldi	r18, 0xFF	; 255
    12a2:	3f ef       	ldi	r19, 0xFF	; 255
    12a4:	30 93 c6 06 	sts	0x06C6, r19	; 0x8006c6 <xNextTaskUnblockTime+0x1>
    12a8:	20 93 c5 06 	sts	0x06C5, r18	; 0x8006c5 <xNextTaskUnblockTime>
    12ac:	a7 c0       	rjmp	.+334    	; 0x13fc <xTaskIncrementTick+0x1dc>
    12ae:	e0 91 e6 06 	lds	r30, 0x06E6	; 0x8006e6 <pxDelayedTaskList>
    12b2:	f0 91 e7 06 	lds	r31, 0x06E7	; 0x8006e7 <pxDelayedTaskList+0x1>
    12b6:	05 80       	ldd	r0, Z+5	; 0x05
    12b8:	f6 81       	ldd	r31, Z+6	; 0x06
    12ba:	e0 2d       	mov	r30, r0
    12bc:	06 80       	ldd	r0, Z+6	; 0x06
    12be:	f7 81       	ldd	r31, Z+7	; 0x07
    12c0:	e0 2d       	mov	r30, r0
    12c2:	22 81       	ldd	r18, Z+2	; 0x02
    12c4:	33 81       	ldd	r19, Z+3	; 0x03
    12c6:	02 17       	cp	r16, r18
    12c8:	13 07       	cpc	r17, r19
    12ca:	28 f4       	brcc	.+10     	; 0x12d6 <xTaskIncrementTick+0xb6>
    12cc:	30 93 c6 06 	sts	0x06C6, r19	; 0x8006c6 <xNextTaskUnblockTime+0x1>
    12d0:	20 93 c5 06 	sts	0x06C5, r18	; 0x8006c5 <xNextTaskUnblockTime>
    12d4:	93 c0       	rjmp	.+294    	; 0x13fc <xTaskIncrementTick+0x1dc>
    12d6:	a2 85       	ldd	r26, Z+10	; 0x0a
    12d8:	b3 85       	ldd	r27, Z+11	; 0x0b
    12da:	24 81       	ldd	r18, Z+4	; 0x04
    12dc:	35 81       	ldd	r19, Z+5	; 0x05
    12de:	46 81       	ldd	r20, Z+6	; 0x06
    12e0:	57 81       	ldd	r21, Z+7	; 0x07
    12e2:	e9 01       	movw	r28, r18
    12e4:	5d 83       	std	Y+5, r21	; 0x05
    12e6:	4c 83       	std	Y+4, r20	; 0x04
    12e8:	26 81       	ldd	r18, Z+6	; 0x06
    12ea:	37 81       	ldd	r19, Z+7	; 0x07
    12ec:	44 81       	ldd	r20, Z+4	; 0x04
    12ee:	55 81       	ldd	r21, Z+5	; 0x05
    12f0:	e9 01       	movw	r28, r18
    12f2:	5b 83       	std	Y+3, r21	; 0x03
    12f4:	4a 83       	std	Y+2, r20	; 0x02
    12f6:	11 96       	adiw	r26, 0x01	; 1
    12f8:	2d 91       	ld	r18, X+
    12fa:	3c 91       	ld	r19, X
    12fc:	12 97       	sbiw	r26, 0x02	; 2
    12fe:	af 01       	movw	r20, r30
    1300:	4e 5f       	subi	r20, 0xFE	; 254
    1302:	5f 4f       	sbci	r21, 0xFF	; 255
    1304:	24 17       	cp	r18, r20
    1306:	35 07       	cpc	r19, r21
    1308:	31 f4       	brne	.+12     	; 0x1316 <xTaskIncrementTick+0xf6>
    130a:	26 81       	ldd	r18, Z+6	; 0x06
    130c:	37 81       	ldd	r19, Z+7	; 0x07
    130e:	12 96       	adiw	r26, 0x02	; 2
    1310:	3c 93       	st	X, r19
    1312:	2e 93       	st	-X, r18
    1314:	11 97       	sbiw	r26, 0x01	; 1
    1316:	13 86       	std	Z+11, r1	; 0x0b
    1318:	12 86       	std	Z+10, r1	; 0x0a
    131a:	9c 91       	ld	r25, X
    131c:	91 50       	subi	r25, 0x01	; 1
    131e:	9c 93       	st	X, r25
    1320:	a4 89       	ldd	r26, Z+20	; 0x14
    1322:	b5 89       	ldd	r27, Z+21	; 0x15
    1324:	10 97       	sbiw	r26, 0x00	; 0
    1326:	19 f1       	breq	.+70     	; 0x136e <xTaskIncrementTick+0x14e>
    1328:	26 85       	ldd	r18, Z+14	; 0x0e
    132a:	37 85       	ldd	r19, Z+15	; 0x0f
    132c:	60 89       	ldd	r22, Z+16	; 0x10
    132e:	71 89       	ldd	r23, Z+17	; 0x11
    1330:	e9 01       	movw	r28, r18
    1332:	7d 83       	std	Y+5, r23	; 0x05
    1334:	6c 83       	std	Y+4, r22	; 0x04
    1336:	20 89       	ldd	r18, Z+16	; 0x10
    1338:	31 89       	ldd	r19, Z+17	; 0x11
    133a:	66 85       	ldd	r22, Z+14	; 0x0e
    133c:	77 85       	ldd	r23, Z+15	; 0x0f
    133e:	e9 01       	movw	r28, r18
    1340:	7b 83       	std	Y+3, r23	; 0x03
    1342:	6a 83       	std	Y+2, r22	; 0x02
    1344:	11 96       	adiw	r26, 0x01	; 1
    1346:	6d 91       	ld	r22, X+
    1348:	7c 91       	ld	r23, X
    134a:	12 97       	sbiw	r26, 0x02	; 2
    134c:	9f 01       	movw	r18, r30
    134e:	24 5f       	subi	r18, 0xF4	; 244
    1350:	3f 4f       	sbci	r19, 0xFF	; 255
    1352:	62 17       	cp	r22, r18
    1354:	73 07       	cpc	r23, r19
    1356:	31 f4       	brne	.+12     	; 0x1364 <xTaskIncrementTick+0x144>
    1358:	20 89       	ldd	r18, Z+16	; 0x10
    135a:	31 89       	ldd	r19, Z+17	; 0x11
    135c:	12 96       	adiw	r26, 0x02	; 2
    135e:	3c 93       	st	X, r19
    1360:	2e 93       	st	-X, r18
    1362:	11 97       	sbiw	r26, 0x01	; 1
    1364:	15 8a       	std	Z+21, r1	; 0x15
    1366:	14 8a       	std	Z+20, r1	; 0x14
    1368:	9c 91       	ld	r25, X
    136a:	91 50       	subi	r25, 0x01	; 1
    136c:	9c 93       	st	X, r25
    136e:	26 89       	ldd	r18, Z+22	; 0x16
    1370:	90 91 cd 06 	lds	r25, 0x06CD	; 0x8006cd <uxTopReadyPriority>
    1374:	92 17       	cp	r25, r18
    1376:	10 f4       	brcc	.+4      	; 0x137c <xTaskIncrementTick+0x15c>
    1378:	20 93 cd 06 	sts	0x06CD, r18	; 0x8006cd <uxTopReadyPriority>
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	d9 01       	movw	r26, r18
    1380:	aa 0f       	add	r26, r26
    1382:	bb 1f       	adc	r27, r27
    1384:	aa 0f       	add	r26, r26
    1386:	bb 1f       	adc	r27, r27
    1388:	aa 0f       	add	r26, r26
    138a:	bb 1f       	adc	r27, r27
    138c:	2a 0f       	add	r18, r26
    138e:	3b 1f       	adc	r19, r27
    1390:	d9 01       	movw	r26, r18
    1392:	a6 50       	subi	r26, 0x06	; 6
    1394:	b9 4f       	sbci	r27, 0xF9	; 249
    1396:	11 96       	adiw	r26, 0x01	; 1
    1398:	0d 90       	ld	r0, X+
    139a:	bc 91       	ld	r27, X
    139c:	a0 2d       	mov	r26, r0
    139e:	b5 83       	std	Z+5, r27	; 0x05
    13a0:	a4 83       	std	Z+4, r26	; 0x04
    13a2:	14 96       	adiw	r26, 0x04	; 4
    13a4:	2d 91       	ld	r18, X+
    13a6:	3c 91       	ld	r19, X
    13a8:	15 97       	sbiw	r26, 0x05	; 5
    13aa:	37 83       	std	Z+7, r19	; 0x07
    13ac:	26 83       	std	Z+6, r18	; 0x06
    13ae:	14 96       	adiw	r26, 0x04	; 4
    13b0:	2d 91       	ld	r18, X+
    13b2:	3c 91       	ld	r19, X
    13b4:	15 97       	sbiw	r26, 0x05	; 5
    13b6:	e9 01       	movw	r28, r18
    13b8:	5b 83       	std	Y+3, r21	; 0x03
    13ba:	4a 83       	std	Y+2, r20	; 0x02
    13bc:	15 96       	adiw	r26, 0x05	; 5
    13be:	5c 93       	st	X, r21
    13c0:	4e 93       	st	-X, r20
    13c2:	14 97       	sbiw	r26, 0x04	; 4
    13c4:	a6 89       	ldd	r26, Z+22	; 0x16
    13c6:	b0 e0       	ldi	r27, 0x00	; 0
    13c8:	9d 01       	movw	r18, r26
    13ca:	22 0f       	add	r18, r18
    13cc:	33 1f       	adc	r19, r19
    13ce:	22 0f       	add	r18, r18
    13d0:	33 1f       	adc	r19, r19
    13d2:	22 0f       	add	r18, r18
    13d4:	33 1f       	adc	r19, r19
    13d6:	a2 0f       	add	r26, r18
    13d8:	b3 1f       	adc	r27, r19
    13da:	a6 50       	subi	r26, 0x06	; 6
    13dc:	b9 4f       	sbci	r27, 0xF9	; 249
    13de:	b3 87       	std	Z+11, r27	; 0x0b
    13e0:	a2 87       	std	Z+10, r26	; 0x0a
    13e2:	9c 91       	ld	r25, X
    13e4:	9f 5f       	subi	r25, 0xFF	; 255
    13e6:	9c 93       	st	X, r25
    13e8:	26 89       	ldd	r18, Z+22	; 0x16
    13ea:	e0 91 1e 07 	lds	r30, 0x071E	; 0x80071e <pxCurrentTCB>
    13ee:	f0 91 1f 07 	lds	r31, 0x071F	; 0x80071f <pxCurrentTCB+0x1>
    13f2:	96 89       	ldd	r25, Z+22	; 0x16
    13f4:	92 17       	cp	r25, r18
    13f6:	08 f4       	brcc	.+2      	; 0x13fa <xTaskIncrementTick+0x1da>
    13f8:	49 cf       	rjmp	.-366    	; 0x128c <xTaskIncrementTick+0x6c>
    13fa:	4b cf       	rjmp	.-362    	; 0x1292 <xTaskIncrementTick+0x72>
    13fc:	e0 91 1e 07 	lds	r30, 0x071E	; 0x80071e <pxCurrentTCB>
    1400:	f0 91 1f 07 	lds	r31, 0x071F	; 0x80071f <pxCurrentTCB+0x1>
    1404:	26 89       	ldd	r18, Z+22	; 0x16
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	f9 01       	movw	r30, r18
    140a:	ee 0f       	add	r30, r30
    140c:	ff 1f       	adc	r31, r31
    140e:	ee 0f       	add	r30, r30
    1410:	ff 1f       	adc	r31, r31
    1412:	ee 0f       	add	r30, r30
    1414:	ff 1f       	adc	r31, r31
    1416:	2e 0f       	add	r18, r30
    1418:	3f 1f       	adc	r19, r31
    141a:	f9 01       	movw	r30, r18
    141c:	e6 50       	subi	r30, 0x06	; 6
    141e:	f9 4f       	sbci	r31, 0xF9	; 249
    1420:	90 81       	ld	r25, Z
    1422:	92 30       	cpi	r25, 0x02	; 2
    1424:	08 f0       	brcs	.+2      	; 0x1428 <xTaskIncrementTick+0x208>
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	90 91 c9 06 	lds	r25, 0x06C9	; 0x8006c9 <xYieldPending>
    142c:	91 11       	cpse	r25, r1
    142e:	0c c0       	rjmp	.+24     	; 0x1448 <xTaskIncrementTick+0x228>
    1430:	0c c0       	rjmp	.+24     	; 0x144a <xTaskIncrementTick+0x22a>
    1432:	80 91 ca 06 	lds	r24, 0x06CA	; 0x8006ca <xPendedTicks>
    1436:	90 91 cb 06 	lds	r25, 0x06CB	; 0x8006cb <xPendedTicks+0x1>
    143a:	01 96       	adiw	r24, 0x01	; 1
    143c:	90 93 cb 06 	sts	0x06CB, r25	; 0x8006cb <xPendedTicks+0x1>
    1440:	80 93 ca 06 	sts	0x06CA, r24	; 0x8006ca <xPendedTicks>
    1444:	80 e0       	ldi	r24, 0x00	; 0
    1446:	01 c0       	rjmp	.+2      	; 0x144a <xTaskIncrementTick+0x22a>
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	df 91       	pop	r29
    144c:	cf 91       	pop	r28
    144e:	1f 91       	pop	r17
    1450:	0f 91       	pop	r16
    1452:	08 95       	ret

00001454 <xTaskResumeAll>:
    1454:	cf 93       	push	r28
    1456:	df 93       	push	r29
    1458:	0f b6       	in	r0, 0x3f	; 63
    145a:	f8 94       	cli
    145c:	0f 92       	push	r0
    145e:	80 91 c2 06 	lds	r24, 0x06C2	; 0x8006c2 <uxSchedulerSuspended>
    1462:	81 50       	subi	r24, 0x01	; 1
    1464:	80 93 c2 06 	sts	0x06C2, r24	; 0x8006c2 <uxSchedulerSuspended>
    1468:	80 91 c2 06 	lds	r24, 0x06C2	; 0x8006c2 <uxSchedulerSuspended>
    146c:	81 11       	cpse	r24, r1
    146e:	bf c0       	rjmp	.+382    	; 0x15ee <xTaskResumeAll+0x19a>
    1470:	80 91 d0 06 	lds	r24, 0x06D0	; 0x8006d0 <uxCurrentNumberOfTasks>
    1474:	81 11       	cpse	r24, r1
    1476:	96 c0       	rjmp	.+300    	; 0x15a4 <xTaskResumeAll+0x150>
    1478:	bd c0       	rjmp	.+378    	; 0x15f4 <xTaskResumeAll+0x1a0>
    147a:	e0 91 e0 06 	lds	r30, 0x06E0	; 0x8006e0 <xPendingReadyList+0x5>
    147e:	f0 91 e1 06 	lds	r31, 0x06E1	; 0x8006e1 <xPendingReadyList+0x6>
    1482:	06 80       	ldd	r0, Z+6	; 0x06
    1484:	f7 81       	ldd	r31, Z+7	; 0x07
    1486:	e0 2d       	mov	r30, r0
    1488:	a4 89       	ldd	r26, Z+20	; 0x14
    148a:	b5 89       	ldd	r27, Z+21	; 0x15
    148c:	c6 85       	ldd	r28, Z+14	; 0x0e
    148e:	d7 85       	ldd	r29, Z+15	; 0x0f
    1490:	80 89       	ldd	r24, Z+16	; 0x10
    1492:	91 89       	ldd	r25, Z+17	; 0x11
    1494:	9d 83       	std	Y+5, r25	; 0x05
    1496:	8c 83       	std	Y+4, r24	; 0x04
    1498:	c0 89       	ldd	r28, Z+16	; 0x10
    149a:	d1 89       	ldd	r29, Z+17	; 0x11
    149c:	86 85       	ldd	r24, Z+14	; 0x0e
    149e:	97 85       	ldd	r25, Z+15	; 0x0f
    14a0:	9b 83       	std	Y+3, r25	; 0x03
    14a2:	8a 83       	std	Y+2, r24	; 0x02
    14a4:	11 96       	adiw	r26, 0x01	; 1
    14a6:	2d 91       	ld	r18, X+
    14a8:	3c 91       	ld	r19, X
    14aa:	12 97       	sbiw	r26, 0x02	; 2
    14ac:	cf 01       	movw	r24, r30
    14ae:	0c 96       	adiw	r24, 0x0c	; 12
    14b0:	28 17       	cp	r18, r24
    14b2:	39 07       	cpc	r19, r25
    14b4:	31 f4       	brne	.+12     	; 0x14c2 <xTaskResumeAll+0x6e>
    14b6:	80 89       	ldd	r24, Z+16	; 0x10
    14b8:	91 89       	ldd	r25, Z+17	; 0x11
    14ba:	12 96       	adiw	r26, 0x02	; 2
    14bc:	9c 93       	st	X, r25
    14be:	8e 93       	st	-X, r24
    14c0:	11 97       	sbiw	r26, 0x01	; 1
    14c2:	15 8a       	std	Z+21, r1	; 0x15
    14c4:	14 8a       	std	Z+20, r1	; 0x14
    14c6:	8c 91       	ld	r24, X
    14c8:	81 50       	subi	r24, 0x01	; 1
    14ca:	8c 93       	st	X, r24
    14cc:	a2 85       	ldd	r26, Z+10	; 0x0a
    14ce:	b3 85       	ldd	r27, Z+11	; 0x0b
    14d0:	c4 81       	ldd	r28, Z+4	; 0x04
    14d2:	d5 81       	ldd	r29, Z+5	; 0x05
    14d4:	86 81       	ldd	r24, Z+6	; 0x06
    14d6:	97 81       	ldd	r25, Z+7	; 0x07
    14d8:	9d 83       	std	Y+5, r25	; 0x05
    14da:	8c 83       	std	Y+4, r24	; 0x04
    14dc:	c6 81       	ldd	r28, Z+6	; 0x06
    14de:	d7 81       	ldd	r29, Z+7	; 0x07
    14e0:	84 81       	ldd	r24, Z+4	; 0x04
    14e2:	95 81       	ldd	r25, Z+5	; 0x05
    14e4:	9b 83       	std	Y+3, r25	; 0x03
    14e6:	8a 83       	std	Y+2, r24	; 0x02
    14e8:	11 96       	adiw	r26, 0x01	; 1
    14ea:	8d 91       	ld	r24, X+
    14ec:	9c 91       	ld	r25, X
    14ee:	12 97       	sbiw	r26, 0x02	; 2
    14f0:	9f 01       	movw	r18, r30
    14f2:	2e 5f       	subi	r18, 0xFE	; 254
    14f4:	3f 4f       	sbci	r19, 0xFF	; 255
    14f6:	82 17       	cp	r24, r18
    14f8:	93 07       	cpc	r25, r19
    14fa:	31 f4       	brne	.+12     	; 0x1508 <xTaskResumeAll+0xb4>
    14fc:	86 81       	ldd	r24, Z+6	; 0x06
    14fe:	97 81       	ldd	r25, Z+7	; 0x07
    1500:	12 96       	adiw	r26, 0x02	; 2
    1502:	9c 93       	st	X, r25
    1504:	8e 93       	st	-X, r24
    1506:	11 97       	sbiw	r26, 0x01	; 1
    1508:	13 86       	std	Z+11, r1	; 0x0b
    150a:	12 86       	std	Z+10, r1	; 0x0a
    150c:	8c 91       	ld	r24, X
    150e:	81 50       	subi	r24, 0x01	; 1
    1510:	8c 93       	st	X, r24
    1512:	86 89       	ldd	r24, Z+22	; 0x16
    1514:	90 91 cd 06 	lds	r25, 0x06CD	; 0x8006cd <uxTopReadyPriority>
    1518:	98 17       	cp	r25, r24
    151a:	10 f4       	brcc	.+4      	; 0x1520 <xTaskResumeAll+0xcc>
    151c:	80 93 cd 06 	sts	0x06CD, r24	; 0x8006cd <uxTopReadyPriority>
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	dc 01       	movw	r26, r24
    1524:	aa 0f       	add	r26, r26
    1526:	bb 1f       	adc	r27, r27
    1528:	aa 0f       	add	r26, r26
    152a:	bb 1f       	adc	r27, r27
    152c:	aa 0f       	add	r26, r26
    152e:	bb 1f       	adc	r27, r27
    1530:	8a 0f       	add	r24, r26
    1532:	9b 1f       	adc	r25, r27
    1534:	dc 01       	movw	r26, r24
    1536:	a6 50       	subi	r26, 0x06	; 6
    1538:	b9 4f       	sbci	r27, 0xF9	; 249
    153a:	11 96       	adiw	r26, 0x01	; 1
    153c:	0d 90       	ld	r0, X+
    153e:	bc 91       	ld	r27, X
    1540:	a0 2d       	mov	r26, r0
    1542:	b5 83       	std	Z+5, r27	; 0x05
    1544:	a4 83       	std	Z+4, r26	; 0x04
    1546:	14 96       	adiw	r26, 0x04	; 4
    1548:	8d 91       	ld	r24, X+
    154a:	9c 91       	ld	r25, X
    154c:	15 97       	sbiw	r26, 0x05	; 5
    154e:	97 83       	std	Z+7, r25	; 0x07
    1550:	86 83       	std	Z+6, r24	; 0x06
    1552:	14 96       	adiw	r26, 0x04	; 4
    1554:	cd 91       	ld	r28, X+
    1556:	dc 91       	ld	r29, X
    1558:	15 97       	sbiw	r26, 0x05	; 5
    155a:	3b 83       	std	Y+3, r19	; 0x03
    155c:	2a 83       	std	Y+2, r18	; 0x02
    155e:	15 96       	adiw	r26, 0x05	; 5
    1560:	3c 93       	st	X, r19
    1562:	2e 93       	st	-X, r18
    1564:	14 97       	sbiw	r26, 0x04	; 4
    1566:	a6 89       	ldd	r26, Z+22	; 0x16
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	cd 01       	movw	r24, r26
    156c:	88 0f       	add	r24, r24
    156e:	99 1f       	adc	r25, r25
    1570:	88 0f       	add	r24, r24
    1572:	99 1f       	adc	r25, r25
    1574:	88 0f       	add	r24, r24
    1576:	99 1f       	adc	r25, r25
    1578:	a8 0f       	add	r26, r24
    157a:	b9 1f       	adc	r27, r25
    157c:	a6 50       	subi	r26, 0x06	; 6
    157e:	b9 4f       	sbci	r27, 0xF9	; 249
    1580:	b3 87       	std	Z+11, r27	; 0x0b
    1582:	a2 87       	std	Z+10, r26	; 0x0a
    1584:	8c 91       	ld	r24, X
    1586:	8f 5f       	subi	r24, 0xFF	; 255
    1588:	8c 93       	st	X, r24
    158a:	96 89       	ldd	r25, Z+22	; 0x16
    158c:	a0 91 1e 07 	lds	r26, 0x071E	; 0x80071e <pxCurrentTCB>
    1590:	b0 91 1f 07 	lds	r27, 0x071F	; 0x80071f <pxCurrentTCB+0x1>
    1594:	56 96       	adiw	r26, 0x16	; 22
    1596:	8c 91       	ld	r24, X
    1598:	98 17       	cp	r25, r24
    159a:	30 f0       	brcs	.+12     	; 0x15a8 <xTaskResumeAll+0x154>
    159c:	81 e0       	ldi	r24, 0x01	; 1
    159e:	80 93 c9 06 	sts	0x06C9, r24	; 0x8006c9 <xYieldPending>
    15a2:	02 c0       	rjmp	.+4      	; 0x15a8 <xTaskResumeAll+0x154>
    15a4:	e0 e0       	ldi	r30, 0x00	; 0
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 91 db 06 	lds	r24, 0x06DB	; 0x8006db <xPendingReadyList>
    15ac:	81 11       	cpse	r24, r1
    15ae:	65 cf       	rjmp	.-310    	; 0x147a <xTaskResumeAll+0x26>
    15b0:	ef 2b       	or	r30, r31
    15b2:	11 f0       	breq	.+4      	; 0x15b8 <xTaskResumeAll+0x164>
    15b4:	0e 94 bf 06 	call	0xd7e	; 0xd7e <prvResetNextTaskUnblockTime>
    15b8:	c0 91 ca 06 	lds	r28, 0x06CA	; 0x8006ca <xPendedTicks>
    15bc:	d0 91 cb 06 	lds	r29, 0x06CB	; 0x8006cb <xPendedTicks+0x1>
    15c0:	20 97       	sbiw	r28, 0x00	; 0
    15c2:	69 f0       	breq	.+26     	; 0x15de <xTaskResumeAll+0x18a>
    15c4:	0e 94 10 09 	call	0x1220	; 0x1220 <xTaskIncrementTick>
    15c8:	88 23       	and	r24, r24
    15ca:	19 f0       	breq	.+6      	; 0x15d2 <xTaskResumeAll+0x17e>
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	80 93 c9 06 	sts	0x06C9, r24	; 0x8006c9 <xYieldPending>
    15d2:	21 97       	sbiw	r28, 0x01	; 1
    15d4:	b9 f7       	brne	.-18     	; 0x15c4 <xTaskResumeAll+0x170>
    15d6:	10 92 cb 06 	sts	0x06CB, r1	; 0x8006cb <xPendedTicks+0x1>
    15da:	10 92 ca 06 	sts	0x06CA, r1	; 0x8006ca <xPendedTicks>
    15de:	80 91 c9 06 	lds	r24, 0x06C9	; 0x8006c9 <xYieldPending>
    15e2:	88 23       	and	r24, r24
    15e4:	31 f0       	breq	.+12     	; 0x15f2 <xTaskResumeAll+0x19e>
    15e6:	0e 94 e5 01 	call	0x3ca	; 0x3ca <vPortYield>
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	03 c0       	rjmp	.+6      	; 0x15f4 <xTaskResumeAll+0x1a0>
    15ee:	80 e0       	ldi	r24, 0x00	; 0
    15f0:	01 c0       	rjmp	.+2      	; 0x15f4 <xTaskResumeAll+0x1a0>
    15f2:	80 e0       	ldi	r24, 0x00	; 0
    15f4:	0f 90       	pop	r0
    15f6:	0f be       	out	0x3f, r0	; 63
    15f8:	df 91       	pop	r29
    15fa:	cf 91       	pop	r28
    15fc:	08 95       	ret

000015fe <vTaskDelay>:
    15fe:	cf 93       	push	r28
    1600:	df 93       	push	r29
    1602:	ec 01       	movw	r28, r24
    1604:	89 2b       	or	r24, r25
    1606:	49 f0       	breq	.+18     	; 0x161a <vTaskDelay+0x1c>
    1608:	0e 94 fd 08 	call	0x11fa	; 0x11fa <vTaskSuspendAll>
    160c:	60 e0       	ldi	r22, 0x00	; 0
    160e:	ce 01       	movw	r24, r28
    1610:	0e 94 30 08 	call	0x1060	; 0x1060 <prvAddCurrentTaskToDelayedList>
    1614:	0e 94 2a 0a 	call	0x1454	; 0x1454 <xTaskResumeAll>
    1618:	01 c0       	rjmp	.+2      	; 0x161c <vTaskDelay+0x1e>
    161a:	80 e0       	ldi	r24, 0x00	; 0
    161c:	81 11       	cpse	r24, r1
    161e:	02 c0       	rjmp	.+4      	; 0x1624 <vTaskDelay+0x26>
    1620:	0e 94 e5 01 	call	0x3ca	; 0x3ca <vPortYield>
    1624:	df 91       	pop	r29
    1626:	cf 91       	pop	r28
    1628:	08 95       	ret

0000162a <vTaskSwitchContext>:
    162a:	80 91 c2 06 	lds	r24, 0x06C2	; 0x8006c2 <uxSchedulerSuspended>
    162e:	88 23       	and	r24, r24
    1630:	21 f0       	breq	.+8      	; 0x163a <vTaskSwitchContext+0x10>
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	80 93 c9 06 	sts	0x06C9, r24	; 0x8006c9 <xYieldPending>
    1638:	08 95       	ret
    163a:	10 92 c9 06 	sts	0x06C9, r1	; 0x8006c9 <xYieldPending>
    163e:	20 91 cd 06 	lds	r18, 0x06CD	; 0x8006cd <uxTopReadyPriority>
    1642:	01 c0       	rjmp	.+2      	; 0x1646 <vTaskSwitchContext+0x1c>
    1644:	21 50       	subi	r18, 0x01	; 1
    1646:	82 2f       	mov	r24, r18
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	fc 01       	movw	r30, r24
    164c:	ee 0f       	add	r30, r30
    164e:	ff 1f       	adc	r31, r31
    1650:	ee 0f       	add	r30, r30
    1652:	ff 1f       	adc	r31, r31
    1654:	ee 0f       	add	r30, r30
    1656:	ff 1f       	adc	r31, r31
    1658:	e8 0f       	add	r30, r24
    165a:	f9 1f       	adc	r31, r25
    165c:	e6 50       	subi	r30, 0x06	; 6
    165e:	f9 4f       	sbci	r31, 0xF9	; 249
    1660:	30 81       	ld	r19, Z
    1662:	33 23       	and	r19, r19
    1664:	79 f3       	breq	.-34     	; 0x1644 <vTaskSwitchContext+0x1a>
    1666:	ac 01       	movw	r20, r24
    1668:	44 0f       	add	r20, r20
    166a:	55 1f       	adc	r21, r21
    166c:	44 0f       	add	r20, r20
    166e:	55 1f       	adc	r21, r21
    1670:	44 0f       	add	r20, r20
    1672:	55 1f       	adc	r21, r21
    1674:	48 0f       	add	r20, r24
    1676:	59 1f       	adc	r21, r25
    1678:	df 01       	movw	r26, r30
    167a:	01 80       	ldd	r0, Z+1	; 0x01
    167c:	f2 81       	ldd	r31, Z+2	; 0x02
    167e:	e0 2d       	mov	r30, r0
    1680:	02 80       	ldd	r0, Z+2	; 0x02
    1682:	f3 81       	ldd	r31, Z+3	; 0x03
    1684:	e0 2d       	mov	r30, r0
    1686:	12 96       	adiw	r26, 0x02	; 2
    1688:	fc 93       	st	X, r31
    168a:	ee 93       	st	-X, r30
    168c:	11 97       	sbiw	r26, 0x01	; 1
    168e:	43 50       	subi	r20, 0x03	; 3
    1690:	59 4f       	sbci	r21, 0xF9	; 249
    1692:	e4 17       	cp	r30, r20
    1694:	f5 07       	cpc	r31, r21
    1696:	29 f4       	brne	.+10     	; 0x16a2 <vTaskSwitchContext+0x78>
    1698:	42 81       	ldd	r20, Z+2	; 0x02
    169a:	53 81       	ldd	r21, Z+3	; 0x03
    169c:	fd 01       	movw	r30, r26
    169e:	52 83       	std	Z+2, r21	; 0x02
    16a0:	41 83       	std	Z+1, r20	; 0x01
    16a2:	fc 01       	movw	r30, r24
    16a4:	ee 0f       	add	r30, r30
    16a6:	ff 1f       	adc	r31, r31
    16a8:	ee 0f       	add	r30, r30
    16aa:	ff 1f       	adc	r31, r31
    16ac:	ee 0f       	add	r30, r30
    16ae:	ff 1f       	adc	r31, r31
    16b0:	8e 0f       	add	r24, r30
    16b2:	9f 1f       	adc	r25, r31
    16b4:	fc 01       	movw	r30, r24
    16b6:	e6 50       	subi	r30, 0x06	; 6
    16b8:	f9 4f       	sbci	r31, 0xF9	; 249
    16ba:	01 80       	ldd	r0, Z+1	; 0x01
    16bc:	f2 81       	ldd	r31, Z+2	; 0x02
    16be:	e0 2d       	mov	r30, r0
    16c0:	86 81       	ldd	r24, Z+6	; 0x06
    16c2:	97 81       	ldd	r25, Z+7	; 0x07
    16c4:	90 93 1f 07 	sts	0x071F, r25	; 0x80071f <pxCurrentTCB+0x1>
    16c8:	80 93 1e 07 	sts	0x071E, r24	; 0x80071e <pxCurrentTCB>
    16cc:	20 93 cd 06 	sts	0x06CD, r18	; 0x8006cd <uxTopReadyPriority>
    16d0:	08 95       	ret

000016d2 <vTaskPlaceOnEventList>:
    16d2:	cf 93       	push	r28
    16d4:	df 93       	push	r29
    16d6:	eb 01       	movw	r28, r22
    16d8:	60 91 1e 07 	lds	r22, 0x071E	; 0x80071e <pxCurrentTCB>
    16dc:	70 91 1f 07 	lds	r23, 0x071F	; 0x80071f <pxCurrentTCB+0x1>
    16e0:	64 5f       	subi	r22, 0xF4	; 244
    16e2:	7f 4f       	sbci	r23, 0xFF	; 255
    16e4:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <vListInsert>
    16e8:	61 e0       	ldi	r22, 0x01	; 1
    16ea:	ce 01       	movw	r24, r28
    16ec:	0e 94 30 08 	call	0x1060	; 0x1060 <prvAddCurrentTaskToDelayedList>
    16f0:	df 91       	pop	r29
    16f2:	cf 91       	pop	r28
    16f4:	08 95       	ret

000016f6 <vTaskPlaceOnEventListRestricted>:
    16f6:	0f 93       	push	r16
    16f8:	1f 93       	push	r17
    16fa:	cf 93       	push	r28
    16fc:	df 93       	push	r29
    16fe:	fc 01       	movw	r30, r24
    1700:	8b 01       	movw	r16, r22
    1702:	a1 81       	ldd	r26, Z+1	; 0x01
    1704:	b2 81       	ldd	r27, Z+2	; 0x02
    1706:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <pxCurrentTCB>
    170a:	90 91 1f 07 	lds	r25, 0x071F	; 0x80071f <pxCurrentTCB+0x1>
    170e:	ec 01       	movw	r28, r24
    1710:	bf 87       	std	Y+15, r27	; 0x0f
    1712:	ae 87       	std	Y+14, r26	; 0x0e
    1714:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <pxCurrentTCB>
    1718:	90 91 1f 07 	lds	r25, 0x071F	; 0x80071f <pxCurrentTCB+0x1>
    171c:	14 96       	adiw	r26, 0x04	; 4
    171e:	2d 91       	ld	r18, X+
    1720:	3c 91       	ld	r19, X
    1722:	15 97       	sbiw	r26, 0x05	; 5
    1724:	ec 01       	movw	r28, r24
    1726:	39 8b       	std	Y+17, r19	; 0x11
    1728:	28 8b       	std	Y+16, r18	; 0x10
    172a:	14 96       	adiw	r26, 0x04	; 4
    172c:	8d 91       	ld	r24, X+
    172e:	9c 91       	ld	r25, X
    1730:	15 97       	sbiw	r26, 0x05	; 5
    1732:	20 91 1e 07 	lds	r18, 0x071E	; 0x80071e <pxCurrentTCB>
    1736:	30 91 1f 07 	lds	r19, 0x071F	; 0x80071f <pxCurrentTCB+0x1>
    173a:	24 5f       	subi	r18, 0xF4	; 244
    173c:	3f 4f       	sbci	r19, 0xFF	; 255
    173e:	ec 01       	movw	r28, r24
    1740:	3b 83       	std	Y+3, r19	; 0x03
    1742:	2a 83       	std	Y+2, r18	; 0x02
    1744:	20 91 1e 07 	lds	r18, 0x071E	; 0x80071e <pxCurrentTCB>
    1748:	30 91 1f 07 	lds	r19, 0x071F	; 0x80071f <pxCurrentTCB+0x1>
    174c:	24 5f       	subi	r18, 0xF4	; 244
    174e:	3f 4f       	sbci	r19, 0xFF	; 255
    1750:	15 96       	adiw	r26, 0x05	; 5
    1752:	3c 93       	st	X, r19
    1754:	2e 93       	st	-X, r18
    1756:	14 97       	sbiw	r26, 0x04	; 4
    1758:	a0 91 1e 07 	lds	r26, 0x071E	; 0x80071e <pxCurrentTCB>
    175c:	b0 91 1f 07 	lds	r27, 0x071F	; 0x80071f <pxCurrentTCB+0x1>
    1760:	55 96       	adiw	r26, 0x15	; 21
    1762:	fc 93       	st	X, r31
    1764:	ee 93       	st	-X, r30
    1766:	54 97       	sbiw	r26, 0x14	; 20
    1768:	90 81       	ld	r25, Z
    176a:	9f 5f       	subi	r25, 0xFF	; 255
    176c:	90 83       	st	Z, r25
    176e:	44 23       	and	r20, r20
    1770:	11 f0       	breq	.+4      	; 0x1776 <vTaskPlaceOnEventListRestricted+0x80>
    1772:	0f ef       	ldi	r16, 0xFF	; 255
    1774:	1f ef       	ldi	r17, 0xFF	; 255
    1776:	64 2f       	mov	r22, r20
    1778:	c8 01       	movw	r24, r16
    177a:	0e 94 30 08 	call	0x1060	; 0x1060 <prvAddCurrentTaskToDelayedList>
    177e:	df 91       	pop	r29
    1780:	cf 91       	pop	r28
    1782:	1f 91       	pop	r17
    1784:	0f 91       	pop	r16
    1786:	08 95       	ret

00001788 <xTaskRemoveFromEventList>:
    1788:	cf 93       	push	r28
    178a:	df 93       	push	r29
    178c:	dc 01       	movw	r26, r24
    178e:	15 96       	adiw	r26, 0x05	; 5
    1790:	ed 91       	ld	r30, X+
    1792:	fc 91       	ld	r31, X
    1794:	16 97       	sbiw	r26, 0x06	; 6
    1796:	06 80       	ldd	r0, Z+6	; 0x06
    1798:	f7 81       	ldd	r31, Z+7	; 0x07
    179a:	e0 2d       	mov	r30, r0
    179c:	a4 89       	ldd	r26, Z+20	; 0x14
    179e:	b5 89       	ldd	r27, Z+21	; 0x15
    17a0:	c6 85       	ldd	r28, Z+14	; 0x0e
    17a2:	d7 85       	ldd	r29, Z+15	; 0x0f
    17a4:	80 89       	ldd	r24, Z+16	; 0x10
    17a6:	91 89       	ldd	r25, Z+17	; 0x11
    17a8:	9d 83       	std	Y+5, r25	; 0x05
    17aa:	8c 83       	std	Y+4, r24	; 0x04
    17ac:	c0 89       	ldd	r28, Z+16	; 0x10
    17ae:	d1 89       	ldd	r29, Z+17	; 0x11
    17b0:	86 85       	ldd	r24, Z+14	; 0x0e
    17b2:	97 85       	ldd	r25, Z+15	; 0x0f
    17b4:	9b 83       	std	Y+3, r25	; 0x03
    17b6:	8a 83       	std	Y+2, r24	; 0x02
    17b8:	11 96       	adiw	r26, 0x01	; 1
    17ba:	8d 91       	ld	r24, X+
    17bc:	9c 91       	ld	r25, X
    17be:	12 97       	sbiw	r26, 0x02	; 2
    17c0:	9f 01       	movw	r18, r30
    17c2:	24 5f       	subi	r18, 0xF4	; 244
    17c4:	3f 4f       	sbci	r19, 0xFF	; 255
    17c6:	82 17       	cp	r24, r18
    17c8:	93 07       	cpc	r25, r19
    17ca:	31 f4       	brne	.+12     	; 0x17d8 <xTaskRemoveFromEventList+0x50>
    17cc:	80 89       	ldd	r24, Z+16	; 0x10
    17ce:	91 89       	ldd	r25, Z+17	; 0x11
    17d0:	12 96       	adiw	r26, 0x02	; 2
    17d2:	9c 93       	st	X, r25
    17d4:	8e 93       	st	-X, r24
    17d6:	11 97       	sbiw	r26, 0x01	; 1
    17d8:	15 8a       	std	Z+21, r1	; 0x15
    17da:	14 8a       	std	Z+20, r1	; 0x14
    17dc:	8c 91       	ld	r24, X
    17de:	81 50       	subi	r24, 0x01	; 1
    17e0:	8c 93       	st	X, r24
    17e2:	80 91 c2 06 	lds	r24, 0x06C2	; 0x8006c2 <uxSchedulerSuspended>
    17e6:	81 11       	cpse	r24, r1
    17e8:	60 c0       	rjmp	.+192    	; 0x18aa <xTaskRemoveFromEventList+0x122>
    17ea:	a2 85       	ldd	r26, Z+10	; 0x0a
    17ec:	b3 85       	ldd	r27, Z+11	; 0x0b
    17ee:	c4 81       	ldd	r28, Z+4	; 0x04
    17f0:	d5 81       	ldd	r29, Z+5	; 0x05
    17f2:	86 81       	ldd	r24, Z+6	; 0x06
    17f4:	97 81       	ldd	r25, Z+7	; 0x07
    17f6:	9d 83       	std	Y+5, r25	; 0x05
    17f8:	8c 83       	std	Y+4, r24	; 0x04
    17fa:	c6 81       	ldd	r28, Z+6	; 0x06
    17fc:	d7 81       	ldd	r29, Z+7	; 0x07
    17fe:	84 81       	ldd	r24, Z+4	; 0x04
    1800:	95 81       	ldd	r25, Z+5	; 0x05
    1802:	9b 83       	std	Y+3, r25	; 0x03
    1804:	8a 83       	std	Y+2, r24	; 0x02
    1806:	11 96       	adiw	r26, 0x01	; 1
    1808:	8d 91       	ld	r24, X+
    180a:	9c 91       	ld	r25, X
    180c:	12 97       	sbiw	r26, 0x02	; 2
    180e:	9f 01       	movw	r18, r30
    1810:	2e 5f       	subi	r18, 0xFE	; 254
    1812:	3f 4f       	sbci	r19, 0xFF	; 255
    1814:	82 17       	cp	r24, r18
    1816:	93 07       	cpc	r25, r19
    1818:	31 f4       	brne	.+12     	; 0x1826 <xTaskRemoveFromEventList+0x9e>
    181a:	86 81       	ldd	r24, Z+6	; 0x06
    181c:	97 81       	ldd	r25, Z+7	; 0x07
    181e:	12 96       	adiw	r26, 0x02	; 2
    1820:	9c 93       	st	X, r25
    1822:	8e 93       	st	-X, r24
    1824:	11 97       	sbiw	r26, 0x01	; 1
    1826:	13 86       	std	Z+11, r1	; 0x0b
    1828:	12 86       	std	Z+10, r1	; 0x0a
    182a:	8c 91       	ld	r24, X
    182c:	81 50       	subi	r24, 0x01	; 1
    182e:	8c 93       	st	X, r24
    1830:	86 89       	ldd	r24, Z+22	; 0x16
    1832:	90 91 cd 06 	lds	r25, 0x06CD	; 0x8006cd <uxTopReadyPriority>
    1836:	98 17       	cp	r25, r24
    1838:	10 f4       	brcc	.+4      	; 0x183e <xTaskRemoveFromEventList+0xb6>
    183a:	80 93 cd 06 	sts	0x06CD, r24	; 0x8006cd <uxTopReadyPriority>
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	dc 01       	movw	r26, r24
    1842:	aa 0f       	add	r26, r26
    1844:	bb 1f       	adc	r27, r27
    1846:	aa 0f       	add	r26, r26
    1848:	bb 1f       	adc	r27, r27
    184a:	aa 0f       	add	r26, r26
    184c:	bb 1f       	adc	r27, r27
    184e:	8a 0f       	add	r24, r26
    1850:	9b 1f       	adc	r25, r27
    1852:	dc 01       	movw	r26, r24
    1854:	a6 50       	subi	r26, 0x06	; 6
    1856:	b9 4f       	sbci	r27, 0xF9	; 249
    1858:	11 96       	adiw	r26, 0x01	; 1
    185a:	0d 90       	ld	r0, X+
    185c:	bc 91       	ld	r27, X
    185e:	a0 2d       	mov	r26, r0
    1860:	b5 83       	std	Z+5, r27	; 0x05
    1862:	a4 83       	std	Z+4, r26	; 0x04
    1864:	14 96       	adiw	r26, 0x04	; 4
    1866:	8d 91       	ld	r24, X+
    1868:	9c 91       	ld	r25, X
    186a:	15 97       	sbiw	r26, 0x05	; 5
    186c:	97 83       	std	Z+7, r25	; 0x07
    186e:	86 83       	std	Z+6, r24	; 0x06
    1870:	14 96       	adiw	r26, 0x04	; 4
    1872:	cd 91       	ld	r28, X+
    1874:	dc 91       	ld	r29, X
    1876:	15 97       	sbiw	r26, 0x05	; 5
    1878:	3b 83       	std	Y+3, r19	; 0x03
    187a:	2a 83       	std	Y+2, r18	; 0x02
    187c:	15 96       	adiw	r26, 0x05	; 5
    187e:	3c 93       	st	X, r19
    1880:	2e 93       	st	-X, r18
    1882:	14 97       	sbiw	r26, 0x04	; 4
    1884:	a6 89       	ldd	r26, Z+22	; 0x16
    1886:	b0 e0       	ldi	r27, 0x00	; 0
    1888:	cd 01       	movw	r24, r26
    188a:	88 0f       	add	r24, r24
    188c:	99 1f       	adc	r25, r25
    188e:	88 0f       	add	r24, r24
    1890:	99 1f       	adc	r25, r25
    1892:	88 0f       	add	r24, r24
    1894:	99 1f       	adc	r25, r25
    1896:	a8 0f       	add	r26, r24
    1898:	b9 1f       	adc	r27, r25
    189a:	a6 50       	subi	r26, 0x06	; 6
    189c:	b9 4f       	sbci	r27, 0xF9	; 249
    189e:	b3 87       	std	Z+11, r27	; 0x0b
    18a0:	a2 87       	std	Z+10, r26	; 0x0a
    18a2:	8c 91       	ld	r24, X
    18a4:	8f 5f       	subi	r24, 0xFF	; 255
    18a6:	8c 93       	st	X, r24
    18a8:	1c c0       	rjmp	.+56     	; 0x18e2 <xTaskRemoveFromEventList+0x15a>
    18aa:	4b ed       	ldi	r20, 0xDB	; 219
    18ac:	56 e0       	ldi	r21, 0x06	; 6
    18ae:	da 01       	movw	r26, r20
    18b0:	11 96       	adiw	r26, 0x01	; 1
    18b2:	cd 91       	ld	r28, X+
    18b4:	dc 91       	ld	r29, X
    18b6:	12 97       	sbiw	r26, 0x02	; 2
    18b8:	d7 87       	std	Z+15, r29	; 0x0f
    18ba:	c6 87       	std	Z+14, r28	; 0x0e
    18bc:	8c 81       	ldd	r24, Y+4	; 0x04
    18be:	9d 81       	ldd	r25, Y+5	; 0x05
    18c0:	91 8b       	std	Z+17, r25	; 0x11
    18c2:	80 8b       	std	Z+16, r24	; 0x10
    18c4:	8c 81       	ldd	r24, Y+4	; 0x04
    18c6:	9d 81       	ldd	r25, Y+5	; 0x05
    18c8:	dc 01       	movw	r26, r24
    18ca:	13 96       	adiw	r26, 0x03	; 3
    18cc:	3c 93       	st	X, r19
    18ce:	2e 93       	st	-X, r18
    18d0:	12 97       	sbiw	r26, 0x02	; 2
    18d2:	3d 83       	std	Y+5, r19	; 0x05
    18d4:	2c 83       	std	Y+4, r18	; 0x04
    18d6:	55 8b       	std	Z+21, r21	; 0x15
    18d8:	44 8b       	std	Z+20, r20	; 0x14
    18da:	da 01       	movw	r26, r20
    18dc:	8c 91       	ld	r24, X
    18de:	8f 5f       	subi	r24, 0xFF	; 255
    18e0:	8c 93       	st	X, r24
    18e2:	96 89       	ldd	r25, Z+22	; 0x16
    18e4:	e0 91 1e 07 	lds	r30, 0x071E	; 0x80071e <pxCurrentTCB>
    18e8:	f0 91 1f 07 	lds	r31, 0x071F	; 0x80071f <pxCurrentTCB+0x1>
    18ec:	86 89       	ldd	r24, Z+22	; 0x16
    18ee:	89 17       	cp	r24, r25
    18f0:	20 f4       	brcc	.+8      	; 0x18fa <xTaskRemoveFromEventList+0x172>
    18f2:	81 e0       	ldi	r24, 0x01	; 1
    18f4:	80 93 c9 06 	sts	0x06C9, r24	; 0x8006c9 <xYieldPending>
    18f8:	01 c0       	rjmp	.+2      	; 0x18fc <xTaskRemoveFromEventList+0x174>
    18fa:	80 e0       	ldi	r24, 0x00	; 0
    18fc:	df 91       	pop	r29
    18fe:	cf 91       	pop	r28
    1900:	08 95       	ret

00001902 <vTaskInternalSetTimeOutState>:
    1902:	20 91 c8 06 	lds	r18, 0x06C8	; 0x8006c8 <xNumOfOverflows>
    1906:	fc 01       	movw	r30, r24
    1908:	20 83       	st	Z, r18
    190a:	20 91 ce 06 	lds	r18, 0x06CE	; 0x8006ce <xTickCount>
    190e:	30 91 cf 06 	lds	r19, 0x06CF	; 0x8006cf <xTickCount+0x1>
    1912:	32 83       	std	Z+2, r19	; 0x02
    1914:	21 83       	std	Z+1, r18	; 0x01
    1916:	08 95       	ret

00001918 <xTaskCheckForTimeOut>:
    1918:	cf 93       	push	r28
    191a:	df 93       	push	r29
    191c:	0f b6       	in	r0, 0x3f	; 63
    191e:	f8 94       	cli
    1920:	0f 92       	push	r0
    1922:	40 91 ce 06 	lds	r20, 0x06CE	; 0x8006ce <xTickCount>
    1926:	50 91 cf 06 	lds	r21, 0x06CF	; 0x8006cf <xTickCount+0x1>
    192a:	ec 01       	movw	r28, r24
    192c:	29 81       	ldd	r18, Y+1	; 0x01
    192e:	3a 81       	ldd	r19, Y+2	; 0x02
    1930:	da 01       	movw	r26, r20
    1932:	a2 1b       	sub	r26, r18
    1934:	b3 0b       	sbc	r27, r19
    1936:	f8 81       	ld	r31, Y
    1938:	e0 91 c8 06 	lds	r30, 0x06C8	; 0x8006c8 <xNumOfOverflows>
    193c:	fe 17       	cp	r31, r30
    193e:	41 f0       	breq	.+16     	; 0x1950 <xTaskCheckForTimeOut+0x38>
    1940:	42 17       	cp	r20, r18
    1942:	53 07       	cpc	r21, r19
    1944:	28 f0       	brcs	.+10     	; 0x1950 <xTaskCheckForTimeOut+0x38>
    1946:	fb 01       	movw	r30, r22
    1948:	11 82       	std	Z+1, r1	; 0x01
    194a:	10 82       	st	Z, r1
    194c:	81 e0       	ldi	r24, 0x01	; 1
    194e:	11 c0       	rjmp	.+34     	; 0x1972 <xTaskCheckForTimeOut+0x5a>
    1950:	eb 01       	movw	r28, r22
    1952:	28 81       	ld	r18, Y
    1954:	39 81       	ldd	r19, Y+1	; 0x01
    1956:	a2 17       	cp	r26, r18
    1958:	b3 07       	cpc	r27, r19
    195a:	40 f4       	brcc	.+16     	; 0x196c <xTaskCheckForTimeOut+0x54>
    195c:	2a 1b       	sub	r18, r26
    195e:	3b 0b       	sbc	r19, r27
    1960:	39 83       	std	Y+1, r19	; 0x01
    1962:	28 83       	st	Y, r18
    1964:	0e 94 81 0c 	call	0x1902	; 0x1902 <vTaskInternalSetTimeOutState>
    1968:	80 e0       	ldi	r24, 0x00	; 0
    196a:	03 c0       	rjmp	.+6      	; 0x1972 <xTaskCheckForTimeOut+0x5a>
    196c:	19 82       	std	Y+1, r1	; 0x01
    196e:	18 82       	st	Y, r1
    1970:	81 e0       	ldi	r24, 0x01	; 1
    1972:	0f 90       	pop	r0
    1974:	0f be       	out	0x3f, r0	; 63
    1976:	df 91       	pop	r29
    1978:	cf 91       	pop	r28
    197a:	08 95       	ret

0000197c <vTaskMissedYield>:
    197c:	81 e0       	ldi	r24, 0x01	; 1
    197e:	80 93 c9 06 	sts	0x06C9, r24	; 0x8006c9 <xYieldPending>
    1982:	08 95       	ret

00001984 <xTaskGetSchedulerState>:

    BaseType_t xTaskGetSchedulerState( void )
    {
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
    1984:	80 91 cc 06 	lds	r24, 0x06CC	; 0x8006cc <xSchedulerRunning>
    1988:	88 23       	and	r24, r24
    198a:	31 f0       	breq	.+12     	; 0x1998 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    198c:	80 91 c2 06 	lds	r24, 0x06C2	; 0x8006c2 <uxSchedulerSuspended>
    1990:	81 11       	cpse	r24, r1
    1992:	04 c0       	rjmp	.+8      	; 0x199c <xTaskGetSchedulerState+0x18>
            {
                xReturn = taskSCHEDULER_RUNNING;
    1994:	82 e0       	ldi	r24, 0x02	; 2
    1996:	08 95       	ret
    {
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
    1998:	81 e0       	ldi	r24, 0x01	; 1
    199a:	08 95       	ret
            {
                xReturn = taskSCHEDULER_RUNNING;
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
    199c:	80 e0       	ldi	r24, 0x00	; 0
            }
        }

        return xReturn;
    }
    199e:	08 95       	ret

000019a0 <prvGetNextExpireTime>:
        }
    }
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
    19a0:	dc 01       	movw	r26, r24
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    19a2:	e0 91 28 07 	lds	r30, 0x0728	; 0x800728 <pxCurrentTimerList>
    19a6:	f0 91 29 07 	lds	r31, 0x0729	; 0x800729 <pxCurrentTimerList+0x1>
    19aa:	80 81       	ld	r24, Z
    19ac:	91 e0       	ldi	r25, 0x01	; 1
    19ae:	81 11       	cpse	r24, r1
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	9c 93       	st	X, r25

        if( *pxListWasEmpty == pdFALSE )
    19b4:	91 11       	cpse	r25, r1
    19b6:	06 c0       	rjmp	.+12     	; 0x19c4 <prvGetNextExpireTime+0x24>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    19b8:	05 80       	ldd	r0, Z+5	; 0x05
    19ba:	f6 81       	ldd	r31, Z+6	; 0x06
    19bc:	e0 2d       	mov	r30, r0
    19be:	80 81       	ld	r24, Z
    19c0:	91 81       	ldd	r25, Z+1	; 0x01
    19c2:	08 95       	ret
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
    19c4:	80 e0       	ldi	r24, 0x00	; 0
    19c6:	90 e0       	ldi	r25, 0x00	; 0
        }

        return xNextExpireTime;
    }
    19c8:	08 95       	ret

000019ca <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
    19ca:	fc 01       	movw	r30, r24
        BaseType_t xProcessTimerNow = pdFALSE;

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    19cc:	73 83       	std	Z+3, r23	; 0x03
    19ce:	62 83       	std	Z+2, r22	; 0x02
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    19d0:	91 87       	std	Z+9, r25	; 0x09
    19d2:	80 87       	std	Z+8, r24	; 0x08

        if( xNextExpiryTime <= xTimeNow )
    19d4:	46 17       	cp	r20, r22
    19d6:	57 07       	cpc	r21, r23
    19d8:	90 f0       	brcs	.+36     	; 0x19fe <prvInsertTimerInActiveList+0x34>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    19da:	42 1b       	sub	r20, r18
    19dc:	53 0b       	sbc	r21, r19
    19de:	84 85       	ldd	r24, Z+12	; 0x0c
    19e0:	95 85       	ldd	r25, Z+13	; 0x0d
    19e2:	48 17       	cp	r20, r24
    19e4:	59 07       	cpc	r21, r25
    19e6:	e0 f4       	brcc	.+56     	; 0x1a20 <prvInsertTimerInActiveList+0x56>
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    19e8:	bf 01       	movw	r22, r30
    19ea:	6e 5f       	subi	r22, 0xFE	; 254
    19ec:	7f 4f       	sbci	r23, 0xFF	; 255
    19ee:	80 91 26 07 	lds	r24, 0x0726	; 0x800726 <pxOverflowTimerList>
    19f2:	90 91 27 07 	lds	r25, 0x0727	; 0x800727 <pxOverflowTimerList+0x1>
    19f6:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <vListInsert>
    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
        BaseType_t xProcessTimerNow = pdFALSE;
    19fa:	80 e0       	ldi	r24, 0x00	; 0
    19fc:	08 95       	ret
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    19fe:	42 17       	cp	r20, r18
    1a00:	53 07       	cpc	r21, r19
    1a02:	18 f4       	brcc	.+6      	; 0x1a0a <prvInsertTimerInActiveList+0x40>
    1a04:	62 17       	cp	r22, r18
    1a06:	73 07       	cpc	r23, r19
    1a08:	68 f4       	brcc	.+26     	; 0x1a24 <prvInsertTimerInActiveList+0x5a>
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    1a0a:	bf 01       	movw	r22, r30
    1a0c:	6e 5f       	subi	r22, 0xFE	; 254
    1a0e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a10:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <pxCurrentTimerList>
    1a14:	90 91 29 07 	lds	r25, 0x0729	; 0x800729 <pxCurrentTimerList+0x1>
    1a18:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <vListInsert>
    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
        BaseType_t xProcessTimerNow = pdFALSE;
    1a1c:	80 e0       	ldi	r24, 0x00	; 0
    1a1e:	08 95       	ret
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
    1a20:	81 e0       	ldi	r24, 0x01	; 1
    1a22:	08 95       	ret
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
    1a24:	81 e0       	ldi	r24, 0x01	; 1
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
            }
        }

        return xProcessTimerNow;
    }
    1a26:	08 95       	ret

00001a28 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
    1a28:	ef 92       	push	r14
    1a2a:	ff 92       	push	r15
    1a2c:	0f 93       	push	r16
    1a2e:	1f 93       	push	r17
    1a30:	cf 93       	push	r28
    1a32:	df 93       	push	r29
    1a34:	ec 01       	movw	r28, r24
    1a36:	8b 01       	movw	r16, r22
    1a38:	7a 01       	movw	r14, r20
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
    1a3a:	08 c0       	rjmp	.+16     	; 0x1a4c <prvReloadTimer+0x24>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
    1a3c:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a3e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1a40:	08 0f       	add	r16, r24
    1a42:	19 1f       	adc	r17, r25

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    1a44:	e8 89       	ldd	r30, Y+16	; 0x10
    1a46:	f9 89       	ldd	r31, Y+17	; 0x11
    1a48:	ce 01       	movw	r24, r28
    1a4a:	09 95       	icall
                                const TickType_t xTimeNow )
    {
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
    1a4c:	6c 85       	ldd	r22, Y+12	; 0x0c
    1a4e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1a50:	60 0f       	add	r22, r16
    1a52:	71 1f       	adc	r23, r17
    1a54:	98 01       	movw	r18, r16
    1a56:	a7 01       	movw	r20, r14
    1a58:	ce 01       	movw	r24, r28
    1a5a:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <prvInsertTimerInActiveList>
    1a5e:	81 11       	cpse	r24, r1
    1a60:	ed cf       	rjmp	.-38     	; 0x1a3c <prvReloadTimer+0x14>

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
        }
    }
    1a62:	df 91       	pop	r29
    1a64:	cf 91       	pop	r28
    1a66:	1f 91       	pop	r17
    1a68:	0f 91       	pop	r16
    1a6a:	ff 90       	pop	r15
    1a6c:	ef 90       	pop	r14
    1a6e:	08 95       	ret

00001a70 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    1a70:	ef 92       	push	r14
    1a72:	ff 92       	push	r15
    1a74:	0f 93       	push	r16
    1a76:	1f 93       	push	r17
    1a78:	cf 93       	push	r28
    1a7a:	df 93       	push	r29
    1a7c:	8c 01       	movw	r16, r24
    1a7e:	7b 01       	movw	r14, r22
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    1a80:	e0 91 28 07 	lds	r30, 0x0728	; 0x800728 <pxCurrentTimerList>
    1a84:	f0 91 29 07 	lds	r31, 0x0729	; 0x800729 <pxCurrentTimerList+0x1>
    1a88:	05 80       	ldd	r0, Z+5	; 0x05
    1a8a:	f6 81       	ldd	r31, Z+6	; 0x06
    1a8c:	e0 2d       	mov	r30, r0
    1a8e:	c6 81       	ldd	r28, Z+6	; 0x06
    1a90:	d7 81       	ldd	r29, Z+7	; 0x07

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    1a92:	ce 01       	movw	r24, r28
    1a94:	02 96       	adiw	r24, 0x02	; 2
    1a96:	0e 94 1a 01 	call	0x234	; 0x234 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    1a9a:	8a 89       	ldd	r24, Y+18	; 0x12
    1a9c:	82 ff       	sbrs	r24, 2
    1a9e:	06 c0       	rjmp	.+12     	; 0x1aac <prvProcessExpiredTimer+0x3c>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
    1aa0:	a7 01       	movw	r20, r14
    1aa2:	b8 01       	movw	r22, r16
    1aa4:	ce 01       	movw	r24, r28
    1aa6:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <prvReloadTimer>
    1aaa:	02 c0       	rjmp	.+4      	; 0x1ab0 <prvProcessExpiredTimer+0x40>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
    1aac:	8e 7f       	andi	r24, 0xFE	; 254
    1aae:	8a 8b       	std	Y+18, r24	; 0x12
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    1ab0:	e8 89       	ldd	r30, Y+16	; 0x10
    1ab2:	f9 89       	ldd	r31, Y+17	; 0x11
    1ab4:	ce 01       	movw	r24, r28
    1ab6:	09 95       	icall
    }
    1ab8:	df 91       	pop	r29
    1aba:	cf 91       	pop	r28
    1abc:	1f 91       	pop	r17
    1abe:	0f 91       	pop	r16
    1ac0:	ff 90       	pop	r15
    1ac2:	ef 90       	pop	r14
    1ac4:	08 95       	ret

00001ac6 <prvSwitchTimerLists>:

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    1ac6:	09 c0       	rjmp	.+18     	; 0x1ada <prvSwitchTimerLists+0x14>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    1ac8:	05 80       	ldd	r0, Z+5	; 0x05
    1aca:	f6 81       	ldd	r31, Z+6	; 0x06
    1acc:	e0 2d       	mov	r30, r0

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
    1ace:	6f ef       	ldi	r22, 0xFF	; 255
    1ad0:	7f ef       	ldi	r23, 0xFF	; 255
    1ad2:	80 81       	ld	r24, Z
    1ad4:	91 81       	ldd	r25, Z+1	; 0x01
    1ad6:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <prvProcessExpiredTimer>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    1ada:	e0 91 28 07 	lds	r30, 0x0728	; 0x800728 <pxCurrentTimerList>
    1ade:	f0 91 29 07 	lds	r31, 0x0729	; 0x800729 <pxCurrentTimerList+0x1>
    1ae2:	80 81       	ld	r24, Z
    1ae4:	81 11       	cpse	r24, r1
    1ae6:	f0 cf       	rjmp	.-32     	; 0x1ac8 <prvSwitchTimerLists+0x2>
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    1ae8:	80 91 26 07 	lds	r24, 0x0726	; 0x800726 <pxOverflowTimerList>
    1aec:	90 91 27 07 	lds	r25, 0x0727	; 0x800727 <pxOverflowTimerList+0x1>
    1af0:	90 93 29 07 	sts	0x0729, r25	; 0x800729 <pxCurrentTimerList+0x1>
    1af4:	80 93 28 07 	sts	0x0728, r24	; 0x800728 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    1af8:	f0 93 27 07 	sts	0x0727, r31	; 0x800727 <pxOverflowTimerList+0x1>
    1afc:	e0 93 26 07 	sts	0x0726, r30	; 0x800726 <pxOverflowTimerList>
    1b00:	08 95       	ret

00001b02 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    1b02:	0f 93       	push	r16
    1b04:	1f 93       	push	r17
    1b06:	cf 93       	push	r28
    1b08:	df 93       	push	r29
    1b0a:	8c 01       	movw	r16, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    1b0c:	0e 94 03 09 	call	0x1206	; 0x1206 <xTaskGetTickCount>
    1b10:	ec 01       	movw	r28, r24

        if( xTimeNow < xLastTime )
    1b12:	80 91 20 07 	lds	r24, 0x0720	; 0x800720 <xLastTime.2427>
    1b16:	90 91 21 07 	lds	r25, 0x0721	; 0x800721 <xLastTime.2427+0x1>
    1b1a:	c8 17       	cp	r28, r24
    1b1c:	d9 07       	cpc	r29, r25
    1b1e:	30 f4       	brcc	.+12     	; 0x1b2c <prvSampleTimeNow+0x2a>
        {
            prvSwitchTimerLists();
    1b20:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	f8 01       	movw	r30, r16
    1b28:	80 83       	st	Z, r24
    1b2a:	02 c0       	rjmp	.+4      	; 0x1b30 <prvSampleTimeNow+0x2e>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    1b2c:	f8 01       	movw	r30, r16
    1b2e:	10 82       	st	Z, r1
        }

        xLastTime = xTimeNow;
    1b30:	d0 93 21 07 	sts	0x0721, r29	; 0x800721 <xLastTime.2427+0x1>
    1b34:	c0 93 20 07 	sts	0x0720, r28	; 0x800720 <xLastTime.2427>

        return xTimeNow;
    }
    1b38:	ce 01       	movw	r24, r28
    1b3a:	df 91       	pop	r29
    1b3c:	cf 91       	pop	r28
    1b3e:	1f 91       	pop	r17
    1b40:	0f 91       	pop	r16
    1b42:	08 95       	ret

00001b44 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    1b44:	cf 92       	push	r12
    1b46:	df 92       	push	r13
    1b48:	ef 92       	push	r14
    1b4a:	ff 92       	push	r15
    1b4c:	1f 93       	push	r17
    1b4e:	cf 93       	push	r28
    1b50:	df 93       	push	r29
    1b52:	1f 92       	push	r1
    1b54:	cd b7       	in	r28, 0x3d	; 61
    1b56:	de b7       	in	r29, 0x3e	; 62
    1b58:	7c 01       	movw	r14, r24
    1b5a:	16 2f       	mov	r17, r22
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    1b5c:	0e 94 fd 08 	call	0x11fa	; 0x11fa <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    1b60:	ce 01       	movw	r24, r28
    1b62:	01 96       	adiw	r24, 0x01	; 1
    1b64:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <prvSampleTimeNow>
    1b68:	6c 01       	movw	r12, r24

            if( xTimerListsWereSwitched == pdFALSE )
    1b6a:	89 81       	ldd	r24, Y+1	; 0x01
    1b6c:	81 11       	cpse	r24, r1
    1b6e:	27 c0       	rjmp	.+78     	; 0x1bbe <prvProcessTimerOrBlockTask+0x7a>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    1b70:	11 11       	cpse	r17, r1
    1b72:	0a c0       	rjmp	.+20     	; 0x1b88 <prvProcessTimerOrBlockTask+0x44>
    1b74:	ce 14       	cp	r12, r14
    1b76:	df 04       	cpc	r13, r15
    1b78:	38 f0       	brcs	.+14     	; 0x1b88 <prvProcessTimerOrBlockTask+0x44>
                {
                    ( void ) xTaskResumeAll();
    1b7a:	0e 94 2a 0a 	call	0x1454	; 0x1454 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    1b7e:	b6 01       	movw	r22, r12
    1b80:	c7 01       	movw	r24, r14
    1b82:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <prvProcessExpiredTimer>
    1b86:	1d c0       	rjmp	.+58     	; 0x1bc2 <prvProcessTimerOrBlockTask+0x7e>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    1b88:	11 23       	and	r17, r17
    1b8a:	41 f0       	breq	.+16     	; 0x1b9c <prvProcessTimerOrBlockTask+0x58>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    1b8c:	e0 91 26 07 	lds	r30, 0x0726	; 0x800726 <pxOverflowTimerList>
    1b90:	f0 91 27 07 	lds	r31, 0x0727	; 0x800727 <pxOverflowTimerList+0x1>
    1b94:	80 81       	ld	r24, Z
    1b96:	11 e0       	ldi	r17, 0x01	; 1
    1b98:	81 11       	cpse	r24, r1
    1b9a:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    1b9c:	b7 01       	movw	r22, r14
    1b9e:	6c 19       	sub	r22, r12
    1ba0:	7d 09       	sbc	r23, r13
    1ba2:	41 2f       	mov	r20, r17
    1ba4:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <xTimerQueue>
    1ba8:	90 91 25 07 	lds	r25, 0x0725	; 0x800725 <xTimerQueue+0x1>
    1bac:	0e 94 a2 06 	call	0xd44	; 0xd44 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    1bb0:	0e 94 2a 0a 	call	0x1454	; 0x1454 <xTaskResumeAll>
    1bb4:	81 11       	cpse	r24, r1
    1bb6:	05 c0       	rjmp	.+10     	; 0x1bc2 <prvProcessTimerOrBlockTask+0x7e>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    1bb8:	0e 94 e5 01 	call	0x3ca	; 0x3ca <vPortYield>
    1bbc:	02 c0       	rjmp	.+4      	; 0x1bc2 <prvProcessTimerOrBlockTask+0x7e>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    1bbe:	0e 94 2a 0a 	call	0x1454	; 0x1454 <xTaskResumeAll>
            }
        }
    }
    1bc2:	0f 90       	pop	r0
    1bc4:	df 91       	pop	r29
    1bc6:	cf 91       	pop	r28
    1bc8:	1f 91       	pop	r17
    1bca:	ff 90       	pop	r15
    1bcc:	ef 90       	pop	r14
    1bce:	df 90       	pop	r13
    1bd0:	cf 90       	pop	r12
    1bd2:	08 95       	ret

00001bd4 <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    1bd4:	ef 92       	push	r14
    1bd6:	ff 92       	push	r15
    1bd8:	0f 93       	push	r16
    1bda:	1f 93       	push	r17
    1bdc:	cf 93       	push	r28
    1bde:	df 93       	push	r29
    1be0:	00 d0       	rcall	.+0      	; 0x1be2 <prvProcessReceivedCommands+0xe>
    1be2:	00 d0       	rcall	.+0      	; 0x1be4 <prvProcessReceivedCommands+0x10>
    1be4:	00 d0       	rcall	.+0      	; 0x1be6 <prvProcessReceivedCommands+0x12>
    1be6:	cd b7       	in	r28, 0x3d	; 61
    1be8:	de b7       	in	r29, 0x3e	; 62
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    1bea:	7a c0       	rjmp	.+244    	; 0x1ce0 <prvProcessReceivedCommands+0x10c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    1bec:	89 81       	ldd	r24, Y+1	; 0x01
    1bee:	88 23       	and	r24, r24
    1bf0:	0c f4       	brge	.+2      	; 0x1bf4 <prvProcessReceivedCommands+0x20>
    1bf2:	76 c0       	rjmp	.+236    	; 0x1ce0 <prvProcessReceivedCommands+0x10c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    1bf4:	0c 81       	ldd	r16, Y+4	; 0x04
    1bf6:	1d 81       	ldd	r17, Y+5	; 0x05

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    1bf8:	d8 01       	movw	r26, r16
    1bfa:	1a 96       	adiw	r26, 0x0a	; 10
    1bfc:	8d 91       	ld	r24, X+
    1bfe:	9c 91       	ld	r25, X
    1c00:	1b 97       	sbiw	r26, 0x0b	; 11
    1c02:	89 2b       	or	r24, r25
    1c04:	21 f0       	breq	.+8      	; 0x1c0e <prvProcessReceivedCommands+0x3a>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    1c06:	c8 01       	movw	r24, r16
    1c08:	02 96       	adiw	r24, 0x02	; 2
    1c0a:	0e 94 1a 01 	call	0x234	; 0x234 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    1c0e:	ce 01       	movw	r24, r28
    1c10:	06 96       	adiw	r24, 0x06	; 6
    1c12:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <prvSampleTimeNow>
    1c16:	7c 01       	movw	r14, r24

                switch( xMessage.xMessageID )
    1c18:	e9 81       	ldd	r30, Y+1	; 0x01
    1c1a:	8e 2f       	mov	r24, r30
    1c1c:	ee 0f       	add	r30, r30
    1c1e:	99 0b       	sbc	r25, r25
    1c20:	aa 0b       	sbc	r26, r26
    1c22:	bb 0b       	sbc	r27, r27
    1c24:	fc 01       	movw	r30, r24
    1c26:	31 97       	sbiw	r30, 0x01	; 1
    1c28:	e9 30       	cpi	r30, 0x09	; 9
    1c2a:	f1 05       	cpc	r31, r1
    1c2c:	08 f0       	brcs	.+2      	; 0x1c30 <prvProcessReceivedCommands+0x5c>
    1c2e:	58 c0       	rjmp	.+176    	; 0x1ce0 <prvProcessReceivedCommands+0x10c>
    1c30:	e6 5d       	subi	r30, 0xD6	; 214
    1c32:	ff 4f       	sbci	r31, 0xFF	; 255
    1c34:	0c 94 a5 13 	jmp	0x274a	; 0x274a <__tablejump2__>
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    1c38:	f8 01       	movw	r30, r16
    1c3a:	82 89       	ldd	r24, Z+18	; 0x12
    1c3c:	81 60       	ori	r24, 0x01	; 1
    1c3e:	82 8b       	std	Z+18, r24	; 0x12

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    1c40:	2a 81       	ldd	r18, Y+2	; 0x02
    1c42:	3b 81       	ldd	r19, Y+3	; 0x03
    1c44:	64 85       	ldd	r22, Z+12	; 0x0c
    1c46:	75 85       	ldd	r23, Z+13	; 0x0d
    1c48:	62 0f       	add	r22, r18
    1c4a:	73 1f       	adc	r23, r19
    1c4c:	a7 01       	movw	r20, r14
    1c4e:	c8 01       	movw	r24, r16
    1c50:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <prvInsertTimerInActiveList>
    1c54:	88 23       	and	r24, r24
    1c56:	09 f4       	brne	.+2      	; 0x1c5a <prvProcessReceivedCommands+0x86>
    1c58:	43 c0       	rjmp	.+134    	; 0x1ce0 <prvProcessReceivedCommands+0x10c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    1c5a:	d8 01       	movw	r26, r16
    1c5c:	52 96       	adiw	r26, 0x12	; 18
    1c5e:	8c 91       	ld	r24, X
    1c60:	52 97       	sbiw	r26, 0x12	; 18
    1c62:	82 ff       	sbrs	r24, 2
    1c64:	0d c0       	rjmp	.+26     	; 0x1c80 <prvProcessReceivedCommands+0xac>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
    1c66:	6a 81       	ldd	r22, Y+2	; 0x02
    1c68:	7b 81       	ldd	r23, Y+3	; 0x03
    1c6a:	1c 96       	adiw	r26, 0x0c	; 12
    1c6c:	8d 91       	ld	r24, X+
    1c6e:	9c 91       	ld	r25, X
    1c70:	1d 97       	sbiw	r26, 0x0d	; 13
    1c72:	68 0f       	add	r22, r24
    1c74:	79 1f       	adc	r23, r25
    1c76:	a7 01       	movw	r20, r14
    1c78:	c8 01       	movw	r24, r16
    1c7a:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <prvReloadTimer>
    1c7e:	03 c0       	rjmp	.+6      	; 0x1c86 <prvProcessReceivedCommands+0xb2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
    1c80:	8e 7f       	andi	r24, 0xFE	; 254
    1c82:	f8 01       	movw	r30, r16
    1c84:	82 8b       	std	Z+18, r24	; 0x12
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    1c86:	d8 01       	movw	r26, r16
    1c88:	50 96       	adiw	r26, 0x10	; 16
    1c8a:	ed 91       	ld	r30, X+
    1c8c:	fc 91       	ld	r31, X
    1c8e:	51 97       	sbiw	r26, 0x11	; 17
    1c90:	c8 01       	movw	r24, r16
    1c92:	09 95       	icall
    1c94:	25 c0       	rjmp	.+74     	; 0x1ce0 <prvProcessReceivedCommands+0x10c>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
    1c96:	f8 01       	movw	r30, r16
    1c98:	82 89       	ldd	r24, Z+18	; 0x12
    1c9a:	8e 7f       	andi	r24, 0xFE	; 254
    1c9c:	82 8b       	std	Z+18, r24	; 0x12
                        break;
    1c9e:	20 c0       	rjmp	.+64     	; 0x1ce0 <prvProcessReceivedCommands+0x10c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    1ca0:	d8 01       	movw	r26, r16
    1ca2:	52 96       	adiw	r26, 0x12	; 18
    1ca4:	8c 91       	ld	r24, X
    1ca6:	52 97       	sbiw	r26, 0x12	; 18
    1ca8:	81 60       	ori	r24, 0x01	; 1
    1caa:	52 96       	adiw	r26, 0x12	; 18
    1cac:	8c 93       	st	X, r24
    1cae:	52 97       	sbiw	r26, 0x12	; 18
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    1cb0:	6a 81       	ldd	r22, Y+2	; 0x02
    1cb2:	7b 81       	ldd	r23, Y+3	; 0x03
    1cb4:	1d 96       	adiw	r26, 0x0d	; 13
    1cb6:	7c 93       	st	X, r23
    1cb8:	6e 93       	st	-X, r22
    1cba:	1c 97       	sbiw	r26, 0x0c	; 12
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    1cbc:	6e 0d       	add	r22, r14
    1cbe:	7f 1d       	adc	r23, r15
    1cc0:	97 01       	movw	r18, r14
    1cc2:	a7 01       	movw	r20, r14
    1cc4:	c8 01       	movw	r24, r16
    1cc6:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <prvInsertTimerInActiveList>
                        break;
    1cca:	0a c0       	rjmp	.+20     	; 0x1ce0 <prvProcessReceivedCommands+0x10c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    1ccc:	f8 01       	movw	r30, r16
    1cce:	82 89       	ldd	r24, Z+18	; 0x12
    1cd0:	81 fd       	sbrc	r24, 1
    1cd2:	04 c0       	rjmp	.+8      	; 0x1cdc <prvProcessReceivedCommands+0x108>
                            {
                                vPortFree( pxTimer );
    1cd4:	c8 01       	movw	r24, r16
    1cd6:	0e 94 a5 03 	call	0x74a	; 0x74a <vPortFree>
    1cda:	02 c0       	rjmp	.+4      	; 0x1ce0 <prvProcessReceivedCommands+0x10c>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
    1cdc:	8e 7f       	andi	r24, 0xFE	; 254
    1cde:	82 8b       	std	Z+18, r24	; 0x12
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    1ce0:	40 e0       	ldi	r20, 0x00	; 0
    1ce2:	50 e0       	ldi	r21, 0x00	; 0
    1ce4:	be 01       	movw	r22, r28
    1ce6:	6f 5f       	subi	r22, 0xFF	; 255
    1ce8:	7f 4f       	sbci	r23, 0xFF	; 255
    1cea:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <xTimerQueue>
    1cee:	90 91 25 07 	lds	r25, 0x0725	; 0x800725 <xTimerQueue+0x1>
    1cf2:	0e 94 13 06 	call	0xc26	; 0xc26 <xQueueReceive>
    1cf6:	81 11       	cpse	r24, r1
    1cf8:	79 cf       	rjmp	.-270    	; 0x1bec <prvProcessReceivedCommands+0x18>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    1cfa:	26 96       	adiw	r28, 0x06	; 6
    1cfc:	0f b6       	in	r0, 0x3f	; 63
    1cfe:	f8 94       	cli
    1d00:	de bf       	out	0x3e, r29	; 62
    1d02:	0f be       	out	0x3f, r0	; 63
    1d04:	cd bf       	out	0x3d, r28	; 61
    1d06:	df 91       	pop	r29
    1d08:	cf 91       	pop	r28
    1d0a:	1f 91       	pop	r17
    1d0c:	0f 91       	pop	r16
    1d0e:	ff 90       	pop	r15
    1d10:	ef 90       	pop	r14
    1d12:	08 95       	ret

00001d14 <prvTimerTask>:
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    }
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
    1d14:	cf 93       	push	r28
    1d16:	df 93       	push	r29
    1d18:	1f 92       	push	r1
    1d1a:	cd b7       	in	r28, 0x3d	; 61
    1d1c:	de b7       	in	r29, 0x3e	; 62

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    1d1e:	ce 01       	movw	r24, r28
    1d20:	01 96       	adiw	r24, 0x01	; 1
    1d22:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <prvGetNextExpireTime>

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
    1d26:	69 81       	ldd	r22, Y+1	; 0x01
    1d28:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
    1d2c:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <prvProcessReceivedCommands>
    1d30:	f6 cf       	rjmp	.-20     	; 0x1d1e <prvTimerTask+0xa>

00001d32 <prvCheckForValidListAndQueue>:
    static void prvCheckForValidListAndQueue( void )
    {
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
    1d32:	0f b6       	in	r0, 0x3f	; 63
    1d34:	f8 94       	cli
    1d36:	0f 92       	push	r0
        {
            if( xTimerQueue == NULL )
    1d38:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <xTimerQueue>
    1d3c:	90 91 25 07 	lds	r25, 0x0725	; 0x800725 <xTimerQueue+0x1>
    1d40:	89 2b       	or	r24, r25
    1d42:	e9 f4       	brne	.+58     	; 0x1d7e <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
    1d44:	83 e3       	ldi	r24, 0x33	; 51
    1d46:	97 e0       	ldi	r25, 0x07	; 7
    1d48:	0e 94 d7 00 	call	0x1ae	; 0x1ae <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
    1d4c:	8a e2       	ldi	r24, 0x2A	; 42
    1d4e:	97 e0       	ldi	r25, 0x07	; 7
    1d50:	0e 94 d7 00 	call	0x1ae	; 0x1ae <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
    1d54:	83 e3       	ldi	r24, 0x33	; 51
    1d56:	97 e0       	ldi	r25, 0x07	; 7
    1d58:	90 93 29 07 	sts	0x0729, r25	; 0x800729 <pxCurrentTimerList+0x1>
    1d5c:	80 93 28 07 	sts	0x0728, r24	; 0x800728 <pxCurrentTimerList>
                pxOverflowTimerList = &xActiveTimerList2;
    1d60:	8a e2       	ldi	r24, 0x2A	; 42
    1d62:	97 e0       	ldi	r25, 0x07	; 7
    1d64:	90 93 27 07 	sts	0x0727, r25	; 0x800727 <pxOverflowTimerList+0x1>
    1d68:	80 93 26 07 	sts	0x0726, r24	; 0x800726 <pxOverflowTimerList>

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    1d6c:	40 e0       	ldi	r20, 0x00	; 0
    1d6e:	65 e0       	ldi	r22, 0x05	; 5
    1d70:	8a e0       	ldi	r24, 0x0A	; 10
    1d72:	0e 94 fe 04 	call	0x9fc	; 0x9fc <xQueueGenericCreate>
    1d76:	90 93 25 07 	sts	0x0725, r25	; 0x800725 <xTimerQueue+0x1>
    1d7a:	80 93 24 07 	sts	0x0724, r24	; 0x800724 <xTimerQueue>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    1d7e:	0f 90       	pop	r0
    1d80:	0f be       	out	0x3f, r0	; 63
    1d82:	08 95       	ret

00001d84 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const BaseType_t xAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
    1d84:	7f 92       	push	r7
    1d86:	8f 92       	push	r8
    1d88:	9f 92       	push	r9
    1d8a:	af 92       	push	r10
    1d8c:	bf 92       	push	r11
    1d8e:	cf 92       	push	r12
    1d90:	df 92       	push	r13
    1d92:	ef 92       	push	r14
    1d94:	ff 92       	push	r15
    1d96:	0f 93       	push	r16
    1d98:	1f 93       	push	r17
    1d9a:	cf 93       	push	r28
    1d9c:	df 93       	push	r29
    1d9e:	4c 01       	movw	r8, r24
    1da0:	5b 01       	movw	r10, r22
    1da2:	74 2e       	mov	r7, r20
    1da4:	69 01       	movw	r12, r18
    1da6:	e7 01       	movw	r28, r14
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
    1da8:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
    1dac:	99 82       	std	Y+1, r9	; 0x01
    1dae:	88 82       	st	Y, r8
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
    1db0:	bd 86       	std	Y+13, r11	; 0x0d
    1db2:	ac 86       	std	Y+12, r10	; 0x0c
        pxNewTimer->pvTimerID = pvTimerID;
    1db4:	df 86       	std	Y+15, r13	; 0x0f
    1db6:	ce 86       	std	Y+14, r12	; 0x0e
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
    1db8:	19 8b       	std	Y+17, r17	; 0x11
    1dba:	08 8b       	std	Y+16, r16	; 0x10
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
    1dbc:	c7 01       	movw	r24, r14
    1dbe:	02 96       	adiw	r24, 0x02	; 2
    1dc0:	0e 94 e5 00 	call	0x1ca	; 0x1ca <vListInitialiseItem>

        if( xAutoReload != pdFALSE )
    1dc4:	77 20       	and	r7, r7
    1dc6:	19 f0       	breq	.+6      	; 0x1dce <prvInitialiseNewTimer+0x4a>
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
    1dc8:	8a 89       	ldd	r24, Y+18	; 0x12
    1dca:	84 60       	ori	r24, 0x04	; 4
    1dcc:	8a 8b       	std	Y+18, r24	; 0x12
        }

        traceTIMER_CREATE( pxNewTimer );
    }
    1dce:	df 91       	pop	r29
    1dd0:	cf 91       	pop	r28
    1dd2:	1f 91       	pop	r17
    1dd4:	0f 91       	pop	r16
    1dd6:	ff 90       	pop	r15
    1dd8:	ef 90       	pop	r14
    1dda:	df 90       	pop	r13
    1ddc:	cf 90       	pop	r12
    1dde:	bf 90       	pop	r11
    1de0:	af 90       	pop	r10
    1de2:	9f 90       	pop	r9
    1de4:	8f 90       	pop	r8
    1de6:	7f 90       	pop	r7
    1de8:	08 95       	ret

00001dea <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
    1dea:	ef 92       	push	r14
    1dec:	ff 92       	push	r15
    1dee:	0f 93       	push	r16

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
    1df0:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
    1df4:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <xTimerQueue>
    1df8:	90 91 25 07 	lds	r25, 0x0725	; 0x800725 <xTimerQueue+0x1>
    1dfc:	89 2b       	or	r24, r25
    1dfe:	91 f0       	breq	.+36     	; 0x1e24 <xTimerCreateTimerTask+0x3a>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
    1e00:	0f 2e       	mov	r0, r31
    1e02:	f2 e2       	ldi	r31, 0x22	; 34
    1e04:	ef 2e       	mov	r14, r31
    1e06:	f7 e0       	ldi	r31, 0x07	; 7
    1e08:	ff 2e       	mov	r15, r31
    1e0a:	f0 2d       	mov	r31, r0
    1e0c:	03 e0       	ldi	r16, 0x03	; 3
    1e0e:	20 e0       	ldi	r18, 0x00	; 0
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	45 e5       	ldi	r20, 0x55	; 85
    1e14:	50 e0       	ldi	r21, 0x00	; 0
    1e16:	6a ec       	ldi	r22, 0xCA	; 202
    1e18:	70 e0       	ldi	r23, 0x00	; 0
    1e1a:	8a e8       	ldi	r24, 0x8A	; 138
    1e1c:	9e e0       	ldi	r25, 0x0E	; 14
    1e1e:	0e 94 74 08 	call	0x10e8	; 0x10e8 <xTaskCreate>
    1e22:	01 c0       	rjmp	.+2      	; 0x1e26 <xTimerCreateTimerTask+0x3c>
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
        BaseType_t xReturn = pdFAIL;
    1e24:	80 e0       	ldi	r24, 0x00	; 0
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
        return xReturn;
    }
    1e26:	0f 91       	pop	r16
    1e28:	ff 90       	pop	r15
    1e2a:	ef 90       	pop	r14
    1e2c:	08 95       	ret

00001e2e <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const BaseType_t xAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
    1e2e:	7f 92       	push	r7
    1e30:	8f 92       	push	r8
    1e32:	9f 92       	push	r9
    1e34:	af 92       	push	r10
    1e36:	bf 92       	push	r11
    1e38:	cf 92       	push	r12
    1e3a:	df 92       	push	r13
    1e3c:	ef 92       	push	r14
    1e3e:	ff 92       	push	r15
    1e40:	0f 93       	push	r16
    1e42:	1f 93       	push	r17
    1e44:	cf 93       	push	r28
    1e46:	df 93       	push	r29
    1e48:	6c 01       	movw	r12, r24
    1e4a:	5b 01       	movw	r10, r22
    1e4c:	74 2e       	mov	r7, r20
    1e4e:	49 01       	movw	r8, r18
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
    1e50:	83 e1       	ldi	r24, 0x13	; 19
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	0e 94 0a 03 	call	0x614	; 0x614 <pvPortMalloc>
    1e58:	ec 01       	movw	r28, r24

            if( pxNewTimer != NULL )
    1e5a:	00 97       	sbiw	r24, 0x00	; 0
    1e5c:	41 f0       	breq	.+16     	; 0x1e6e <xTimerCreate+0x40>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
    1e5e:	1a 8a       	std	Y+18, r1	; 0x12
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
    1e60:	7c 01       	movw	r14, r24
    1e62:	94 01       	movw	r18, r8
    1e64:	47 2d       	mov	r20, r7
    1e66:	b5 01       	movw	r22, r10
    1e68:	c6 01       	movw	r24, r12
    1e6a:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
        }
    1e6e:	ce 01       	movw	r24, r28
    1e70:	df 91       	pop	r29
    1e72:	cf 91       	pop	r28
    1e74:	1f 91       	pop	r17
    1e76:	0f 91       	pop	r16
    1e78:	ff 90       	pop	r15
    1e7a:	ef 90       	pop	r14
    1e7c:	df 90       	pop	r13
    1e7e:	cf 90       	pop	r12
    1e80:	bf 90       	pop	r11
    1e82:	af 90       	pop	r10
    1e84:	9f 90       	pop	r9
    1e86:	8f 90       	pop	r8
    1e88:	7f 90       	pop	r7
    1e8a:	08 95       	ret

00001e8c <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    1e8c:	0f 93       	push	r16
    1e8e:	1f 93       	push	r17
    1e90:	cf 93       	push	r28
    1e92:	df 93       	push	r29
    1e94:	00 d0       	rcall	.+0      	; 0x1e96 <xTimerGenericCommand+0xa>
    1e96:	00 d0       	rcall	.+0      	; 0x1e98 <xTimerGenericCommand+0xc>
    1e98:	1f 92       	push	r1
    1e9a:	cd b7       	in	r28, 0x3d	; 61
    1e9c:	de b7       	in	r29, 0x3e	; 62

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    1e9e:	e0 91 24 07 	lds	r30, 0x0724	; 0x800724 <xTimerQueue>
    1ea2:	f0 91 25 07 	lds	r31, 0x0725	; 0x800725 <xTimerQueue+0x1>
    1ea6:	30 97       	sbiw	r30, 0x00	; 0
    1ea8:	71 f1       	breq	.+92     	; 0x1f06 <xTimerGenericCommand+0x7a>
    1eaa:	d9 01       	movw	r26, r18
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    1eac:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    1eae:	5b 83       	std	Y+3, r21	; 0x03
    1eb0:	4a 83       	std	Y+2, r20	; 0x02
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    1eb2:	9d 83       	std	Y+5, r25	; 0x05
    1eb4:	8c 83       	std	Y+4, r24	; 0x04

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    1eb6:	66 30       	cpi	r22, 0x06	; 6
    1eb8:	ec f4       	brge	.+58     	; 0x1ef4 <xTimerGenericCommand+0x68>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    1eba:	0e 94 c2 0c 	call	0x1984	; 0x1984 <xTaskGetSchedulerState>
    1ebe:	82 30       	cpi	r24, 0x02	; 2
    1ec0:	61 f4       	brne	.+24     	; 0x1eda <xTimerGenericCommand+0x4e>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    1ec2:	20 e0       	ldi	r18, 0x00	; 0
    1ec4:	a8 01       	movw	r20, r16
    1ec6:	be 01       	movw	r22, r28
    1ec8:	6f 5f       	subi	r22, 0xFF	; 255
    1eca:	7f 4f       	sbci	r23, 0xFF	; 255
    1ecc:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <xTimerQueue>
    1ed0:	90 91 25 07 	lds	r25, 0x0725	; 0x800725 <xTimerQueue+0x1>
    1ed4:	0e 94 3f 05 	call	0xa7e	; 0xa7e <xQueueGenericSend>
    1ed8:	17 c0       	rjmp	.+46     	; 0x1f08 <xTimerGenericCommand+0x7c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    1eda:	20 e0       	ldi	r18, 0x00	; 0
    1edc:	40 e0       	ldi	r20, 0x00	; 0
    1ede:	50 e0       	ldi	r21, 0x00	; 0
    1ee0:	be 01       	movw	r22, r28
    1ee2:	6f 5f       	subi	r22, 0xFF	; 255
    1ee4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ee6:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <xTimerQueue>
    1eea:	90 91 25 07 	lds	r25, 0x0725	; 0x800725 <xTimerQueue+0x1>
    1eee:	0e 94 3f 05 	call	0xa7e	; 0xa7e <xQueueGenericSend>
    1ef2:	0a c0       	rjmp	.+20     	; 0x1f08 <xTimerGenericCommand+0x7c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    1ef4:	20 e0       	ldi	r18, 0x00	; 0
    1ef6:	ad 01       	movw	r20, r26
    1ef8:	be 01       	movw	r22, r28
    1efa:	6f 5f       	subi	r22, 0xFF	; 255
    1efc:	7f 4f       	sbci	r23, 0xFF	; 255
    1efe:	cf 01       	movw	r24, r30
    1f00:	0e 94 d1 05 	call	0xba2	; 0xba2 <xQueueGenericSendFromISR>
    1f04:	01 c0       	rjmp	.+2      	; 0x1f08 <xTimerGenericCommand+0x7c>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    1f06:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    1f08:	0f 90       	pop	r0
    1f0a:	0f 90       	pop	r0
    1f0c:	0f 90       	pop	r0
    1f0e:	0f 90       	pop	r0
    1f10:	0f 90       	pop	r0
    1f12:	df 91       	pop	r29
    1f14:	cf 91       	pop	r28
    1f16:	1f 91       	pop	r17
    1f18:	0f 91       	pop	r16
    1f1a:	08 95       	ret

00001f1c <BUTTON_init>:
#include "btn_cfg.h"
#include "../../MCUAL/DIO/DIO.h"
#include "btn_cfg.h"

void BUTTON_init(btn_init_param *btn_id)
{
    1f1c:	fc 01       	movw	r30, r24
	if(btn_id -> BUTTON_STATE == BUTTON_NORMAL)
    1f1e:	92 81       	ldd	r25, Z+2	; 0x02
    1f20:	91 11       	cpse	r25, r1
    1f22:	06 c0       	rjmp	.+12     	; 0x1f30 <BUTTON_init+0x14>
		DIO_setupPinDirection(btn_id -> PORT_X, btn_id -> PIN_NUM,INPUT_PIN);
    1f24:	40 e0       	ldi	r20, 0x00	; 0
    1f26:	61 81       	ldd	r22, Z+1	; 0x01
    1f28:	80 81       	ld	r24, Z
    1f2a:	0e 94 30 10 	call	0x2060	; 0x2060 <DIO_setupPinDirection>
    1f2e:	08 95       	ret
	else if(btn_id -> BUTTON_STATE == BUTTON_WITH_PULLUP)
    1f30:	91 30       	cpi	r25, 0x01	; 1
    1f32:	29 f4       	brne	.+10     	; 0x1f3e <BUTTON_init+0x22>
		DIO_setupPinDirection(btn_id -> PORT_X,btn_id -> PIN_NUM,INPUT_PIN_PULLUP);
    1f34:	41 e0       	ldi	r20, 0x01	; 1
    1f36:	61 81       	ldd	r22, Z+1	; 0x01
    1f38:	80 81       	ld	r24, Z
    1f3a:	0e 94 30 10 	call	0x2060	; 0x2060 <DIO_setupPinDirection>
    1f3e:	08 95       	ret

00001f40 <BUTTON_read>:
}

uint8_t BUTTON_read(btn_init_param *btn_id)
{
	return DIO_readPin(btn_id -> PORT_X, btn_id -> PIN_NUM);
    1f40:	fc 01       	movw	r30, r24
    1f42:	61 81       	ldd	r22, Z+1	; 0x01
    1f44:	80 81       	ld	r24, Z
    1f46:	0e 94 f6 10 	call	0x21ec	; 0x21ec <DIO_readPin>
}
    1f4a:	08 95       	ret

00001f4c <LED_init>:
/*********************************************************
*               Implement
*********************************************************/
void LED_init(uint8_t PORT_X , uint8_t PIN_NUM)
{
	DIO_setupPinDirection(PORT_X , PIN_NUM , OUTPUT_PIN); //set for this pin as output pin as put one for this pin in DDR
    1f4c:	42 e0       	ldi	r20, 0x02	; 2
    1f4e:	0e 94 30 10 	call	0x2060	; 0x2060 <DIO_setupPinDirection>
    1f52:	08 95       	ret

00001f54 <Right_LED_init>:
extern TimerHandle_t Right_BlinkTimer;
extern TimerHandle_t Left_BlinkTimer;
extern state_types state;

void Right_LED_init(void)
{
    1f54:	cf 93       	push	r28
    1f56:	df 93       	push	r29
    1f58:	00 d0       	rcall	.+0      	; 0x1f5a <Right_LED_init+0x6>
    1f5a:	1f 92       	push	r1
    1f5c:	cd b7       	in	r28, 0x3d	; 61
    1f5e:	de b7       	in	r29, 0x3e	; 62
	LED_init(Right_LED_Port, Right_LED_Pin);
    1f60:	67 e0       	ldi	r22, 0x07	; 7
    1f62:	83 e0       	ldi	r24, 0x03	; 3
    1f64:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <LED_init>
	Timer2_ConfigType config2 = {TIMER2_FAST_PWM_MODE,TIMER2_F_CPU_CLOCK,TIMER2_CLEAR_ON_COMPARE};
    1f68:	83 e0       	ldi	r24, 0x03	; 3
    1f6a:	89 83       	std	Y+1, r24	; 0x01
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	8a 83       	std	Y+2, r24	; 0x02
    1f70:	82 e0       	ldi	r24, 0x02	; 2
    1f72:	8b 83       	std	Y+3, r24	; 0x03
	TIMER2_init(&config2);
    1f74:	ce 01       	movw	r24, r28
    1f76:	01 96       	adiw	r24, 0x01	; 1
    1f78:	0e 94 7f 11 	call	0x22fe	; 0x22fe <TIMER2_init>
	PWM2_Write(1);
    1f7c:	81 e0       	ldi	r24, 0x01	; 1
    1f7e:	0e 94 c0 11 	call	0x2380	; 0x2380 <PWM2_Write>
	
}
    1f82:	0f 90       	pop	r0
    1f84:	0f 90       	pop	r0
    1f86:	0f 90       	pop	r0
    1f88:	df 91       	pop	r29
    1f8a:	cf 91       	pop	r28
    1f8c:	08 95       	ret

00001f8e <Left_LED_init>:

void Left_LED_init(void)
{
    1f8e:	cf 93       	push	r28
    1f90:	df 93       	push	r29
    1f92:	00 d0       	rcall	.+0      	; 0x1f94 <Left_LED_init+0x6>
    1f94:	1f 92       	push	r1
    1f96:	cd b7       	in	r28, 0x3d	; 61
    1f98:	de b7       	in	r29, 0x3e	; 62
	LED_init(Left_LED_Port, Left_LED_Pin);
    1f9a:	63 e0       	ldi	r22, 0x03	; 3
    1f9c:	81 e0       	ldi	r24, 0x01	; 1
    1f9e:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <LED_init>
	Timer0_ConfigType config0 = {TIMER0_FAST_PWM_MODE,TIMER0_F_CPU_CLOCK,TIMER0_CLEAR_ON_COMPARE};
    1fa2:	83 e0       	ldi	r24, 0x03	; 3
    1fa4:	89 83       	std	Y+1, r24	; 0x01
    1fa6:	81 e0       	ldi	r24, 0x01	; 1
    1fa8:	8a 83       	std	Y+2, r24	; 0x02
    1faa:	82 e0       	ldi	r24, 0x02	; 2
    1fac:	8b 83       	std	Y+3, r24	; 0x03
	TIMER0_init(&config0);
    1fae:	ce 01       	movw	r24, r28
    1fb0:	01 96       	adiw	r24, 0x01	; 1
    1fb2:	0e 94 3c 11 	call	0x2278	; 0x2278 <TIMER0_init>
	PWM_Write(1);
    1fb6:	81 e0       	ldi	r24, 0x01	; 1
    1fb8:	0e 94 7d 11 	call	0x22fa	; 0x22fa <PWM_Write>

}
    1fbc:	0f 90       	pop	r0
    1fbe:	0f 90       	pop	r0
    1fc0:	0f 90       	pop	r0
    1fc2:	df 91       	pop	r29
    1fc4:	cf 91       	pop	r28
    1fc6:	08 95       	ret

00001fc8 <Right_LED_BLINKING>:

void Right_LED_BLINKING(void)
{
    1fc8:	0f 93       	push	r16
    1fca:	1f 93       	push	r17
	
	xTimerReset(Right_BlinkTimer, 0);
    1fcc:	0e 94 03 09 	call	0x1206	; 0x1206 <xTaskGetTickCount>
    1fd0:	00 e0       	ldi	r16, 0x00	; 0
    1fd2:	10 e0       	ldi	r17, 0x00	; 0
    1fd4:	20 e0       	ldi	r18, 0x00	; 0
    1fd6:	30 e0       	ldi	r19, 0x00	; 0
    1fd8:	ac 01       	movw	r20, r24
    1fda:	62 e0       	ldi	r22, 0x02	; 2
    1fdc:	80 91 47 07 	lds	r24, 0x0747	; 0x800747 <Right_BlinkTimer>
    1fe0:	90 91 48 07 	lds	r25, 0x0748	; 0x800748 <Right_BlinkTimer+0x1>
    1fe4:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <xTimerGenericCommand>
	//if (state == R_BTN)
	//{
//
	//}

}
    1fe8:	1f 91       	pop	r17
    1fea:	0f 91       	pop	r16
    1fec:	08 95       	ret

00001fee <Left_LED_BLINKING>:

void Left_LED_BLINKING(void)
{
    1fee:	0f 93       	push	r16
    1ff0:	1f 93       	push	r17
	xTimerStart(Left_BlinkTimer, 0);
    1ff2:	0e 94 03 09 	call	0x1206	; 0x1206 <xTaskGetTickCount>
    1ff6:	00 e0       	ldi	r16, 0x00	; 0
    1ff8:	10 e0       	ldi	r17, 0x00	; 0
    1ffa:	20 e0       	ldi	r18, 0x00	; 0
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	ac 01       	movw	r20, r24
    2000:	61 e0       	ldi	r22, 0x01	; 1
    2002:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <Left_BlinkTimer>
    2006:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <Left_BlinkTimer+0x1>
    200a:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <xTimerGenericCommand>
//
	//}
	  //  LED_off(PORTC_ID, PIN3_ID);

	
}
    200e:	1f 91       	pop	r17
    2010:	0f 91       	pop	r16
    2012:	08 95       	ret

00002014 <Blink_Both>:

void Blink_Both(void)
{
    2014:	0f 93       	push	r16
    2016:	1f 93       	push	r17
		
	xTimerStart(Right_BlinkTimer, 0);
    2018:	0e 94 03 09 	call	0x1206	; 0x1206 <xTaskGetTickCount>
    201c:	00 e0       	ldi	r16, 0x00	; 0
    201e:	10 e0       	ldi	r17, 0x00	; 0
    2020:	20 e0       	ldi	r18, 0x00	; 0
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	ac 01       	movw	r20, r24
    2026:	61 e0       	ldi	r22, 0x01	; 1
    2028:	80 91 47 07 	lds	r24, 0x0747	; 0x800747 <Right_BlinkTimer>
    202c:	90 91 48 07 	lds	r25, 0x0748	; 0x800748 <Right_BlinkTimer+0x1>
    2030:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <xTimerGenericCommand>
	xTimerStart(Left_BlinkTimer, 0);
    2034:	0e 94 03 09 	call	0x1206	; 0x1206 <xTaskGetTickCount>
    2038:	20 e0       	ldi	r18, 0x00	; 0
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	ac 01       	movw	r20, r24
    203e:	61 e0       	ldi	r22, 0x01	; 1
    2040:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <Left_BlinkTimer>
    2044:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <Left_BlinkTimer+0x1>
    2048:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <xTimerGenericCommand>
	
    204c:	1f 91       	pop	r17
    204e:	0f 91       	pop	r16
    2050:	08 95       	ret

00002052 <main>:
int main(void)
{
	
	app_init();
    2052:	0e 94 83 00 	call	0x106	; 0x106 <app_init>

	app_startSchedular();
    2056:	0e 94 8a 00 	call	0x114	; 0x114 <app_startSchedular>
}
    205a:	80 e0       	ldi	r24, 0x00	; 0
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	08 95       	ret

00002060 <DIO_setupPinDirection>:
				if(BIT_IS_SET(DDRD,PIN_NUM))//check if this pin is output pin ,as if output will set or clear else will do nothing
				{
					if( value == LOGIC_HIGH)
						SET_BIT(PORTD,PIN_NUM);//write 1 in bit
					else if(value == LOGIC_LOW)
						CLEAR_BIT(PORTD,PIN_NUM);//write 0 in bit
    2060:	68 30       	cpi	r22, 0x08	; 8
    2062:	08 f0       	brcs	.+2      	; 0x2066 <DIO_setupPinDirection+0x6>
    2064:	c2 c0       	rjmp	.+388    	; 0x21ea <DIO_setupPinDirection+0x18a>
    2066:	84 30       	cpi	r24, 0x04	; 4
    2068:	08 f0       	brcs	.+2      	; 0x206c <DIO_setupPinDirection+0xc>
    206a:	bf c0       	rjmp	.+382    	; 0x21ea <DIO_setupPinDirection+0x18a>
    206c:	81 30       	cpi	r24, 0x01	; 1
    206e:	b1 f1       	breq	.+108    	; 0x20dc <DIO_setupPinDirection+0x7c>
    2070:	38 f0       	brcs	.+14     	; 0x2080 <DIO_setupPinDirection+0x20>
    2072:	82 30       	cpi	r24, 0x02	; 2
    2074:	09 f4       	brne	.+2      	; 0x2078 <DIO_setupPinDirection+0x18>
    2076:	60 c0       	rjmp	.+192    	; 0x2138 <DIO_setupPinDirection+0xd8>
    2078:	83 30       	cpi	r24, 0x03	; 3
    207a:	09 f4       	brne	.+2      	; 0x207e <DIO_setupPinDirection+0x1e>
    207c:	8a c0       	rjmp	.+276    	; 0x2192 <DIO_setupPinDirection+0x132>
    207e:	08 95       	ret
    2080:	41 11       	cpse	r20, r1
    2082:	0c c0       	rjmp	.+24     	; 0x209c <DIO_setupPinDirection+0x3c>
    2084:	2a b3       	in	r18, 0x1a	; 26
    2086:	81 e0       	ldi	r24, 0x01	; 1
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	02 c0       	rjmp	.+4      	; 0x2090 <DIO_setupPinDirection+0x30>
    208c:	88 0f       	add	r24, r24
    208e:	99 1f       	adc	r25, r25
    2090:	6a 95       	dec	r22
    2092:	e2 f7       	brpl	.-8      	; 0x208c <DIO_setupPinDirection+0x2c>
    2094:	80 95       	com	r24
    2096:	82 23       	and	r24, r18
    2098:	8a bb       	out	0x1a, r24	; 26
    209a:	08 95       	ret
    209c:	41 30       	cpi	r20, 0x01	; 1
    209e:	81 f4       	brne	.+32     	; 0x20c0 <DIO_setupPinDirection+0x60>
    20a0:	2a b3       	in	r18, 0x1a	; 26
    20a2:	81 e0       	ldi	r24, 0x01	; 1
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	02 c0       	rjmp	.+4      	; 0x20ac <DIO_setupPinDirection+0x4c>
    20a8:	88 0f       	add	r24, r24
    20aa:	99 1f       	adc	r25, r25
    20ac:	6a 95       	dec	r22
    20ae:	e2 f7       	brpl	.-8      	; 0x20a8 <DIO_setupPinDirection+0x48>
    20b0:	98 2f       	mov	r25, r24
    20b2:	90 95       	com	r25
    20b4:	92 23       	and	r25, r18
    20b6:	9a bb       	out	0x1a, r25	; 26
    20b8:	9b b3       	in	r25, 0x1b	; 27
    20ba:	89 2b       	or	r24, r25
    20bc:	8b bb       	out	0x1b, r24	; 27
    20be:	08 95       	ret
    20c0:	42 30       	cpi	r20, 0x02	; 2
    20c2:	09 f0       	breq	.+2      	; 0x20c6 <DIO_setupPinDirection+0x66>
    20c4:	92 c0       	rjmp	.+292    	; 0x21ea <DIO_setupPinDirection+0x18a>
    20c6:	2a b3       	in	r18, 0x1a	; 26
    20c8:	81 e0       	ldi	r24, 0x01	; 1
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	02 c0       	rjmp	.+4      	; 0x20d2 <DIO_setupPinDirection+0x72>
    20ce:	88 0f       	add	r24, r24
    20d0:	99 1f       	adc	r25, r25
    20d2:	6a 95       	dec	r22
    20d4:	e2 f7       	brpl	.-8      	; 0x20ce <DIO_setupPinDirection+0x6e>
    20d6:	82 2b       	or	r24, r18
    20d8:	8a bb       	out	0x1a, r24	; 26
    20da:	08 95       	ret
    20dc:	41 11       	cpse	r20, r1
    20de:	0c c0       	rjmp	.+24     	; 0x20f8 <DIO_setupPinDirection+0x98>
    20e0:	27 b3       	in	r18, 0x17	; 23
    20e2:	81 e0       	ldi	r24, 0x01	; 1
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	02 c0       	rjmp	.+4      	; 0x20ec <DIO_setupPinDirection+0x8c>
    20e8:	88 0f       	add	r24, r24
    20ea:	99 1f       	adc	r25, r25
    20ec:	6a 95       	dec	r22
    20ee:	e2 f7       	brpl	.-8      	; 0x20e8 <DIO_setupPinDirection+0x88>
    20f0:	80 95       	com	r24
    20f2:	82 23       	and	r24, r18
    20f4:	87 bb       	out	0x17, r24	; 23
    20f6:	08 95       	ret
    20f8:	41 30       	cpi	r20, 0x01	; 1
    20fa:	81 f4       	brne	.+32     	; 0x211c <DIO_setupPinDirection+0xbc>
    20fc:	27 b3       	in	r18, 0x17	; 23
    20fe:	81 e0       	ldi	r24, 0x01	; 1
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	02 c0       	rjmp	.+4      	; 0x2108 <DIO_setupPinDirection+0xa8>
    2104:	88 0f       	add	r24, r24
    2106:	99 1f       	adc	r25, r25
    2108:	6a 95       	dec	r22
    210a:	e2 f7       	brpl	.-8      	; 0x2104 <DIO_setupPinDirection+0xa4>
    210c:	98 2f       	mov	r25, r24
    210e:	90 95       	com	r25
    2110:	92 23       	and	r25, r18
    2112:	97 bb       	out	0x17, r25	; 23
    2114:	98 b3       	in	r25, 0x18	; 24
    2116:	89 2b       	or	r24, r25
    2118:	88 bb       	out	0x18, r24	; 24
    211a:	08 95       	ret
    211c:	42 30       	cpi	r20, 0x02	; 2
    211e:	09 f0       	breq	.+2      	; 0x2122 <DIO_setupPinDirection+0xc2>
    2120:	64 c0       	rjmp	.+200    	; 0x21ea <DIO_setupPinDirection+0x18a>
    2122:	27 b3       	in	r18, 0x17	; 23
    2124:	81 e0       	ldi	r24, 0x01	; 1
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	02 c0       	rjmp	.+4      	; 0x212e <DIO_setupPinDirection+0xce>
    212a:	88 0f       	add	r24, r24
    212c:	99 1f       	adc	r25, r25
    212e:	6a 95       	dec	r22
    2130:	e2 f7       	brpl	.-8      	; 0x212a <DIO_setupPinDirection+0xca>
    2132:	82 2b       	or	r24, r18
    2134:	87 bb       	out	0x17, r24	; 23
    2136:	08 95       	ret
    2138:	41 11       	cpse	r20, r1
    213a:	0c c0       	rjmp	.+24     	; 0x2154 <DIO_setupPinDirection+0xf4>
    213c:	24 b3       	in	r18, 0x14	; 20
    213e:	81 e0       	ldi	r24, 0x01	; 1
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	02 c0       	rjmp	.+4      	; 0x2148 <DIO_setupPinDirection+0xe8>
    2144:	88 0f       	add	r24, r24
    2146:	99 1f       	adc	r25, r25
    2148:	6a 95       	dec	r22
    214a:	e2 f7       	brpl	.-8      	; 0x2144 <DIO_setupPinDirection+0xe4>
    214c:	80 95       	com	r24
    214e:	82 23       	and	r24, r18
    2150:	84 bb       	out	0x14, r24	; 20
    2152:	08 95       	ret
    2154:	41 30       	cpi	r20, 0x01	; 1
    2156:	81 f4       	brne	.+32     	; 0x2178 <DIO_setupPinDirection+0x118>
    2158:	24 b3       	in	r18, 0x14	; 20
    215a:	81 e0       	ldi	r24, 0x01	; 1
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	02 c0       	rjmp	.+4      	; 0x2164 <DIO_setupPinDirection+0x104>
    2160:	88 0f       	add	r24, r24
    2162:	99 1f       	adc	r25, r25
    2164:	6a 95       	dec	r22
    2166:	e2 f7       	brpl	.-8      	; 0x2160 <DIO_setupPinDirection+0x100>
    2168:	98 2f       	mov	r25, r24
    216a:	90 95       	com	r25
    216c:	92 23       	and	r25, r18
    216e:	94 bb       	out	0x14, r25	; 20
    2170:	95 b3       	in	r25, 0x15	; 21
    2172:	89 2b       	or	r24, r25
    2174:	85 bb       	out	0x15, r24	; 21
    2176:	08 95       	ret
    2178:	42 30       	cpi	r20, 0x02	; 2
    217a:	b9 f5       	brne	.+110    	; 0x21ea <DIO_setupPinDirection+0x18a>
    217c:	24 b3       	in	r18, 0x14	; 20
    217e:	81 e0       	ldi	r24, 0x01	; 1
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	02 c0       	rjmp	.+4      	; 0x2188 <DIO_setupPinDirection+0x128>
    2184:	88 0f       	add	r24, r24
    2186:	99 1f       	adc	r25, r25
    2188:	6a 95       	dec	r22
    218a:	e2 f7       	brpl	.-8      	; 0x2184 <DIO_setupPinDirection+0x124>
    218c:	82 2b       	or	r24, r18
    218e:	84 bb       	out	0x14, r24	; 20
    2190:	08 95       	ret
    2192:	41 11       	cpse	r20, r1
    2194:	0c c0       	rjmp	.+24     	; 0x21ae <DIO_setupPinDirection+0x14e>
    2196:	21 b3       	in	r18, 0x11	; 17
    2198:	81 e0       	ldi	r24, 0x01	; 1
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	02 c0       	rjmp	.+4      	; 0x21a2 <DIO_setupPinDirection+0x142>
    219e:	88 0f       	add	r24, r24
    21a0:	99 1f       	adc	r25, r25
    21a2:	6a 95       	dec	r22
    21a4:	e2 f7       	brpl	.-8      	; 0x219e <DIO_setupPinDirection+0x13e>
    21a6:	80 95       	com	r24
    21a8:	82 23       	and	r24, r18
    21aa:	81 bb       	out	0x11, r24	; 17
    21ac:	08 95       	ret
    21ae:	41 30       	cpi	r20, 0x01	; 1
    21b0:	81 f4       	brne	.+32     	; 0x21d2 <DIO_setupPinDirection+0x172>
    21b2:	21 b3       	in	r18, 0x11	; 17
    21b4:	81 e0       	ldi	r24, 0x01	; 1
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	02 c0       	rjmp	.+4      	; 0x21be <DIO_setupPinDirection+0x15e>
    21ba:	88 0f       	add	r24, r24
    21bc:	99 1f       	adc	r25, r25
    21be:	6a 95       	dec	r22
    21c0:	e2 f7       	brpl	.-8      	; 0x21ba <DIO_setupPinDirection+0x15a>
    21c2:	98 2f       	mov	r25, r24
    21c4:	90 95       	com	r25
    21c6:	92 23       	and	r25, r18
    21c8:	91 bb       	out	0x11, r25	; 17
    21ca:	92 b3       	in	r25, 0x12	; 18
    21cc:	89 2b       	or	r24, r25
    21ce:	82 bb       	out	0x12, r24	; 18
    21d0:	08 95       	ret
    21d2:	42 30       	cpi	r20, 0x02	; 2
    21d4:	51 f4       	brne	.+20     	; 0x21ea <DIO_setupPinDirection+0x18a>
    21d6:	21 b3       	in	r18, 0x11	; 17
    21d8:	81 e0       	ldi	r24, 0x01	; 1
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	02 c0       	rjmp	.+4      	; 0x21e2 <DIO_setupPinDirection+0x182>
    21de:	88 0f       	add	r24, r24
    21e0:	99 1f       	adc	r25, r25
    21e2:	6a 95       	dec	r22
    21e4:	e2 f7       	brpl	.-8      	; 0x21de <DIO_setupPinDirection+0x17e>
    21e6:	82 2b       	or	r24, r18
    21e8:	81 bb       	out	0x11, r24	; 17
    21ea:	08 95       	ret

000021ec <DIO_readPin>:


uint8_t DIO_readPin(uint8_t PORT_X ,uint8_t PIN_NUM)
{
	uint8_t return_value = LOGIC_LOW;
	if( (PIN_NUM >= NUM_OF_PIN_PER_PORT) || (PORT_X >= NUM_OF_PORT) )
    21ec:	68 30       	cpi	r22, 0x08	; 8
    21ee:	b0 f5       	brcc	.+108    	; 0x225c <DIO_readPin+0x70>
    21f0:	84 30       	cpi	r24, 0x04	; 4
    21f2:	b0 f5       	brcc	.+108    	; 0x2260 <DIO_readPin+0x74>
	{
		//Error handling ,Nothing to do
	}
	else
	{
		switch(PORT_X)
    21f4:	81 30       	cpi	r24, 0x01	; 1
    21f6:	89 f0       	breq	.+34     	; 0x221a <DIO_readPin+0x2e>
    21f8:	28 f0       	brcs	.+10     	; 0x2204 <DIO_readPin+0x18>
    21fa:	82 30       	cpi	r24, 0x02	; 2
    21fc:	c9 f0       	breq	.+50     	; 0x2230 <DIO_readPin+0x44>
    21fe:	83 30       	cpi	r24, 0x03	; 3
    2200:	11 f1       	breq	.+68     	; 0x2246 <DIO_readPin+0x5a>
    2202:	30 c0       	rjmp	.+96     	; 0x2264 <DIO_readPin+0x78>
		{
			case PORTA_ID:
				if(BIT_IS_SET(PINA,PIN_NUM))//mean bit contain logic high
    2204:	89 b3       	in	r24, 0x19	; 25
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	02 c0       	rjmp	.+4      	; 0x220e <DIO_readPin+0x22>
    220a:	95 95       	asr	r25
    220c:	87 95       	ror	r24
    220e:	6a 95       	dec	r22
    2210:	e2 f7       	brpl	.-8      	; 0x220a <DIO_readPin+0x1e>
    2212:	80 ff       	sbrs	r24, 0
    2214:	29 c0       	rjmp	.+82     	; 0x2268 <DIO_readPin+0x7c>
					return_value = LOGIC_HIGH; // return logic high
    2216:	81 e0       	ldi	r24, 0x01	; 1
    2218:	08 95       	ret
				else //mean bit contain logic low
					return_value = LOGIC_LOW;
				break;
			case PORTB_ID :
				if(BIT_IS_SET(PINB,PIN_NUM))//mean bit contain logic high
    221a:	86 b3       	in	r24, 0x16	; 22
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	02 c0       	rjmp	.+4      	; 0x2224 <DIO_readPin+0x38>
    2220:	95 95       	asr	r25
    2222:	87 95       	ror	r24
    2224:	6a 95       	dec	r22
    2226:	e2 f7       	brpl	.-8      	; 0x2220 <DIO_readPin+0x34>
    2228:	80 ff       	sbrs	r24, 0
    222a:	20 c0       	rjmp	.+64     	; 0x226c <DIO_readPin+0x80>
					return_value = LOGIC_HIGH; // return logic high
    222c:	81 e0       	ldi	r24, 0x01	; 1
    222e:	08 95       	ret
				else //mean bit contain logic low
					return_value = LOGIC_LOW;
				break;
			case PORTC_ID :
				if(BIT_IS_SET(PINC,PIN_NUM))//mean bit contain logic high
    2230:	83 b3       	in	r24, 0x13	; 19
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	02 c0       	rjmp	.+4      	; 0x223a <DIO_readPin+0x4e>
    2236:	95 95       	asr	r25
    2238:	87 95       	ror	r24
    223a:	6a 95       	dec	r22
    223c:	e2 f7       	brpl	.-8      	; 0x2236 <DIO_readPin+0x4a>
    223e:	80 ff       	sbrs	r24, 0
    2240:	17 c0       	rjmp	.+46     	; 0x2270 <DIO_readPin+0x84>
					return_value = LOGIC_HIGH; // return logic high
    2242:	81 e0       	ldi	r24, 0x01	; 1
    2244:	08 95       	ret
				else //mean bit contain logic low
					return_value = LOGIC_LOW;
				break;
			case PORTD_ID :
				if(BIT_IS_SET(PIND,PIN_NUM))//mean bit contain logic high
    2246:	80 b3       	in	r24, 0x10	; 16
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	02 c0       	rjmp	.+4      	; 0x2250 <DIO_readPin+0x64>
    224c:	95 95       	asr	r25
    224e:	87 95       	ror	r24
    2250:	6a 95       	dec	r22
    2252:	e2 f7       	brpl	.-8      	; 0x224c <DIO_readPin+0x60>
    2254:	80 ff       	sbrs	r24, 0
    2256:	0e c0       	rjmp	.+28     	; 0x2274 <DIO_readPin+0x88>
					return_value = LOGIC_HIGH; // return logic high
    2258:	81 e0       	ldi	r24, 0x01	; 1
    225a:	08 95       	ret
}


uint8_t DIO_readPin(uint8_t PORT_X ,uint8_t PIN_NUM)
{
	uint8_t return_value = LOGIC_LOW;
    225c:	80 e0       	ldi	r24, 0x00	; 0
    225e:	08 95       	ret
    2260:	80 e0       	ldi	r24, 0x00	; 0
    2262:	08 95       	ret
    2264:	80 e0       	ldi	r24, 0x00	; 0
    2266:	08 95       	ret
		{
			case PORTA_ID:
				if(BIT_IS_SET(PINA,PIN_NUM))//mean bit contain logic high
					return_value = LOGIC_HIGH; // return logic high
				else //mean bit contain logic low
					return_value = LOGIC_LOW;
    2268:	80 e0       	ldi	r24, 0x00	; 0
    226a:	08 95       	ret
				break;
			case PORTB_ID :
				if(BIT_IS_SET(PINB,PIN_NUM))//mean bit contain logic high
					return_value = LOGIC_HIGH; // return logic high
				else //mean bit contain logic low
					return_value = LOGIC_LOW;
    226c:	80 e0       	ldi	r24, 0x00	; 0
    226e:	08 95       	ret
				break;
			case PORTC_ID :
				if(BIT_IS_SET(PINC,PIN_NUM))//mean bit contain logic high
					return_value = LOGIC_HIGH; // return logic high
				else //mean bit contain logic low
					return_value = LOGIC_LOW;
    2270:	80 e0       	ldi	r24, 0x00	; 0
    2272:	08 95       	ret
				break;
			case PORTD_ID :
				if(BIT_IS_SET(PIND,PIN_NUM))//mean bit contain logic high
					return_value = LOGIC_HIGH; // return logic high
				else //mean bit contain logic low
					return_value = LOGIC_LOW;
    2274:	80 e0       	ldi	r24, 0x00	; 0
				break;
			
		}
	}
	return return_value;
}
    2276:	08 95       	ret

00002278 <TIMER0_init>:


// uint16_t prescaler ;

void TIMER0_init(const Timer0_ConfigType * config_Ptr)
{
    2278:	fc 01       	movw	r30, r24
	if((config_Ptr->TIMER0_mode) != TIMER0_FAST_PWM_MODE)
    227a:	80 81       	ld	r24, Z
    227c:	83 30       	cpi	r24, 0x03	; 3
    227e:	19 f0       	breq	.+6      	; 0x2286 <TIMER0_init+0xe>
		SET_BIT(TCCR0,7);  /// active only for non-PWM 
    2280:	83 b7       	in	r24, 0x33	; 51
    2282:	80 68       	ori	r24, 0x80	; 128
    2284:	83 bf       	out	0x33, r24	; 51
	
	TCCR0  |= (((config_Ptr->TIMER0_mode) & 0x01) << 6) | (((config_Ptr->TIMER0_mode) & 0x02) << 3);/*set WGM00 WGM01  */
    2286:	83 b7       	in	r24, 0x33	; 51
    2288:	90 81       	ld	r25, Z
    228a:	49 2f       	mov	r20, r25
    228c:	41 70       	andi	r20, 0x01	; 1
    228e:	50 e0       	ldi	r21, 0x00	; 0
    2290:	ba 01       	movw	r22, r20
    2292:	00 24       	eor	r0, r0
    2294:	76 95       	lsr	r23
    2296:	67 95       	ror	r22
    2298:	07 94       	ror	r0
    229a:	76 95       	lsr	r23
    229c:	67 95       	ror	r22
    229e:	07 94       	ror	r0
    22a0:	76 2f       	mov	r23, r22
    22a2:	60 2d       	mov	r22, r0
    22a4:	92 70       	andi	r25, 0x02	; 2
    22a6:	49 2f       	mov	r20, r25
    22a8:	50 e0       	ldi	r21, 0x00	; 0
    22aa:	44 0f       	add	r20, r20
    22ac:	55 1f       	adc	r21, r21
    22ae:	44 0f       	add	r20, r20
    22b0:	55 1f       	adc	r21, r21
    22b2:	44 0f       	add	r20, r20
    22b4:	55 1f       	adc	r21, r21
    22b6:	46 2b       	or	r20, r22
    22b8:	48 2b       	or	r20, r24
    22ba:	43 bf       	out	0x33, r20	; 51
	TCCR0  |= (((config_Ptr->TIMER0_compare_output_mode) & 0x01) <<4 ) | (((config_Ptr->TIMER0_compare_output_mode) & 0x02) << 5);/*set COM21 COM20  */
    22bc:	83 b7       	in	r24, 0x33	; 51
    22be:	92 81       	ldd	r25, Z+2	; 0x02
    22c0:	29 2f       	mov	r18, r25
    22c2:	21 70       	andi	r18, 0x01	; 1
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	a9 01       	movw	r20, r18
    22c8:	42 95       	swap	r20
    22ca:	52 95       	swap	r21
    22cc:	50 7f       	andi	r21, 0xF0	; 240
    22ce:	54 27       	eor	r21, r20
    22d0:	40 7f       	andi	r20, 0xF0	; 240
    22d2:	54 27       	eor	r21, r20
    22d4:	92 70       	andi	r25, 0x02	; 2
    22d6:	29 2f       	mov	r18, r25
    22d8:	30 e0       	ldi	r19, 0x00	; 0
    22da:	22 0f       	add	r18, r18
    22dc:	33 1f       	adc	r19, r19
    22de:	22 95       	swap	r18
    22e0:	32 95       	swap	r19
    22e2:	30 7f       	andi	r19, 0xF0	; 240
    22e4:	32 27       	eor	r19, r18
    22e6:	20 7f       	andi	r18, 0xF0	; 240
    22e8:	32 27       	eor	r19, r18
    22ea:	24 2b       	or	r18, r20
    22ec:	28 2b       	or	r18, r24
    22ee:	23 bf       	out	0x33, r18	; 51
	TCCR0 |= config_Ptr->TIMER0_clock; /*  choose clock         */
    22f0:	93 b7       	in	r25, 0x33	; 51
    22f2:	81 81       	ldd	r24, Z+1	; 0x01
    22f4:	89 2b       	or	r24, r25
    22f6:	83 bf       	out	0x33, r24	; 51
    22f8:	08 95       	ret

000022fa <PWM_Write>:
// 	 SET_BIT(TIMSK,0);
//  }
//  
 void PWM_Write(uint8_t value)
 {
	 OCR0 = value;
    22fa:	8c bf       	out	0x3c, r24	; 60
    22fc:	08 95       	ret

000022fe <TIMER2_init>:
 * Created: 2/9/2023 12:04:46 PM
 *  Author: nada
 */ 
#include "TIMER2.h"
void TIMER2_init(const Timer2_ConfigType * config_Ptr)
{
    22fe:	fc 01       	movw	r30, r24
	if((config_Ptr->TIMER2_mode) != TIMER2_FAST_PWM_MODE)
    2300:	80 81       	ld	r24, Z
    2302:	83 30       	cpi	r24, 0x03	; 3
    2304:	19 f0       	breq	.+6      	; 0x230c <TIMER2_init+0xe>
	{ SET_BIT(TCCR0,7);  
    2306:	83 b7       	in	r24, 0x33	; 51
    2308:	80 68       	ori	r24, 0x80	; 128
    230a:	83 bf       	out	0x33, r24	; 51
		}/// active only for non-PWM
	
	TCCR2  |= (((config_Ptr->TIMER2_mode) & 0x01) << 6) | (((config_Ptr->TIMER2_mode) & 0x02) << 3);/*set WGM20 WGM21  */
    230c:	85 b5       	in	r24, 0x25	; 37
    230e:	90 81       	ld	r25, Z
    2310:	49 2f       	mov	r20, r25
    2312:	41 70       	andi	r20, 0x01	; 1
    2314:	50 e0       	ldi	r21, 0x00	; 0
    2316:	ba 01       	movw	r22, r20
    2318:	00 24       	eor	r0, r0
    231a:	76 95       	lsr	r23
    231c:	67 95       	ror	r22
    231e:	07 94       	ror	r0
    2320:	76 95       	lsr	r23
    2322:	67 95       	ror	r22
    2324:	07 94       	ror	r0
    2326:	76 2f       	mov	r23, r22
    2328:	60 2d       	mov	r22, r0
    232a:	92 70       	andi	r25, 0x02	; 2
    232c:	49 2f       	mov	r20, r25
    232e:	50 e0       	ldi	r21, 0x00	; 0
    2330:	44 0f       	add	r20, r20
    2332:	55 1f       	adc	r21, r21
    2334:	44 0f       	add	r20, r20
    2336:	55 1f       	adc	r21, r21
    2338:	44 0f       	add	r20, r20
    233a:	55 1f       	adc	r21, r21
    233c:	46 2b       	or	r20, r22
    233e:	48 2b       	or	r20, r24
    2340:	45 bd       	out	0x25, r20	; 37
	TCCR2  |= (((config_Ptr->TIMER2_compare_output_mode) & 0x01) <<4 ) | (((config_Ptr->TIMER2_compare_output_mode) & 0x02) << 5);/*set COM21 COM20  */
    2342:	85 b5       	in	r24, 0x25	; 37
    2344:	92 81       	ldd	r25, Z+2	; 0x02
    2346:	29 2f       	mov	r18, r25
    2348:	21 70       	andi	r18, 0x01	; 1
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	a9 01       	movw	r20, r18
    234e:	42 95       	swap	r20
    2350:	52 95       	swap	r21
    2352:	50 7f       	andi	r21, 0xF0	; 240
    2354:	54 27       	eor	r21, r20
    2356:	40 7f       	andi	r20, 0xF0	; 240
    2358:	54 27       	eor	r21, r20
    235a:	92 70       	andi	r25, 0x02	; 2
    235c:	29 2f       	mov	r18, r25
    235e:	30 e0       	ldi	r19, 0x00	; 0
    2360:	22 0f       	add	r18, r18
    2362:	33 1f       	adc	r19, r19
    2364:	22 95       	swap	r18
    2366:	32 95       	swap	r19
    2368:	30 7f       	andi	r19, 0xF0	; 240
    236a:	32 27       	eor	r19, r18
    236c:	20 7f       	andi	r18, 0xF0	; 240
    236e:	32 27       	eor	r19, r18
    2370:	24 2b       	or	r18, r20
    2372:	28 2b       	or	r18, r24
    2374:	25 bd       	out	0x25, r18	; 37

	TCCR2 |= config_Ptr->TIMER2_clock; /*  choose clock         */ 
    2376:	95 b5       	in	r25, 0x25	; 37
    2378:	81 81       	ldd	r24, Z+1	; 0x01
    237a:	89 2b       	or	r24, r25
    237c:	85 bd       	out	0x25, r24	; 37
    237e:	08 95       	ret

00002380 <PWM2_Write>:
	}


 void PWM2_Write(uint8_t value)
 {
	 OCR2 = value;
    2380:	83 bd       	out	0x23, r24	; 35
    2382:	08 95       	ret

00002384 <init_btns>:
* \Parameters (in) : None
* \Parameters (out): None
* \Return value:   : None
*******************************************************************************/
void init_btns(void){
	BUTTON_init(rbtn_id);
    2384:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <rbtn_id>
    2388:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <rbtn_id+0x1>
    238c:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <BUTTON_init>
	BUTTON_init(lbtn_id);
    2390:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <lbtn_id>
    2394:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <lbtn_id+0x1>
    2398:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <BUTTON_init>
	BUTTON_init(hbtn_id);
    239c:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <hbtn_id>
    23a0:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <hbtn_id+0x1>
    23a4:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <BUTTON_init>
	BUTTON_init(ignition_btn_id);
    23a8:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <ignition_btn_id>
    23ac:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <ignition_btn_id+0x1>
    23b0:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <BUTTON_init>
	BUTTON_init(null_btn_id);
    23b4:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <null_btn_id>
    23b8:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <null_btn_id+0x1>
    23bc:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <BUTTON_init>
    23c0:	08 95       	ret

000023c2 <update_btns>:
* \Parameters (in) : None
* \Parameters (out): None
* \Return value:   : None
*******************************************************************************/
void update_btns(void){
	hazard_btn_state = BUTTON_read(hbtn_id);
    23c2:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <hbtn_id>
    23c6:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <hbtn_id+0x1>
    23ca:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <BUTTON_read>
    23ce:	80 93 4b 07 	sts	0x074B, r24	; 0x80074b <hazard_btn_state>
	right_indicator_state = BUTTON_read(rbtn_id);
    23d2:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <rbtn_id>
    23d6:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <rbtn_id+0x1>
    23da:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <BUTTON_read>
    23de:	80 93 4a 07 	sts	0x074A, r24	; 0x80074a <right_indicator_state>
	left_indicator_state = BUTTON_read(lbtn_id);
    23e2:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <lbtn_id>
    23e6:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <lbtn_id+0x1>
    23ea:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <BUTTON_read>
    23ee:	80 93 4c 07 	sts	0x074C, r24	; 0x80074c <left_indicator_state>
	ignition_sw_state = BUTTON_read(ignition_btn_id);
    23f2:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <ignition_btn_id>
    23f6:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <ignition_btn_id+0x1>
    23fa:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <BUTTON_read>
    23fe:	80 93 49 07 	sts	0x0749, r24	; 0x800749 <ignition_sw_state>
	null_sw_state = BUTTON_read(null_btn_id);
    2402:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <null_btn_id>
    2406:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <null_btn_id+0x1>
    240a:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <BUTTON_read>
    240e:	80 93 4d 07 	sts	0x074D, r24	; 0x80074d <null_sw_state>
    2412:	08 95       	ret

00002414 <handle_state>:
//extern state_types state;
state_types state = NO_INDICATOR;
uint8_t hazard_flag = 0;
uint8_t Change_State = 0;

void handle_state(void){
    2414:	0f 93       	push	r16
    2416:	1f 93       	push	r17
	//LED_init(PORTC_ID, PIN3_ID);

	if((prev_ignition_sw_state == LOGIC_LOW) && (ignition_sw_state == LOGIC_LOW) && (state != H_BTN)){
    2418:	80 91 3f 07 	lds	r24, 0x073F	; 0x80073f <prev_ignition_sw_state>
    241c:	81 11       	cpse	r24, r1
    241e:	9f c0       	rjmp	.+318    	; 0x255e <handle_state+0x14a>
    2420:	80 91 49 07 	lds	r24, 0x0749	; 0x800749 <ignition_sw_state>
    2424:	81 11       	cpse	r24, r1
    2426:	9b c0       	rjmp	.+310    	; 0x255e <handle_state+0x14a>
    2428:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <state>
    242c:	82 30       	cpi	r24, 0x02	; 2
    242e:	09 f4       	brne	.+2      	; 0x2432 <handle_state+0x1e>
    2430:	96 c0       	rjmp	.+300    	; 0x255e <handle_state+0x14a>
		if ((prev_right_indicator_state == LOGIC_LOW) && (right_indicator_state == LOGIC_LOW)){
    2432:	90 91 41 07 	lds	r25, 0x0741	; 0x800741 <prev_right_indicator_state>
    2436:	91 11       	cpse	r25, r1
    2438:	2b c0       	rjmp	.+86     	; 0x2490 <handle_state+0x7c>
    243a:	90 91 4a 07 	lds	r25, 0x074A	; 0x80074a <right_indicator_state>
    243e:	91 11       	cpse	r25, r1
    2440:	27 c0       	rjmp	.+78     	; 0x2490 <handle_state+0x7c>
			if (state != R_BTN){
    2442:	88 23       	and	r24, r24
    2444:	09 f4       	brne	.+2      	; 0x2448 <handle_state+0x34>
    2446:	7e c0       	rjmp	.+252    	; 0x2544 <handle_state+0x130>
			state = R_BTN;
    2448:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <state>
			//LED_off(PORTC_ID,PIN3_ID);
			Change_State = 1;
    244c:	81 e0       	ldi	r24, 0x01	; 1
    244e:	80 93 3c 07 	sts	0x073C, r24	; 0x80073c <Change_State>
			//LED_on(PORTC_ID, PIN3_ID);
			xTimerStop(Right_BlinkTimer,0);
    2452:	00 e0       	ldi	r16, 0x00	; 0
    2454:	10 e0       	ldi	r17, 0x00	; 0
    2456:	20 e0       	ldi	r18, 0x00	; 0
    2458:	30 e0       	ldi	r19, 0x00	; 0
    245a:	40 e0       	ldi	r20, 0x00	; 0
    245c:	50 e0       	ldi	r21, 0x00	; 0
    245e:	63 e0       	ldi	r22, 0x03	; 3
    2460:	80 91 47 07 	lds	r24, 0x0747	; 0x800747 <Right_BlinkTimer>
    2464:	90 91 48 07 	lds	r25, 0x0748	; 0x800748 <Right_BlinkTimer+0x1>
    2468:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <xTimerGenericCommand>
			xTimerStop(Left_BlinkTimer,0);
    246c:	20 e0       	ldi	r18, 0x00	; 0
    246e:	30 e0       	ldi	r19, 0x00	; 0
    2470:	40 e0       	ldi	r20, 0x00	; 0
    2472:	50 e0       	ldi	r21, 0x00	; 0
    2474:	63 e0       	ldi	r22, 0x03	; 3
    2476:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <Left_BlinkTimer>
    247a:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <Left_BlinkTimer+0x1>
    247e:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <xTimerGenericCommand>
			PWM2_Write(1);
    2482:	81 e0       	ldi	r24, 0x01	; 1
    2484:	0e 94 c0 11 	call	0x2380	; 0x2380 <PWM2_Write>
			PWM_Write(1);
    2488:	81 e0       	ldi	r24, 0x01	; 1
    248a:	0e 94 7d 11 	call	0x22fa	; 0x22fa <PWM_Write>
    248e:	5a c0       	rjmp	.+180    	; 0x2544 <handle_state+0x130>
			}
		}

		else if((prev_left_indicator_state == LOGIC_LOW) && (left_indicator_state == LOGIC_LOW)){
    2490:	90 91 40 07 	lds	r25, 0x0740	; 0x800740 <prev_left_indicator_state>
    2494:	91 11       	cpse	r25, r1
    2496:	2b c0       	rjmp	.+86     	; 0x24ee <handle_state+0xda>
    2498:	90 91 4c 07 	lds	r25, 0x074C	; 0x80074c <left_indicator_state>
    249c:	91 11       	cpse	r25, r1
    249e:	27 c0       	rjmp	.+78     	; 0x24ee <handle_state+0xda>
			if (state != L_BTN){
    24a0:	81 30       	cpi	r24, 0x01	; 1
    24a2:	09 f4       	brne	.+2      	; 0x24a6 <handle_state+0x92>
    24a4:	4f c0       	rjmp	.+158    	; 0x2544 <handle_state+0x130>
			state = L_BTN;
    24a6:	81 e0       	ldi	r24, 0x01	; 1
    24a8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <state>
			//					LED_on(PORTC_ID,PIN3_ID);
			Change_State = 1;
    24ac:	80 93 3c 07 	sts	0x073C, r24	; 0x80073c <Change_State>

			xTimerStop(Right_BlinkTimer,0);
    24b0:	00 e0       	ldi	r16, 0x00	; 0
    24b2:	10 e0       	ldi	r17, 0x00	; 0
    24b4:	20 e0       	ldi	r18, 0x00	; 0
    24b6:	30 e0       	ldi	r19, 0x00	; 0
    24b8:	40 e0       	ldi	r20, 0x00	; 0
    24ba:	50 e0       	ldi	r21, 0x00	; 0
    24bc:	63 e0       	ldi	r22, 0x03	; 3
    24be:	80 91 47 07 	lds	r24, 0x0747	; 0x800747 <Right_BlinkTimer>
    24c2:	90 91 48 07 	lds	r25, 0x0748	; 0x800748 <Right_BlinkTimer+0x1>
    24c6:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <xTimerGenericCommand>
			xTimerStop(Left_BlinkTimer,0);
    24ca:	20 e0       	ldi	r18, 0x00	; 0
    24cc:	30 e0       	ldi	r19, 0x00	; 0
    24ce:	40 e0       	ldi	r20, 0x00	; 0
    24d0:	50 e0       	ldi	r21, 0x00	; 0
    24d2:	63 e0       	ldi	r22, 0x03	; 3
    24d4:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <Left_BlinkTimer>
    24d8:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <Left_BlinkTimer+0x1>
    24dc:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <xTimerGenericCommand>
			PWM2_Write(1);
    24e0:	81 e0       	ldi	r24, 0x01	; 1
    24e2:	0e 94 c0 11 	call	0x2380	; 0x2380 <PWM2_Write>
			PWM_Write(1);
    24e6:	81 e0       	ldi	r24, 0x01	; 1
    24e8:	0e 94 7d 11 	call	0x22fa	; 0x22fa <PWM_Write>
    24ec:	2b c0       	rjmp	.+86     	; 0x2544 <handle_state+0x130>
			}
		}
		else if((prev_null_sw_state == LOGIC_LOW) && (null_sw_state == LOGIC_LOW)){
    24ee:	90 91 3e 07 	lds	r25, 0x073E	; 0x80073e <prev_null_sw_state>
    24f2:	91 11       	cpse	r25, r1
    24f4:	27 c0       	rjmp	.+78     	; 0x2544 <handle_state+0x130>
    24f6:	90 91 4d 07 	lds	r25, 0x074D	; 0x80074d <null_sw_state>
    24fa:	91 11       	cpse	r25, r1
    24fc:	23 c0       	rjmp	.+70     	; 0x2544 <handle_state+0x130>
			if (state != NO_INDICATOR){
    24fe:	83 30       	cpi	r24, 0x03	; 3
    2500:	09 f1       	breq	.+66     	; 0x2544 <handle_state+0x130>
			state = NO_INDICATOR;
    2502:	83 e0       	ldi	r24, 0x03	; 3
    2504:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <state>
			xTimerStop(Right_BlinkTimer,0);
    2508:	00 e0       	ldi	r16, 0x00	; 0
    250a:	10 e0       	ldi	r17, 0x00	; 0
    250c:	20 e0       	ldi	r18, 0x00	; 0
    250e:	30 e0       	ldi	r19, 0x00	; 0
    2510:	40 e0       	ldi	r20, 0x00	; 0
    2512:	50 e0       	ldi	r21, 0x00	; 0
    2514:	63 e0       	ldi	r22, 0x03	; 3
    2516:	80 91 47 07 	lds	r24, 0x0747	; 0x800747 <Right_BlinkTimer>
    251a:	90 91 48 07 	lds	r25, 0x0748	; 0x800748 <Right_BlinkTimer+0x1>
    251e:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <xTimerGenericCommand>
			xTimerStop(Left_BlinkTimer,0);
    2522:	20 e0       	ldi	r18, 0x00	; 0
    2524:	30 e0       	ldi	r19, 0x00	; 0
    2526:	40 e0       	ldi	r20, 0x00	; 0
    2528:	50 e0       	ldi	r21, 0x00	; 0
    252a:	63 e0       	ldi	r22, 0x03	; 3
    252c:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <Left_BlinkTimer>
    2530:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <Left_BlinkTimer+0x1>
    2534:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <xTimerGenericCommand>
			PWM2_Write(1);
    2538:	81 e0       	ldi	r24, 0x01	; 1
    253a:	0e 94 c0 11 	call	0x2380	; 0x2380 <PWM2_Write>
			PWM_Write(1);
    253e:	81 e0       	ldi	r24, 0x01	; 1
    2540:	0e 94 7d 11 	call	0x22fa	; 0x22fa <PWM_Write>
			}
		}

		prev_right_indicator_state = right_indicator_state;
    2544:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <right_indicator_state>
    2548:	80 93 41 07 	sts	0x0741, r24	; 0x800741 <prev_right_indicator_state>
		prev_left_indicator_state = left_indicator_state;
    254c:	80 91 4c 07 	lds	r24, 0x074C	; 0x80074c <left_indicator_state>
    2550:	80 93 40 07 	sts	0x0740, r24	; 0x800740 <prev_left_indicator_state>
		prev_null_sw_state = null_sw_state;
    2554:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <null_sw_state>
    2558:	80 93 3e 07 	sts	0x073E, r24	; 0x80073e <prev_null_sw_state>
    255c:	2a c0       	rjmp	.+84     	; 0x25b2 <handle_state+0x19e>

	}

	else if(state != H_BTN){
    255e:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <state>
    2562:	82 30       	cpi	r24, 0x02	; 2
    2564:	31 f1       	breq	.+76     	; 0x25b2 <handle_state+0x19e>
		if(state != NO_INDICATOR){
    2566:	83 30       	cpi	r24, 0x03	; 3
    2568:	21 f1       	breq	.+72     	; 0x25b2 <handle_state+0x19e>
			state = NO_INDICATOR;
    256a:	83 e0       	ldi	r24, 0x03	; 3
    256c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <state>
			Change_State = 1u;
    2570:	81 e0       	ldi	r24, 0x01	; 1
    2572:	80 93 3c 07 	sts	0x073C, r24	; 0x80073c <Change_State>
			xTimerStop(Right_BlinkTimer,0);
    2576:	00 e0       	ldi	r16, 0x00	; 0
    2578:	10 e0       	ldi	r17, 0x00	; 0
    257a:	20 e0       	ldi	r18, 0x00	; 0
    257c:	30 e0       	ldi	r19, 0x00	; 0
    257e:	40 e0       	ldi	r20, 0x00	; 0
    2580:	50 e0       	ldi	r21, 0x00	; 0
    2582:	63 e0       	ldi	r22, 0x03	; 3
    2584:	80 91 47 07 	lds	r24, 0x0747	; 0x800747 <Right_BlinkTimer>
    2588:	90 91 48 07 	lds	r25, 0x0748	; 0x800748 <Right_BlinkTimer+0x1>
    258c:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <xTimerGenericCommand>
			xTimerStop(Left_BlinkTimer,0);
    2590:	20 e0       	ldi	r18, 0x00	; 0
    2592:	30 e0       	ldi	r19, 0x00	; 0
    2594:	40 e0       	ldi	r20, 0x00	; 0
    2596:	50 e0       	ldi	r21, 0x00	; 0
    2598:	63 e0       	ldi	r22, 0x03	; 3
    259a:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <Left_BlinkTimer>
    259e:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <Left_BlinkTimer+0x1>
    25a2:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <xTimerGenericCommand>
			PWM2_Write(1);
    25a6:	81 e0       	ldi	r24, 0x01	; 1
    25a8:	0e 94 c0 11 	call	0x2380	; 0x2380 <PWM2_Write>
			PWM_Write(1);
    25ac:	81 e0       	ldi	r24, 0x01	; 1
    25ae:	0e 94 7d 11 	call	0x22fa	; 0x22fa <PWM_Write>
		}
	}
	prev_ignition_sw_state = ignition_sw_state;
    25b2:	80 91 49 07 	lds	r24, 0x0749	; 0x800749 <ignition_sw_state>
    25b6:	80 93 3f 07 	sts	0x073F, r24	; 0x80073f <prev_ignition_sw_state>


	if ((prev_hazard_btn_state == LOGIC_LOW) && (hazard_btn_state == LOGIC_HIGH)){
    25ba:	80 91 42 07 	lds	r24, 0x0742	; 0x800742 <prev_hazard_btn_state>
    25be:	81 11       	cpse	r24, r1
    25c0:	57 c0       	rjmp	.+174    	; 0x2670 <handle_state+0x25c>
    25c2:	80 91 4b 07 	lds	r24, 0x074B	; 0x80074b <hazard_btn_state>
    25c6:	81 30       	cpi	r24, 0x01	; 1
    25c8:	09 f0       	breq	.+2      	; 0x25cc <handle_state+0x1b8>
    25ca:	52 c0       	rjmp	.+164    	; 0x2670 <handle_state+0x25c>
		if (state != H_BTN){
    25cc:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <state>
    25d0:	82 30       	cpi	r24, 0x02	; 2
    25d2:	21 f1       	breq	.+72     	; 0x261c <handle_state+0x208>
		state = H_BTN;
    25d4:	82 e0       	ldi	r24, 0x02	; 2
    25d6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <state>
		Change_State = 1;
    25da:	81 e0       	ldi	r24, 0x01	; 1
    25dc:	80 93 3c 07 	sts	0x073C, r24	; 0x80073c <Change_State>
		xTimerStop(Right_BlinkTimer,0);
    25e0:	00 e0       	ldi	r16, 0x00	; 0
    25e2:	10 e0       	ldi	r17, 0x00	; 0
    25e4:	20 e0       	ldi	r18, 0x00	; 0
    25e6:	30 e0       	ldi	r19, 0x00	; 0
    25e8:	40 e0       	ldi	r20, 0x00	; 0
    25ea:	50 e0       	ldi	r21, 0x00	; 0
    25ec:	63 e0       	ldi	r22, 0x03	; 3
    25ee:	80 91 47 07 	lds	r24, 0x0747	; 0x800747 <Right_BlinkTimer>
    25f2:	90 91 48 07 	lds	r25, 0x0748	; 0x800748 <Right_BlinkTimer+0x1>
    25f6:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <xTimerGenericCommand>
		xTimerStop(Left_BlinkTimer,0);
    25fa:	20 e0       	ldi	r18, 0x00	; 0
    25fc:	30 e0       	ldi	r19, 0x00	; 0
    25fe:	40 e0       	ldi	r20, 0x00	; 0
    2600:	50 e0       	ldi	r21, 0x00	; 0
    2602:	63 e0       	ldi	r22, 0x03	; 3
    2604:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <Left_BlinkTimer>
    2608:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <Left_BlinkTimer+0x1>
    260c:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <xTimerGenericCommand>
		PWM2_Write(1);
    2610:	81 e0       	ldi	r24, 0x01	; 1
    2612:	0e 94 c0 11 	call	0x2380	; 0x2380 <PWM2_Write>
		PWM_Write(1);
    2616:	81 e0       	ldi	r24, 0x01	; 1
    2618:	0e 94 7d 11 	call	0x22fa	; 0x22fa <PWM_Write>
		}
		hazard_flag ++;
    261c:	80 91 3d 07 	lds	r24, 0x073D	; 0x80073d <hazard_flag>
    2620:	8f 5f       	subi	r24, 0xFF	; 255
    2622:	80 93 3d 07 	sts	0x073D, r24	; 0x80073d <hazard_flag>
		if (hazard_flag != 1){
    2626:	81 30       	cpi	r24, 0x01	; 1
    2628:	f1 f0       	breq	.+60     	; 0x2666 <handle_state+0x252>
			//DIO_writePin(PORTC_ID, PIN2_ID, LOGIC_HIGH);
			state = NO_INDICATOR;
    262a:	83 e0       	ldi	r24, 0x03	; 3
    262c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <state>
			Change_State = 1;
    2630:	81 e0       	ldi	r24, 0x01	; 1
    2632:	80 93 3c 07 	sts	0x073C, r24	; 0x80073c <Change_State>
			xTimerStop(Right_BlinkTimer,0);
    2636:	00 e0       	ldi	r16, 0x00	; 0
    2638:	10 e0       	ldi	r17, 0x00	; 0
    263a:	20 e0       	ldi	r18, 0x00	; 0
    263c:	30 e0       	ldi	r19, 0x00	; 0
    263e:	40 e0       	ldi	r20, 0x00	; 0
    2640:	50 e0       	ldi	r21, 0x00	; 0
    2642:	63 e0       	ldi	r22, 0x03	; 3
    2644:	80 91 47 07 	lds	r24, 0x0747	; 0x800747 <Right_BlinkTimer>
    2648:	90 91 48 07 	lds	r25, 0x0748	; 0x800748 <Right_BlinkTimer+0x1>
    264c:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <xTimerGenericCommand>
			xTimerStop(Left_BlinkTimer,0);
    2650:	20 e0       	ldi	r18, 0x00	; 0
    2652:	30 e0       	ldi	r19, 0x00	; 0
    2654:	40 e0       	ldi	r20, 0x00	; 0
    2656:	50 e0       	ldi	r21, 0x00	; 0
    2658:	63 e0       	ldi	r22, 0x03	; 3
    265a:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <Left_BlinkTimer>
    265e:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <Left_BlinkTimer+0x1>
    2662:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <xTimerGenericCommand>
			//PWM2_Write(1);
			//PWM_Write(1);
		}
		hazard_flag = hazard_flag % 2;
    2666:	80 91 3d 07 	lds	r24, 0x073D	; 0x80073d <hazard_flag>
    266a:	81 70       	andi	r24, 0x01	; 1
    266c:	80 93 3d 07 	sts	0x073D, r24	; 0x80073d <hazard_flag>
	}
	prev_hazard_btn_state = hazard_btn_state;
    2670:	80 91 4b 07 	lds	r24, 0x074B	; 0x80074b <hazard_btn_state>
    2674:	80 93 42 07 	sts	0x0742, r24	; 0x800742 <prev_hazard_btn_state>
}
    2678:	1f 91       	pop	r17
    267a:	0f 91       	pop	r16
    267c:	08 95       	ret

0000267e <Poll>:
int counter = 0 ;
uint8_t readvalue;
extern TimerHandle_t Right_BlinkTimer;
void Poll(void)
{
	if(polling_enabled && (!counter))
    267e:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <polling_enabled>
    2682:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <polling_enabled+0x1>
    2686:	89 2b       	or	r24, r25
    2688:	51 f0       	breq	.+20     	; 0x269e <Poll+0x20>
    268a:	80 91 43 07 	lds	r24, 0x0743	; 0x800743 <counter>
    268e:	90 91 44 07 	lds	r25, 0x0744	; 0x800744 <counter+0x1>
    2692:	89 2b       	or	r24, r25
    2694:	21 f4       	brne	.+8      	; 0x269e <Poll+0x20>
	{
		update_btns();
    2696:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <update_btns>
		//readvalue = DIO_readPin(PORTA_ID,PIN0_ID);
		//if(readvalue ==0){
		handle_state();
    269a:	0e 94 0a 12 	call	0x2414	; 0x2414 <handle_state>
		//LED_on(Left_LED_Port, Left_LED_Pin);
		//}
//		test();

	}
	counter++;
    269e:	80 91 43 07 	lds	r24, 0x0743	; 0x800743 <counter>
    26a2:	90 91 44 07 	lds	r25, 0x0744	; 0x800744 <counter+0x1>
    26a6:	01 96       	adiw	r24, 0x01	; 1
	counter = counter%polling_counter;
    26a8:	60 91 7d 00 	lds	r22, 0x007D	; 0x80007d <polling_counter>
    26ac:	70 91 7e 00 	lds	r23, 0x007E	; 0x80007e <polling_counter+0x1>
    26b0:	0e 94 91 13 	call	0x2722	; 0x2722 <__divmodhi4>
    26b4:	90 93 44 07 	sts	0x0744, r25	; 0x800744 <counter+0x1>
    26b8:	80 93 43 07 	sts	0x0743, r24	; 0x800743 <counter>
    26bc:	08 95       	ret

000026be <SYSTEM_BEHAVIOR>:
extern uint8_t Change_State;

void SYSTEM_BEHAVIOR (void)
{
	
	if (Change_State == 1){
    26be:	80 91 3c 07 	lds	r24, 0x073C	; 0x80073c <Change_State>
    26c2:	81 30       	cpi	r24, 0x01	; 1
    26c4:	c9 f4       	brne	.+50     	; 0x26f8 <SYSTEM_BEHAVIOR+0x3a>
		Change_State = 0;
    26c6:	10 92 3c 07 	sts	0x073C, r1	; 0x80073c <Change_State>
	switch (state)
    26ca:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <state>
    26ce:	81 30       	cpi	r24, 0x01	; 1
    26d0:	39 f0       	breq	.+14     	; 0x26e0 <SYSTEM_BEHAVIOR+0x22>
    26d2:	18 f0       	brcs	.+6      	; 0x26da <SYSTEM_BEHAVIOR+0x1c>
    26d4:	82 30       	cpi	r24, 0x02	; 2
    26d6:	39 f0       	breq	.+14     	; 0x26e6 <SYSTEM_BEHAVIOR+0x28>
    26d8:	09 c0       	rjmp	.+18     	; 0x26ec <SYSTEM_BEHAVIOR+0x2e>
	{
		case R_BTN :
		//if (u8_global_Counter == 0){
		//xTimerReset(BlinkTimer, 0);
		//u8_static_CurrState = R_BTN;
		Right_LED_BLINKING();
    26da:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <Right_LED_BLINKING>
		//u8_static_PrevState = u8_static_CurrState;
		//}
		break;
    26de:	08 95       	ret
		
		case L_BTN :
		//if (u8_global_Counter == 0){
		//xTimerReset(BlinkTimer, 0);
		//u8_static_CurrState = L_BTN;
		Left_LED_BLINKING();
    26e0:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <Left_LED_BLINKING>
		//u8_static_PrevState = u8_static_CurrState;
		//}
		break;
    26e4:	08 95       	ret
		case H_BTN :
		//if (u8_global_Counter == 0)
		//{
			
				//xTimerReset(BlinkTimer, 0);
				Blink_Both();
    26e6:	0e 94 0a 10 	call	0x2014	; 0x2014 <Blink_Both>
		//{
			//state = u8_static_PrevState;
			////xTimerReset(BlinkTimer, 0);
			//u8_global_Counter = 0;
		//}
		break;
    26ea:	08 95       	ret
		default:
			//LED_on(PORTC_ID, PIN3_ID);

		//xTimerStop(Right_BlinkTimer,0);
		//xTimerStop(Left_BlinkTimer,0);
		PWM2_Write(1);
    26ec:	81 e0       	ldi	r24, 0x01	; 1
    26ee:	0e 94 c0 11 	call	0x2380	; 0x2380 <PWM2_Write>
		PWM_Write(1);
    26f2:	81 e0       	ldi	r24, 0x01	; 1
    26f4:	0e 94 7d 11 	call	0x22fa	; 0x22fa <PWM_Write>
    26f8:	08 95       	ret

000026fa <__udivmodhi4>:
    26fa:	aa 1b       	sub	r26, r26
    26fc:	bb 1b       	sub	r27, r27
    26fe:	51 e1       	ldi	r21, 0x11	; 17
    2700:	07 c0       	rjmp	.+14     	; 0x2710 <__udivmodhi4_ep>

00002702 <__udivmodhi4_loop>:
    2702:	aa 1f       	adc	r26, r26
    2704:	bb 1f       	adc	r27, r27
    2706:	a6 17       	cp	r26, r22
    2708:	b7 07       	cpc	r27, r23
    270a:	10 f0       	brcs	.+4      	; 0x2710 <__udivmodhi4_ep>
    270c:	a6 1b       	sub	r26, r22
    270e:	b7 0b       	sbc	r27, r23

00002710 <__udivmodhi4_ep>:
    2710:	88 1f       	adc	r24, r24
    2712:	99 1f       	adc	r25, r25
    2714:	5a 95       	dec	r21
    2716:	a9 f7       	brne	.-22     	; 0x2702 <__udivmodhi4_loop>
    2718:	80 95       	com	r24
    271a:	90 95       	com	r25
    271c:	bc 01       	movw	r22, r24
    271e:	cd 01       	movw	r24, r26
    2720:	08 95       	ret

00002722 <__divmodhi4>:
    2722:	97 fb       	bst	r25, 7
    2724:	07 2e       	mov	r0, r23
    2726:	16 f4       	brtc	.+4      	; 0x272c <__divmodhi4+0xa>
    2728:	00 94       	com	r0
    272a:	07 d0       	rcall	.+14     	; 0x273a <__divmodhi4_neg1>
    272c:	77 fd       	sbrc	r23, 7
    272e:	09 d0       	rcall	.+18     	; 0x2742 <__divmodhi4_neg2>
    2730:	0e 94 7d 13 	call	0x26fa	; 0x26fa <__udivmodhi4>
    2734:	07 fc       	sbrc	r0, 7
    2736:	05 d0       	rcall	.+10     	; 0x2742 <__divmodhi4_neg2>
    2738:	3e f4       	brtc	.+14     	; 0x2748 <__divmodhi4_exit>

0000273a <__divmodhi4_neg1>:
    273a:	90 95       	com	r25
    273c:	81 95       	neg	r24
    273e:	9f 4f       	sbci	r25, 0xFF	; 255
    2740:	08 95       	ret

00002742 <__divmodhi4_neg2>:
    2742:	70 95       	com	r23
    2744:	61 95       	neg	r22
    2746:	7f 4f       	sbci	r23, 0xFF	; 255

00002748 <__divmodhi4_exit>:
    2748:	08 95       	ret

0000274a <__tablejump2__>:
    274a:	ee 0f       	add	r30, r30
    274c:	ff 1f       	adc	r31, r31
    274e:	05 90       	lpm	r0, Z+
    2750:	f4 91       	lpm	r31, Z
    2752:	e0 2d       	mov	r30, r0
    2754:	09 94       	ijmp

00002756 <memcpy>:
    2756:	fb 01       	movw	r30, r22
    2758:	dc 01       	movw	r26, r24
    275a:	02 c0       	rjmp	.+4      	; 0x2760 <memcpy+0xa>
    275c:	01 90       	ld	r0, Z+
    275e:	0d 92       	st	X+, r0
    2760:	41 50       	subi	r20, 0x01	; 1
    2762:	50 40       	sbci	r21, 0x00	; 0
    2764:	d8 f7       	brcc	.-10     	; 0x275c <memcpy+0x6>
    2766:	08 95       	ret

00002768 <_exit>:
    2768:	f8 94       	cli

0000276a <__stop_program>:
    276a:	ff cf       	rjmp	.-2      	; 0x276a <__stop_program>
